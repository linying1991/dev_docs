var search_data = {"index":{"searchIndex":["coverage","line_stub()","peek_result()","result()","running?()","start()"],"longSearchIndex":["coverage","coverage::line_stub()","coverage::peek_result()","coverage::result()","coverage::running?()","coverage::start()"],"info":[["Coverage","","Coverage.html","","<p>Coverage provides coverage measurement feature for Ruby. This feature is\nexperimental, so these APIs …\n"],["line_stub","Coverage","Coverage.html#method-c-line_stub","(file)",""],["peek_result","Coverage","Coverage.html#method-c-peek_result","()","<p>Returns a hash that contains filename as key and coverage array as value.\nThis is the same as `Coverage.result(stop: …\n"],["result","Coverage","Coverage.html#method-c-result","(p1 = v1)","<p>Returns a hash that contains filename as key and coverage array as value.\nIf <code>clear</code> is true, it clears …\n"],["running?","Coverage","Coverage.html#method-c-running-3F","()","<p>Returns true if coverage stats are currently being collected (after\nCoverage.start call, but before  …\n"],["start","Coverage","Coverage.html#method-c-start","(p1 = v1)","<p>Enables coverage measurement.\n"]]}}