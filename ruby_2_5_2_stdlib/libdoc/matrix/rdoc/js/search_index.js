var search_data = {"index":{"searchIndex":["exceptionformatrix","errdimensionmismatch","errnotregular","erroperationnotdefined","erroperationnotimplemented","matrix","eigenvaluedecomposition","lupdecomposition","object","i()","[]()","[]()","[]=()","build()","column_vector()","columns()","combine()","combine()","component()","d()","det()","determinant()","diagonal()","eigenvalue_matrix()","eigenvalues()","eigenvector_matrix()","eigenvector_matrix_inv()","eigenvectors()","element()","empty()","hstack()","identity()","l()","new()","new()","new()","new()","new()","new()","new()","p()","row_vector()","rows()","scalar()","set_component()","set_element()","singular?()","solve()","to_a()","to_a()","to_ary()","to_ary()","u()","unit()","v()","v_inv()","vstack()","zero()"],"longSearchIndex":["exceptionformatrix","exceptionformatrix::errdimensionmismatch","exceptionformatrix::errnotregular","exceptionformatrix::erroperationnotdefined","exceptionformatrix::erroperationnotimplemented","matrix","matrix::eigenvaluedecomposition","matrix::lupdecomposition","object","matrix::i()","matrix::[]()","object#[]()","object#[]=()","matrix::build()","matrix::column_vector()","matrix::columns()","matrix::combine()","matrix#combine()","object#component()","matrix::eigenvaluedecomposition#d()","matrix::lupdecomposition#det()","matrix::lupdecomposition#determinant()","matrix::diagonal()","matrix::eigenvaluedecomposition#eigenvalue_matrix()","matrix::eigenvaluedecomposition#eigenvalues()","matrix::eigenvaluedecomposition#eigenvector_matrix()","matrix::eigenvaluedecomposition#eigenvector_matrix_inv()","matrix::eigenvaluedecomposition#eigenvectors()","object#element()","matrix::empty()","matrix::hstack()","matrix::identity()","matrix::lupdecomposition#l()","exceptionformatrix::errdimensionmismatch::new()","exceptionformatrix::errnotregular::new()","exceptionformatrix::erroperationnotdefined::new()","exceptionformatrix::erroperationnotimplemented::new()","matrix::new()","matrix::eigenvaluedecomposition::new()","matrix::lupdecomposition::new()","matrix::lupdecomposition#p()","matrix::row_vector()","matrix::rows()","matrix::scalar()","object#set_component()","object#set_element()","matrix::lupdecomposition#singular?()","matrix::lupdecomposition#solve()","matrix::eigenvaluedecomposition#to_a()","matrix::lupdecomposition#to_a()","matrix::eigenvaluedecomposition#to_ary()","matrix::lupdecomposition#to_ary()","matrix::lupdecomposition#u()","matrix::unit()","matrix::eigenvaluedecomposition#v()","matrix::eigenvaluedecomposition#v_inv()","matrix::vstack()","matrix::zero()"],"info":[["ExceptionForMatrix","","ExceptionForMatrix.html","",""],["ExceptionForMatrix::ErrDimensionMismatch","","ExceptionForMatrix/ErrDimensionMismatch.html","",""],["ExceptionForMatrix::ErrNotRegular","","ExceptionForMatrix/ErrNotRegular.html","",""],["ExceptionForMatrix::ErrOperationNotDefined","","ExceptionForMatrix/ErrOperationNotDefined.html","",""],["ExceptionForMatrix::ErrOperationNotImplemented","","ExceptionForMatrix/ErrOperationNotImplemented.html","",""],["Matrix","","Matrix.html","","<p>The <code>Matrix</code> class represents a mathematical matrix. It provides\nmethods for creating matrices, operating …\n"],["Matrix::EigenvalueDecomposition","","Matrix/EigenvalueDecomposition.html","","<p>Eigenvalues and eigenvectors of a real matrix.\n<p>Computes the eigenvalues and eigenvectors of a matrix  …\n"],["Matrix::LUPDecomposition","","Matrix/LUPDecomposition.html","","<p>For an m-by-n matrix A with m &gt;= n, the LU decomposition is an m-by-n\nunit lower triangular matrix …\n"],["Object","","Object.html","",""],["I","Matrix","Matrix.html#method-c-I","(n)",""],["[]","Matrix","Matrix.html#method-c-5B-5D","(*rows)","<p>Creates a matrix where each argument is a row.\n\n<pre>Matrix[ [25, 93], [-1, 66] ]\n   =&gt;  25 93\n       -1 66</pre>\n"],["[]","Object","Object.html#method-i-5B-5D","(i, j)","<p>Returns element (<code>i</code>,<code>j</code>) of the matrix.  That is:\nrow <code>i</code>, column <code>j</code>.\n"],["[]=","Object","Object.html#method-i-5B-5D-3D","(i, j, v)","<p>Set element or elements of matrix.\n"],["build","Matrix","Matrix.html#method-c-build","(row_count, column_count = row_count)","<p>Creates a matrix of size <code>row_count</code> x\n<code>column_count</code>. It fills the values by calling the given block,\npassing …\n"],["column_vector","Matrix","Matrix.html#method-c-column_vector","(column)","<p>Creates a single-column matrix where the values of that column are as given\nin <code>column</code>.\n\n<pre>Matrix.column_vector([4,5,6]) ...</pre>\n"],["columns","Matrix","Matrix.html#method-c-columns","(columns)","<p>Creates a matrix using <code>columns</code> as an array of column vectors.\n\n<pre>Matrix.columns([[25, 93], [-1, 66]])\n   ...</pre>\n"],["combine","Matrix","Matrix.html#method-c-combine","(*matrices)","<p>Create a matrix by combining matrices entrywise, using the given block\n\n<pre>x = Matrix[[6, 6], [4, 4]]\ny = ...</pre>\n"],["combine","Matrix","Matrix.html#method-i-combine","(*matrices, &block)",""],["component","Object","Object.html#method-i-component","(i, j)",""],["d","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-d","()",""],["det","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-det","()","<p>Returns the determinant of <code>A</code>, calculated efficiently from the\nfactorization.\n"],["determinant","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-determinant","()",""],["diagonal","Matrix","Matrix.html#method-c-diagonal","(*values)","<p>Creates a matrix where the diagonal elements are composed of\n<code>values</code>.\n\n<pre>Matrix.diagonal(9, 5, -3)\n  =&gt;  9 ...</pre>\n"],["eigenvalue_matrix","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvalue_matrix","()","<p>Returns the block diagonal eigenvalue matrix <code>D</code>\n"],["eigenvalues","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvalues","()","<p>Returns the eigenvalues in an array\n"],["eigenvector_matrix","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvector_matrix","()","<p>Returns the eigenvector matrix <code>V</code>\n"],["eigenvector_matrix_inv","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvector_matrix_inv","()","<p>Returns the inverse of the eigenvector matrix <code>V</code>\n"],["eigenvectors","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvectors","()","<p>Returns an array of the eigenvectors\n"],["element","Object","Object.html#method-i-element","(i, j)",""],["empty","Matrix","Matrix.html#method-c-empty","(row_count = 0, column_count = 0)","<p>Creates a empty matrix of <code>row_count</code> x\n<code>column_count</code>. At least one of <code>row_count</code> or\n<code>column_count</code> must be …\n"],["hstack","Matrix","Matrix.html#method-c-hstack","(x, *matrices)","<p>Create a matrix by stacking matrices horizontally\n\n<pre>x = Matrix[[1, 2], [3, 4]]\ny = Matrix[[5, 6], [7, 8]] ...</pre>\n"],["identity","Matrix","Matrix.html#method-c-identity","(n)","<p>Creates an <code>n</code> by <code>n</code> identity matrix.\n\n<pre>Matrix.identity(2)\n  =&gt; 1 0\n     0 1</pre>\n"],["l","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-l","()",""],["new","ExceptionForMatrix::ErrDimensionMismatch","ExceptionForMatrix/ErrDimensionMismatch.html#method-c-new","(val = nil)",""],["new","ExceptionForMatrix::ErrNotRegular","ExceptionForMatrix/ErrNotRegular.html#method-c-new","(val = nil)",""],["new","ExceptionForMatrix::ErrOperationNotDefined","ExceptionForMatrix/ErrOperationNotDefined.html#method-c-new","(vals)",""],["new","ExceptionForMatrix::ErrOperationNotImplemented","ExceptionForMatrix/ErrOperationNotImplemented.html#method-c-new","(vals)",""],["new","Matrix","Matrix.html#method-c-new","(rows, column_count = rows[0].size)","<p>Matrix.new is private; use Matrix.rows, columns, [], etc… to create.\n"],["new","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-c-new","(a)","<p>Constructs the eigenvalue decomposition for a square matrix <code>A</code>\n"],["new","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-c-new","(a)",""],["p","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-p","()","<p>Returns the permutation matrix <code>P</code>\n"],["row_vector","Matrix","Matrix.html#method-c-row_vector","(row)","<p>Creates a single-row matrix where the values of that row are as given in\n<code>row</code>.\n\n<pre>Matrix.row_vector([4,5,6]) ...</pre>\n"],["rows","Matrix","Matrix.html#method-c-rows","(rows, copy = true)","<p>Creates a matrix where <code>rows</code> is an array of arrays, each of\nwhich is a row of the matrix.  If the optional …\n"],["scalar","Matrix","Matrix.html#method-c-scalar","(n, value)","<p>Creates an <code>n</code> by <code>n</code> diagonal matrix where each\ndiagonal element is <code>value</code>.\n\n<pre>Matrix.scalar(2, 5)\n  =&gt; 5 0\n ...</pre>\n"],["set_component","Object","Object.html#method-i-set_component","(i, j, v)",""],["set_element","Object","Object.html#method-i-set_element","(i, j, v)",""],["singular?","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-singular-3F","()","<p>Returns <code>true</code> if <code>U</code>, and hence <code>A</code>, is\nsingular.\n"],["solve","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-solve","(b)","<p>Returns <code>m</code> so that <code>A*m = b</code>, or equivalently so\nthat <code>L*U*m = P*b</code> <code>b</code> can be a Matrix or a Vector\n"],["to_a","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-to_a","()",""],["to_a","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-to_a","()",""],["to_ary","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-to_ary","()","<p>Returns [eigenvector_matrix, eigenvalue_matrix, eigenvector_matrix_inv]\n"],["to_ary","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-to_ary","()","<p>Returns <code>L</code>, <code>U</code>, <code>P</code> in an array\n"],["u","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-u","()","<p>Returns the upper triangular factor <code>U</code>\n"],["unit","Matrix","Matrix.html#method-c-unit","(n)",""],["v","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-v","()",""],["v_inv","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-v_inv","()",""],["vstack","Matrix","Matrix.html#method-c-vstack","(x, *matrices)","<p>Create a matrix by stacking matrices vertically\n\n<pre>x = Matrix[[1, 2], [3, 4]]\ny = Matrix[[5, 6], [7, 8]] ...</pre>\n"],["zero","Matrix","Matrix.html#method-c-zero","(row_count, column_count = row_count)","<p>Creates a zero matrix.\n\n<pre>Matrix.zero(2)\n  =&gt; 0 0\n     0 0</pre>\n"]]}}