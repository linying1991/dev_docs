var search_data = {"index":{"searchIndex":["delegator","object","!()","!=()","==()","__getobj__()","__raise__()","__setobj__()","eql?()","freeze()","marshal_dump()","marshal_load()","method_missing()","methods()","new()","protected_methods()","public_methods()","raise()","respond_to_missing?()"],"longSearchIndex":["delegator","object","object#!()","object#!=()","object#==()","object#__getobj__()","delegator#__raise__()","object#__setobj__()","object#eql?()","object#freeze()","object#marshal_dump()","object#marshal_load()","delegator#method_missing()","object#methods()","delegator::new()","object#protected_methods()","object#public_methods()","delegator#raise()","delegator#respond_to_missing?()"],"info":[["Delegator","","Delegator.html","","<p>This library provides three different ways to delegate method calls to an\nobject.  The easiest to use …\n"],["Object","","Object.html","",""],["!","Object","Object.html#method-i-21","()","<p>Delegates ! to the _<em>getobj</em>_\n"],["!=","Object","Object.html#method-i-21-3D","(obj)","<p>Returns true if two objects are not considered of equal value.\n"],["==","Object","Object.html#method-i-3D-3D","(obj)","<p>Returns true if two objects are considered of equal value.\n"],["__getobj__","Object","Object.html#method-i-__getobj__","()","<p>This method must be overridden by subclasses and should return the object\nmethod calls are being delegated …\n"],["__raise__","Delegator","Delegator.html#method-i-__raise__","",""],["__setobj__","Object","Object.html#method-i-__setobj__","(obj)","<p>This method must be overridden by subclasses and change the object delegate\nto <em>obj</em>.\n"],["eql?","Object","Object.html#method-i-eql-3F","(obj)","<p>Returns true if two objects are considered of equal value.\n"],["freeze","Object","Object.html#method-i-freeze","()","<p>:method: freeze Freeze both the object returned by _<em>getobj</em>_ and\nself.\n"],["marshal_dump","Object","Object.html#method-i-marshal_dump","()","<p>Serialization support for the object returned by _<em>getobj</em>_.\n"],["marshal_load","Object","Object.html#method-i-marshal_load","(data)","<p>Reinitializes delegation from a serialized object.\n"],["method_missing","Delegator","Delegator.html#method-i-method_missing","(m, *args, &block)",""],["methods","Object","Object.html#method-i-methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this\nobject’s and _<em>getobj</em>_ methods. …\n"],["new","Delegator","Delegator.html#method-c-new","(obj)","<p>Pass in the <em>obj</em> to delegate method calls to.  All methods\nsupported by <em>obj</em> will be delegated to.\n"],["protected_methods","Object","Object.html#method-i-protected_methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this\nobject’s and _<em>getobj</em>_ protected …\n"],["public_methods","Object","Object.html#method-i-public_methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this\nobject’s and _<em>getobj</em>_ public …\n"],["raise","Delegator","Delegator.html#method-i-raise","","<p>Use #__raise__ if your Delegator does not have a object to delegate the\n#raise method call.\n"],["respond_to_missing?","Delegator","Delegator.html#method-i-respond_to_missing-3F","(m, include_private)","<p>Checks for a method provided by this the delegate object by forwarding the\ncall through _<em>getobj</em>_.\n"]]}}