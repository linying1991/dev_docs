var search_data = {"index":{"searchIndex":["exception_type","exception_type","exception_type","exception_type","httpclientexception","httpgatewaytimeout","httpmovedtemporarily","httpmultiplechoice","httprequestentitytoolarge","httprequesttimeout","httprequesturitoolarge","httprequesturitoolong","httprequesturitoolarge","httprequestedrangenotsatisfiable","net","http","copy","delete","get","head","lock","mkcol","move","options","patch","post","propfind","proppatch","put","trace","unlock","httpaccepted","httpalreadyreported","httpbadgateway","httpbadrequest","httpbadresponse","httpclienterror","httpconflict","httpcontinue","httpcreated","httpearlyhints","exception_type","httpexceptions","httpexpectationfailed","httpfaileddependency","httpfatalerror","httpforbidden","httpmovedtemporarily","httpgatewaytimeout","httpgenericrequest","httpgone","httpheader","httpheadersyntaxerror","httpimused","httpinformation","httpinsufficientstorage","httpinternalservererror","httplengthrequired","httplocked","httploopdetected","httpmethodnotallowed","httpmisdirectedrequest","httpmovedpermanently","httpmultistatus","httpmultiplechoice","httpnetworkauthenticationrequired","httpnocontent","httpnonauthoritativeinformation","httpnotacceptable","httpnotextended","httpnotfound","httpnotimplemented","httpnotmodified","httpok","httppartialcontent","httprequestentitytoolarge","httppaymentrequired","httppermanentredirect","httppreconditionfailed","httppreconditionrequired","httpprocessing","httpproxyauthenticationrequired","httprequestedrangenotsatisfiable","httpredirection","httprequest","httprequestheaderfieldstoolarge","httprequesttimeout","httpresetcontent","httpresponse","exception_type","httpseeother","httpservererror","httpclientexception","httpserviceunavailable","httpsuccess","httpswitchprotocol","httptemporaryredirect","httptoomanyrequests","httprequesturitoolong","httpunauthorized","httpunavailableforlegalreasons","httpunknownresponse","httpunprocessableentity","httpunsupportedmediatype","httpupgraderequired","httpuseproxy","httpvariantalsonegotiates","httpversionnotsupported","http","proxy()","[]()","[]=()","active?()","add_field()","body()","body=()","body=()","body_exist?()","body_permitted?()","body_stream=()","continue_timeout=()","copy()","default_port()","delete()","entity()","finish()","get()","get()","get2()","get_print()","get_response()","head()","head2()","http_default_port()","https_default_port()","initialize_http_header()","inspect()","inspect()","inspect()","ipaddr()","ipaddr=()","is_version_1_2?()","lock()","max_retries=()","mkcol()","move()","new()","new()","new()","new()","newobj()","options()","patch()","peer_cert()","post()","post()","post2()","post_form()","propfind()","proppatch()","proxy?()","proxy_address()","proxy_class?()","proxy_from_env?()","proxy_pass()","proxy_port()","proxy_user()","proxyaddr()","proxyport()","read_body()","read_timeout=()","request()","request_body_permitted?()","request_get()","request_head()","request_post()","response_body_permitted?()","send_request()","set_debug_output()","start()","start()","started?()","trace()","unlock()","use_ssl=()","use_ssl?()","value()","version_1_2()","version_1_2?()","write_timeout=()"],"longSearchIndex":["exception_type","exception_type","exception_type","exception_type","httpclientexception","httpgatewaytimeout","httpmovedtemporarily","httpmultiplechoice","httprequestentitytoolarge","httprequesttimeout","httprequesturitoolarge","httprequesturitoolong","httprequesturitoolong","httprequestedrangenotsatisfiable","net","net::http","net::http::copy","net::http::delete","net::http::get","net::http::head","net::http::lock","net::http::mkcol","net::http::move","net::http::options","net::http::patch","net::http::post","net::http::propfind","net::http::proppatch","net::http::put","net::http::trace","net::http::unlock","net::httpaccepted","net::httpalreadyreported","net::httpbadgateway","net::httpbadrequest","net::httpbadresponse","net::httpclienterror","net::httpconflict","net::httpcontinue","net::httpcreated","net::httpearlyhints","net::httperror","net::httpexceptions","net::httpexpectationfailed","net::httpfaileddependency","net::httpfatalerror","net::httpforbidden","net::httpfound","net::httpgatewaytimeout","net::httpgenericrequest","net::httpgone","net::httpheader","net::httpheadersyntaxerror","net::httpimused","net::httpinformation","net::httpinsufficientstorage","net::httpinternalservererror","net::httplengthrequired","net::httplocked","net::httploopdetected","net::httpmethodnotallowed","net::httpmisdirectedrequest","net::httpmovedpermanently","net::httpmultistatus","net::httpmultiplechoices","net::httpnetworkauthenticationrequired","net::httpnocontent","net::httpnonauthoritativeinformation","net::httpnotacceptable","net::httpnotextended","net::httpnotfound","net::httpnotimplemented","net::httpnotmodified","net::httpok","net::httppartialcontent","net::httppayloadtoolarge","net::httppaymentrequired","net::httppermanentredirect","net::httppreconditionfailed","net::httppreconditionrequired","net::httpprocessing","net::httpproxyauthenticationrequired","net::httprangenotsatisfiable","net::httpredirection","net::httprequest","net::httprequestheaderfieldstoolarge","net::httprequesttimeout","net::httpresetcontent","net::httpresponse","net::httpretriableerror","net::httpseeother","net::httpservererror","net::httpserverexception","net::httpserviceunavailable","net::httpsuccess","net::httpswitchprotocol","net::httptemporaryredirect","net::httptoomanyrequests","net::httpuritoolong","net::httpunauthorized","net::httpunavailableforlegalreasons","net::httpunknownresponse","net::httpunprocessableentity","net::httpunsupportedmediatype","net::httpupgraderequired","net::httpuseproxy","net::httpvariantalsonegotiates","net::httpversionnotsupported","net::http","net::http::proxy()","net::httpheader#[]()","net::httpheader#[]=()","net::http#active?()","net::httpheader#add_field()","net::httpresponse#body()","net::httpgenericrequest#body=()","net::httpresponse#body=()","net::httpgenericrequest#body_exist?()","net::httpresponse::body_permitted?()","net::httpgenericrequest#body_stream=()","net::http#continue_timeout=()","net::http#copy()","net::http::default_port()","net::http#delete()","net::httpresponse#entity()","net::http#finish()","net::http#get()","net::http::get()","net::http#get2()","net::http::get_print()","net::http::get_response()","net::http#head()","net::http#head2()","net::http::http_default_port()","net::http::https_default_port()","net::httpheader#initialize_http_header()","net::http#inspect()","net::httpgenericrequest#inspect()","net::httpresponse#inspect()","net::http#ipaddr()","net::http#ipaddr=()","net::http::is_version_1_2?()","net::http#lock()","net::http#max_retries=()","net::http#mkcol()","net::http#move()","net::http::new()","net::http::new()","net::httpgenericrequest::new()","net::httprequest::new()","net::http::newobj()","net::http#options()","net::http#patch()","net::http#peer_cert()","net::http#post()","net::http::post()","net::http#post2()","net::http::post_form()","net::http#propfind()","net::http#proppatch()","net::http#proxy?()","net::http#proxy_address()","net::http::proxy_class?()","net::http#proxy_from_env?()","net::http#proxy_pass()","net::http#proxy_port()","net::http#proxy_user()","net::http#proxyaddr()","net::http#proxyport()","net::httpresponse#read_body()","net::http#read_timeout=()","net::http#request()","net::httpgenericrequest#request_body_permitted?()","net::http#request_get()","net::http#request_head()","net::http#request_post()","net::httpgenericrequest#response_body_permitted?()","net::http#send_request()","net::http#set_debug_output()","net::http::start()","net::http#start()","net::http#started?()","net::http#trace()","net::http#unlock()","net::http#use_ssl=()","net::http#use_ssl?()","net::httpresponse#value()","net::http::version_1_2()","net::http::version_1_2?()","net::http#write_timeout=()"],"info":[["EXCEPTION_TYPE","","EXCEPTION_TYPE.html","",""],["EXCEPTION_TYPE","","EXCEPTION_TYPE.html","",""],["EXCEPTION_TYPE","","EXCEPTION_TYPE.html","",""],["EXCEPTION_TYPE","","EXCEPTION_TYPE.html","",""],["HTTPClientException","","HTTPClientException.html","",""],["HTTPGatewayTimeOut","","HTTPGatewayTimeOut.html","",""],["HTTPMovedTemporarily","","HTTPMovedTemporarily.html","",""],["HTTPMultipleChoice","","HTTPMultipleChoice.html","",""],["HTTPRequestEntityTooLarge","","HTTPRequestEntityTooLarge.html","",""],["HTTPRequestTimeOut","","HTTPRequestTimeOut.html","",""],["HTTPRequestURITooLarge","","HTTPRequestURITooLarge.html","",""],["HTTPRequestURITooLong","","HTTPRequestURITooLong.html","",""],["HTTPRequestURITooLong","","HTTPRequestURITooLong.html","",""],["HTTPRequestedRangeNotSatisfiable","","HTTPRequestedRangeNotSatisfiable.html","",""],["Net","","Net.html","",""],["Net::HTTP","","Net/HTTP.html","","<p>An HTTP client API for Ruby.\n<p>Net::HTTP provides a rich library which can be used to build HTTP\nuser-agents. …\n"],["Net::HTTP::Copy","","Net/HTTP/Copy.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Delete","","Net/HTTP/Delete.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Get","","Net/HTTP/Get.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Head","","Net/HTTP/Head.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Lock","","Net/HTTP/Lock.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Mkcol","","Net/HTTP/Mkcol.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Move","","Net/HTTP/Move.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Options","","Net/HTTP/Options.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Patch","","Net/HTTP/Patch.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Post","","Net/HTTP/Post.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Propfind","","Net/HTTP/Propfind.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Proppatch","","Net/HTTP/Proppatch.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Put","","Net/HTTP/Put.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Trace","","Net/HTTP/Trace.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Unlock","","Net/HTTP/Unlock.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTPAccepted","","Net/HTTPAccepted.html","",""],["Net::HTTPAlreadyReported","","Net/HTTPAlreadyReported.html","",""],["Net::HTTPBadGateway","","Net/HTTPBadGateway.html","",""],["Net::HTTPBadRequest","","Net/HTTPBadRequest.html","",""],["Net::HTTPBadResponse","","Net/HTTPBadResponse.html","",""],["Net::HTTPClientError","","Net/HTTPClientError.html","",""],["Net::HTTPConflict","","Net/HTTPConflict.html","",""],["Net::HTTPContinue","","Net/HTTPContinue.html","",""],["Net::HTTPCreated","","Net/HTTPCreated.html","",""],["Net::HTTPEarlyHints","","Net/HTTPEarlyHints.html","",""],["Net::HTTPError","","Net/HTTPError.html","",""],["Net::HTTPExceptions","","Net/HTTPExceptions.html","","<p>frozen_string_literal: false Net::HTTP exception class. You cannot use\nNet::HTTPExceptions directly; …\n"],["Net::HTTPExpectationFailed","","Net/HTTPExpectationFailed.html","",""],["Net::HTTPFailedDependency","","Net/HTTPFailedDependency.html","",""],["Net::HTTPFatalError","","Net/HTTPFatalError.html","",""],["Net::HTTPForbidden","","Net/HTTPForbidden.html","",""],["Net::HTTPFound","","Net/HTTPFound.html","",""],["Net::HTTPGatewayTimeout","","Net/HTTPGatewayTimeout.html","",""],["Net::HTTPGenericRequest","","Net/HTTPGenericRequest.html","","<p>frozen_string_literal: false HTTPGenericRequest is the parent of the\nNet::HTTPRequest class. Do not use …\n"],["Net::HTTPGone","","Net/HTTPGone.html","",""],["Net::HTTPHeader","","Net/HTTPHeader.html","","<p>frozen_string_literal: false The HTTPHeader module defines methods for\nreading and writing HTTP headers. …\n"],["Net::HTTPHeaderSyntaxError","","Net/HTTPHeaderSyntaxError.html","",""],["Net::HTTPIMUsed","","Net/HTTPIMUsed.html","",""],["Net::HTTPInformation","","Net/HTTPInformation.html","",""],["Net::HTTPInsufficientStorage","","Net/HTTPInsufficientStorage.html","",""],["Net::HTTPInternalServerError","","Net/HTTPInternalServerError.html","","<p>444 No Response - Nginx 449 Retry With - Microsoft 450 Blocked by Windows\nParental Controls - Microsoft …\n"],["Net::HTTPLengthRequired","","Net/HTTPLengthRequired.html","",""],["Net::HTTPLocked","","Net/HTTPLocked.html","",""],["Net::HTTPLoopDetected","","Net/HTTPLoopDetected.html","",""],["Net::HTTPMethodNotAllowed","","Net/HTTPMethodNotAllowed.html","",""],["Net::HTTPMisdirectedRequest","","Net/HTTPMisdirectedRequest.html","","<p>418 I’m a teapot - RFC 2324; a joke RFC 420 Enhance Your Calm - Twitter\n"],["Net::HTTPMovedPermanently","","Net/HTTPMovedPermanently.html","",""],["Net::HTTPMultiStatus","","Net/HTTPMultiStatus.html","",""],["Net::HTTPMultipleChoices","","Net/HTTPMultipleChoices.html","",""],["Net::HTTPNetworkAuthenticationRequired","","Net/HTTPNetworkAuthenticationRequired.html","",""],["Net::HTTPNoContent","","Net/HTTPNoContent.html","",""],["Net::HTTPNonAuthoritativeInformation","","Net/HTTPNonAuthoritativeInformation.html","",""],["Net::HTTPNotAcceptable","","Net/HTTPNotAcceptable.html","",""],["Net::HTTPNotExtended","","Net/HTTPNotExtended.html","","<p>509 Bandwidth Limit Exceeded - Apache bw/limited extension\n"],["Net::HTTPNotFound","","Net/HTTPNotFound.html","",""],["Net::HTTPNotImplemented","","Net/HTTPNotImplemented.html","",""],["Net::HTTPNotModified","","Net/HTTPNotModified.html","",""],["Net::HTTPOK","","Net/HTTPOK.html","",""],["Net::HTTPPartialContent","","Net/HTTPPartialContent.html","",""],["Net::HTTPPayloadTooLarge","","Net/HTTPPayloadTooLarge.html","",""],["Net::HTTPPaymentRequired","","Net/HTTPPaymentRequired.html","",""],["Net::HTTPPermanentRedirect","","Net/HTTPPermanentRedirect.html","",""],["Net::HTTPPreconditionFailed","","Net/HTTPPreconditionFailed.html","",""],["Net::HTTPPreconditionRequired","","Net/HTTPPreconditionRequired.html","",""],["Net::HTTPProcessing","","Net/HTTPProcessing.html","",""],["Net::HTTPProxyAuthenticationRequired","","Net/HTTPProxyAuthenticationRequired.html","",""],["Net::HTTPRangeNotSatisfiable","","Net/HTTPRangeNotSatisfiable.html","",""],["Net::HTTPRedirection","","Net/HTTPRedirection.html","",""],["Net::HTTPRequest","","Net/HTTPRequest.html","","<p>frozen_string_literal: false HTTP request class. This class wraps together\nthe request header and the …\n"],["Net::HTTPRequestHeaderFieldsTooLarge","","Net/HTTPRequestHeaderFieldsTooLarge.html","",""],["Net::HTTPRequestTimeout","","Net/HTTPRequestTimeout.html","",""],["Net::HTTPResetContent","","Net/HTTPResetContent.html","",""],["Net::HTTPResponse","","Net/HTTPResponse.html","","<p>frozen_string_literal: false HTTP response class.\n<p>This class wraps together the response header and the …\n"],["Net::HTTPRetriableError","","Net/HTTPRetriableError.html","",""],["Net::HTTPSeeOther","","Net/HTTPSeeOther.html","",""],["Net::HTTPServerError","","Net/HTTPServerError.html","",""],["Net::HTTPServerException","","Net/HTTPServerException.html","",""],["Net::HTTPServiceUnavailable","","Net/HTTPServiceUnavailable.html","",""],["Net::HTTPSuccess","","Net/HTTPSuccess.html","",""],["Net::HTTPSwitchProtocol","","Net/HTTPSwitchProtocol.html","",""],["Net::HTTPTemporaryRedirect","","Net/HTTPTemporaryRedirect.html","","<p>306 Switch Proxy - no longer unused\n"],["Net::HTTPTooManyRequests","","Net/HTTPTooManyRequests.html","",""],["Net::HTTPURITooLong","","Net/HTTPURITooLong.html","",""],["Net::HTTPUnauthorized","","Net/HTTPUnauthorized.html","",""],["Net::HTTPUnavailableForLegalReasons","","Net/HTTPUnavailableForLegalReasons.html","",""],["Net::HTTPUnknownResponse","","Net/HTTPUnknownResponse.html","","<p>frozen_string_literal: true\n<p>www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n"],["Net::HTTPUnprocessableEntity","","Net/HTTPUnprocessableEntity.html","",""],["Net::HTTPUnsupportedMediaType","","Net/HTTPUnsupportedMediaType.html","",""],["Net::HTTPUpgradeRequired","","Net/HTTPUpgradeRequired.html","","<p>425 Unordered Collection - existed only in draft\n"],["Net::HTTPUseProxy","","Net/HTTPUseProxy.html","",""],["Net::HTTPVariantAlsoNegotiates","","Net/HTTPVariantAlsoNegotiates.html","",""],["Net::HTTPVersionNotSupported","","Net/HTTPVersionNotSupported.html","",""],["Net::Http","","Net/Http.html","",""],["Proxy","Net::HTTP","Net/HTTP.html#method-c-Proxy","(p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil)","<p>Creates an HTTP proxy class which behaves like Net::HTTP, but performs all\naccess via the specified proxy. …\n"],["[]","Net::HTTPHeader","Net/HTTPHeader.html#method-i-5B-5D","(key)","<p>Returns the header field corresponding to the case-insensitive key. For\nexample, a key of “Content-Type” …\n"],["[]=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-5B-5D-3D","(key, val)","<p>Sets the header field corresponding to the case-insensitive key.\n"],["active?","Net::HTTP","Net/HTTP.html#method-i-active-3F","()",""],["add_field","Net::HTTPHeader","Net/HTTPHeader.html#method-i-add_field","(key, val)","<p>Ruby 1.8.3 &mdash; Adds a value to a named header field, instead of replacing its value.\nSecond argument <code>val</code> …\n"],["body","Net::HTTPResponse","Net/HTTPResponse.html#method-i-body","()","<p>Returns the full entity body.\n<p>Calling this method a second or subsequent time will return the string\nalready …\n"],["body=","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body-3D","(str)",""],["body=","Net::HTTPResponse","Net/HTTPResponse.html#method-i-body-3D","(value)","<p>Because it may be necessary to modify the body, Eg, decompression this\nmethod facilitates that.\n"],["body_exist?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body_exist-3F","()",""],["body_permitted?","Net::HTTPResponse","Net/HTTPResponse.html#method-c-body_permitted-3F","()","<p>true if the response has a body.\n"],["body_stream=","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body_stream-3D","(input)",""],["continue_timeout=","Net::HTTP","Net/HTTP.html#method-i-continue_timeout-3D","(sec)","<p>Setter for the continue_timeout attribute.\n"],["copy","Net::HTTP","Net/HTTP.html#method-i-copy","(path, initheader = nil)","<p>Sends a COPY request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["default_port","Net::HTTP","Net/HTTP.html#method-c-default_port","()","<p>The default port to use for HTTP requests; defaults to 80.\n"],["delete","Net::HTTP","Net/HTTP.html#method-i-delete","(path, initheader = {'Depth' => 'Infinity'})","<p>Sends a DELETE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["entity","Net::HTTPResponse","Net/HTTPResponse.html#method-i-entity","()",""],["finish","Net::HTTP","Net/HTTP.html#method-i-finish","()","<p>Finishes the HTTP session and closes the TCP connection. Raises IOError if\nthe session has not been started. …\n"],["get","Net::HTTP","Net/HTTP.html#method-i-get","(path, initheader = nil, dest = nil)","<p>Retrieves data from <code>path</code> on the connected-to host which may be\nan absolute path String or a URI to extract …\n"],["get","Net::HTTP","Net/HTTP.html#method-c-get","(uri_or_host, path_or_headers = nil, port = nil)","<p>Sends a GET request to the target and returns the HTTP response as a\nstring.  The target can either be …\n"],["get2","Net::HTTP","Net/HTTP.html#method-i-get2","(path, initheader = nil)",""],["get_print","Net::HTTP","Net/HTTP.html#method-c-get_print","(uri_or_host, path_or_headers = nil, port = nil)","<p>Gets the body text from the target and outputs it to $stdout.  The target\ncan either be specified as …\n"],["get_response","Net::HTTP","Net/HTTP.html#method-c-get_response","(uri_or_host, path_or_headers = nil, port = nil, &block)","<p>Sends a GET request to the target and returns the HTTP response as a\nNet::HTTPResponse object.  The target …\n"],["head","Net::HTTP","Net/HTTP.html#method-i-head","(path, initheader = nil)","<p>Gets only the header from <code>path</code> on the connected-to host.\n<code>header</code> is a Hash like { ‘Accept’ =&gt; ‘<strong>/</strong>’, …\n"],["head2","Net::HTTP","Net/HTTP.html#method-i-head2","(path, initheader = nil, &block)",""],["http_default_port","Net::HTTP","Net/HTTP.html#method-c-http_default_port","()","<p>The default port to use for HTTP requests; defaults to 80.\n"],["https_default_port","Net::HTTP","Net/HTTP.html#method-c-https_default_port","()","<p>The default port to use for HTTPS requests; defaults to 443.\n"],["initialize_http_header","Net::HTTPHeader","Net/HTTPHeader.html#method-i-initialize_http_header","(initheader)",""],["inspect","Net::HTTP","Net/HTTP.html#method-i-inspect","()",""],["inspect","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-inspect","()",""],["inspect","Net::HTTPResponse","Net/HTTPResponse.html#method-i-inspect","()",""],["ipaddr","Net::HTTP","Net/HTTP.html#method-i-ipaddr","()","<p>The IP address to connect to/used to connect to\n"],["ipaddr=","Net::HTTP","Net/HTTP.html#method-i-ipaddr-3D","(addr)","<p>Set the IP address to connect to\n"],["is_version_1_2?","Net::HTTP","Net/HTTP.html#method-c-is_version_1_2-3F","()",""],["lock","Net::HTTP","Net/HTTP.html#method-i-lock","(path, body, initheader = nil)","<p>Sends a LOCK request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["max_retries=","Net::HTTP","Net/HTTP.html#method-i-max_retries-3D","(retries)","<p>Maximum number of times to retry an idempotent request in case of\nNet::ReadTimeout, IOError, EOFError …\n"],["mkcol","Net::HTTP","Net/HTTP.html#method-i-mkcol","(path, body = nil, initheader = nil)","<p>Sends a MKCOL request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["move","Net::HTTP","Net/HTTP.html#method-i-move","(path, initheader = nil)","<p>Sends a MOVE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["new","Net::HTTP","Net/HTTP.html#method-c-new","(address, port = nil)","<p>Creates a new Net::HTTP object for the specified server address, without\nopening the TCP connection or …\n"],["new","Net::HTTP","Net/HTTP.html#method-c-new","(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil, p_no_proxy = nil)","<p>Creates a new Net::HTTP object without opening a TCP connection or HTTP\nsession.\n<p>The <code>address</code> should be …\n"],["new","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-c-new","(m, reqbody, resbody, uri_or_path, initheader = nil)",""],["new","Net::HTTPRequest","Net/HTTPRequest.html#method-c-new","(path, initheader = nil)","<p>Creates an HTTP request object for <code>path</code>.\n<p><code>initheader</code> are the default headers to use.  Net::HTTP adds\nAccept-Encoding ...\n"],["newobj","Net::HTTP","Net/HTTP.html#method-c-newobj","(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil, p_no_proxy = nil)",""],["options","Net::HTTP","Net/HTTP.html#method-i-options","(path, initheader = nil)","<p>Sends a OPTIONS request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["patch","Net::HTTP","Net/HTTP.html#method-i-patch","(path, data, initheader = nil, dest = nil)","<p>Sends a PATCH request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["peer_cert","Net::HTTP","Net/HTTP.html#method-i-peer_cert","()","<p>Returns the X.509 certificates the server presented.\n"],["post","Net::HTTP","Net/HTTP.html#method-i-post","(path, data, initheader = nil, dest = nil)","<p>Posts <code>data</code> (must be a String) to <code>path</code>.\n<code>header</code> must be a Hash like { ‘Accept’ =&gt;\n‘<strong>/</strong>’, … }.\n<p>This method …\n"],["post","Net::HTTP","Net/HTTP.html#method-c-post","(url, data, header = nil)","<p>Posts data to the specified URI object.\n<p>Example:\n\n<pre>require 'net/http'\nrequire 'uri'\n\nNet::HTTP.post URI('http://www.example.com/api/search'), ...</pre>\n"],["post2","Net::HTTP","Net/HTTP.html#method-i-post2","(path, data, initheader = nil)",""],["post_form","Net::HTTP","Net/HTTP.html#method-c-post_form","(url, params)","<p>Posts HTML form data to the specified URI object. The form data must be\nprovided as a Hash mapping from …\n"],["propfind","Net::HTTP","Net/HTTP.html#method-i-propfind","(path, body = nil, initheader = {'Depth' => '0'})","<p>Sends a PROPFIND request to the <code>path</code> and gets a response, as\nan HTTPResponse object.\n"],["proppatch","Net::HTTP","Net/HTTP.html#method-i-proppatch","(path, body, initheader = nil)","<p>Sends a PROPPATCH request to the <code>path</code> and gets a response, as\nan HTTPResponse object.\n"],["proxy?","Net::HTTP","Net/HTTP.html#method-i-proxy-3F","()","<p>True if requests for this connection will be proxied\n"],["proxy_address","Net::HTTP","Net/HTTP.html#method-i-proxy_address","()","<p>The address of the proxy server, if one is configured.\n"],["proxy_class?","Net::HTTP","Net/HTTP.html#method-c-proxy_class-3F","()","<p>returns true if self is a class which was created by HTTP::Proxy.\n"],["proxy_from_env?","Net::HTTP","Net/HTTP.html#method-i-proxy_from_env-3F","()","<p>True if the proxy for this connection is determined from the environment\n"],["proxy_pass","Net::HTTP","Net/HTTP.html#method-i-proxy_pass","()","<p>The password of the proxy server, if one is configured.\n"],["proxy_port","Net::HTTP","Net/HTTP.html#method-i-proxy_port","()","<p>The port of the proxy server, if one is configured.\n"],["proxy_user","Net::HTTP","Net/HTTP.html#method-i-proxy_user","()","<p>The username of the proxy server, if one is configured.\n"],["proxyaddr","Net::HTTP","Net/HTTP.html#method-i-proxyaddr","()",""],["proxyport","Net::HTTP","Net/HTTP.html#method-i-proxyport","()",""],["read_body","Net::HTTPResponse","Net/HTTPResponse.html#method-i-read_body","(dest = nil, &block)","<p>Gets the entity body returned by the remote HTTP server.\n<p>If a block is given, the body is passed to the …\n"],["read_timeout=","Net::HTTP","Net/HTTP.html#method-i-read_timeout-3D","(sec)","<p>Setter for the read_timeout attribute.\n"],["request","Net::HTTP","Net/HTTP.html#method-i-request","(req, body = nil)","<p>Sends an HTTPRequest object <code>req</code> to the HTTP server.\n<p>If <code>req</code> is a Net::HTTP::Post or Net::HTTP::Put request …\n"],["request_body_permitted?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-request_body_permitted-3F","()",""],["request_get","Net::HTTP","Net/HTTP.html#method-i-request_get","(path, initheader = nil)","<p>Sends a GET request to the <code>path</code>. Returns the response as a\nNet::HTTPResponse object.\n<p>When called with …\n"],["request_head","Net::HTTP","Net/HTTP.html#method-i-request_head","(path, initheader = nil, &block)","<p>Sends a HEAD request to the <code>path</code> and returns the response as a\nNet::HTTPResponse object.\n<p>Returns the response. …\n"],["request_post","Net::HTTP","Net/HTTP.html#method-i-request_post","(path, data, initheader = nil)","<p>Sends a POST request to the <code>path</code>.\n<p>Returns the response as a Net::HTTPResponse object.\n<p>When called with …\n"],["response_body_permitted?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-response_body_permitted-3F","()",""],["send_request","Net::HTTP","Net/HTTP.html#method-i-send_request","(name, path, data = nil, header = nil)","<p>Sends an HTTP request to the HTTP server. Also sends a DATA string if\n<code>data</code> is given.\n<p>Returns a Net::HTTPResponse …\n"],["set_debug_output","Net::HTTP","Net/HTTP.html#method-i-set_debug_output","(output)","<p><strong>WARNING</strong> This method opens a serious security hole. Never\nuse this method in production code.\n<p>Sets an output …\n"],["start","Net::HTTP","Net/HTTP.html#method-c-start","(address, *arg)","<p>Creates a new Net::HTTP object, then additionally opens the TCP connection\nand HTTP session.\n<p>Arguments …\n"],["start","Net::HTTP","Net/HTTP.html#method-i-start","()","<p>Opens a TCP connection and HTTP session.\n<p>When this method is called with a block, it passes the Net::HTTP …\n"],["started?","Net::HTTP","Net/HTTP.html#method-i-started-3F","()","<p>Returns true if the HTTP session has been started.\n"],["trace","Net::HTTP","Net/HTTP.html#method-i-trace","(path, initheader = nil)","<p>Sends a TRACE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["unlock","Net::HTTP","Net/HTTP.html#method-i-unlock","(path, body, initheader = nil)","<p>Sends a UNLOCK request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["use_ssl=","Net::HTTP","Net/HTTP.html#method-i-use_ssl-3D","(flag)","<p>Turn on/off SSL. This flag must be set before starting session. If you\nchange use_ssl value after session …\n"],["use_ssl?","Net::HTTP","Net/HTTP.html#method-i-use_ssl-3F","()","<p>Returns true if SSL/TLS is being used with HTTP.\n"],["value","Net::HTTPResponse","Net/HTTPResponse.html#method-i-value","()","<p>Raises an HTTP error if the response is not 2xx (success).\n"],["version_1_2","Net::HTTP","Net/HTTP.html#method-c-version_1_2","()","<p>Turns on net/http 1.2 (Ruby 1.8) features. Defaults to ON in Ruby 1.8 or\nlater.\n"],["version_1_2?","Net::HTTP","Net/HTTP.html#method-c-version_1_2-3F","()","<p>Returns true if net/http is in version 1.2 mode. Defaults to true.\n"],["write_timeout=","Net::HTTP","Net/HTTP.html#method-i-write_timeout-3D","(sec)","<p>Setter for the write_timeout attribute.\n"]]}}