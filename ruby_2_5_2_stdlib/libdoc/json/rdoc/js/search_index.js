var search_data = {"index":{"searchIndex":["bigdecimal","class","complex","date","datetime","exception","json","circulardatastructure","ext","generator","state","parser","generatorerror","genericobject","jsonerror","missingunicodesupport","nestingerror","parsererror","unparsererror","kernel","openstruct","range","rational","regexp","set","struct","symbol","time","[]()","[]()","[]()","[]=()","[]=()","allow_nan?()","array_nl()","array_nl=()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","ascii_only?()","buffer_initial_length()","buffer_initial_length=()","check_circular?()","configure()","depth()","depth=()","dump()","dump()","fast_generate()","from_hash()","from_state()","generate()","generate()","iconv()","indent()","indent=()","initialize_copy()","json_creatable?()","json_creatable?()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","load()","load()","max_nesting()","max_nesting=()","merge()","new()","new()","object_nl()","object_nl=()","parse()","parse()","parse!()","pretty_generate()","recurse_proc()","restore()","source()","space()","space=()","space_before()","space_before=()","to_h()","to_hash()","to_hash()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","wrap()","|()"],"longSearchIndex":["bigdecimal","class","complex","date","datetime","exception","json","json::circulardatastructure","json::ext","json::ext::generator","json::ext::generator::state","json::ext::parser","json::generatorerror","json::genericobject","json::jsonerror","json::missingunicodesupport","json::nestingerror","json::parsererror","json::unparsererror","kernel","openstruct","range","rational","regexp","set","struct","symbol","time","json::[]()","json::ext::generator::state#[]()","json::genericobject#[]()","json::ext::generator::state#[]=()","json::genericobject#[]=()","json::ext::generator::state#allow_nan?()","json::ext::generator::state#array_nl()","json::ext::generator::state#array_nl=()","bigdecimal#as_json()","complex#as_json()","date#as_json()","datetime#as_json()","exception#as_json()","json::genericobject#as_json()","openstruct#as_json()","range#as_json()","rational#as_json()","regexp#as_json()","set#as_json()","struct#as_json()","symbol#as_json()","time#as_json()","json::ext::generator::state#ascii_only?()","json::ext::generator::state#buffer_initial_length()","json::ext::generator::state#buffer_initial_length=()","json::ext::generator::state#check_circular?()","json::ext::generator::state#configure()","json::ext::generator::state#depth()","json::ext::generator::state#depth=()","json#dump()","json::genericobject::dump()","json#fast_generate()","json::genericobject::from_hash()","json::ext::generator::state::from_state()","json#generate()","json::ext::generator::state#generate()","json::iconv()","json::ext::generator::state#indent()","json::ext::generator::state#indent=()","json::ext::generator::state#initialize_copy()","class#json_creatable?()","json::genericobject::json_creatable?()","bigdecimal::json_create()","complex::json_create()","date::json_create()","datetime::json_create()","exception::json_create()","json::genericobject::json_create()","openstruct::json_create()","range::json_create()","rational::json_create()","regexp::json_create()","set::json_create()","struct::json_create()","symbol::json_create()","time::json_create()","json#load()","json::genericobject::load()","json::ext::generator::state#max_nesting()","json::ext::generator::state#max_nesting=()","json::ext::generator::state#merge()","json::ext::generator::state::new()","json::ext::parser::new()","json::ext::generator::state#object_nl()","json::ext::generator::state#object_nl=()","json#parse()","json::ext::parser#parse()","json#parse!()","json#pretty_generate()","json#recurse_proc()","json::restore()","json::ext::parser#source()","json::ext::generator::state#space()","json::ext::generator::state#space=()","json::ext::generator::state#space_before()","json::ext::generator::state#space_before=()","json::ext::generator::state#to_h()","json::ext::generator::state#to_hash()","json::genericobject#to_hash()","bigdecimal#to_json()","complex#to_json()","date#to_json()","datetime#to_json()","exception#to_json()","json::genericobject#to_json()","openstruct#to_json()","range#to_json()","rational#to_json()","regexp#to_json()","set#to_json()","struct#to_json()","symbol#to_json()","time#to_json()","json::jsonerror::wrap()","json::genericobject#|()"],"info":[["BigDecimal","","BigDecimal.html","",""],["Class","","Class.html","","<p>Extends any Class to include <em>json_creatable?</em> method.\n"],["Complex","","Complex.html","",""],["Date","","Date.html","",""],["DateTime","","DateTime.html","",""],["Exception","","Exception.html","",""],["JSON","","JSON.html","","<p>JavaScript Object Notation (JSON)\n<p>JSON is a lightweight data-interchange format. It is easy for us humans …\n"],["JSON::CircularDatastructure","","JSON/CircularDatastructure.html","",""],["JSON::Ext","","JSON/Ext.html","","<p>This module holds all the modules/classes that implement JSON’s\nfunctionality as C extensions.\n"],["JSON::Ext::Generator","","JSON/Ext/Generator.html","","<p>This is the JSON generator implemented as a C extension. It can be\nconfigured to be used by setting\n\n<pre>JSON.generator ...</pre>\n"],["JSON::Ext::Generator::State","","JSON/Ext/Generator/State.html","",""],["JSON::Ext::Parser","","JSON/Ext/Parser.html","","<p>This is the JSON parser implemented as a C extension. It can be configured\nto be used by setting\n\n<pre>JSON.parser ...</pre>\n"],["JSON::GeneratorError","","JSON/GeneratorError.html","","<p>This exception is raised if a generator or unparser error occurs.\n"],["JSON::GenericObject","","JSON/GenericObject.html","",""],["JSON::JSONError","","JSON/JSONError.html","","<p>The base exception for JSON errors.\n"],["JSON::MissingUnicodeSupport","","JSON/MissingUnicodeSupport.html","","<p>This exception is raised if the required unicode support is missing on the\nsystem. Usually this means …\n"],["JSON::NestingError","","JSON/NestingError.html","","<p>This exception is raised if the nesting of parsed data structures is too\ndeep.\n"],["JSON::ParserError","","JSON/ParserError.html","","<p>This exception is raised if a parser error occurs.\n"],["JSON::UnparserError","","JSON/GeneratorError.html","","<p>This exception is raised if a generator or unparser error occurs.\n"],["Kernel","","Kernel.html","",""],["OpenStruct","","OpenStruct.html","",""],["Range","","Range.html","",""],["Rational","","Rational.html","",""],["Regexp","","Regexp.html","",""],["Set","","Set.html","",""],["Struct","","Struct.html","",""],["Symbol","","Symbol.html","",""],["Time","","Time.html","",""],["[]","JSON","JSON.html#method-c-5B-5D","(object, opts = {})","<p>If <em>object</em> is string-like, parse the string and return the parsed\nresult as a Ruby data structure. Otherwise …\n"],["[]","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-5B-5D","(p1)","<p>Returns the value returned by method <code>name</code>.\n"],["[]","JSON::GenericObject","JSON/GenericObject.html#method-i-5B-5D","(name)",""],["[]=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-5B-5D-3D","(p1, p2)","<p>Sets the attribute name to value.\n"],["[]=","JSON::GenericObject","JSON/GenericObject.html#method-i-5B-5D-3D","(name, value)",""],["allow_nan?","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-allow_nan-3F","()","<p>Returns true, if NaN, Infinity, and -Infinity should be generated,\notherwise returns false.\n"],["array_nl","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-array_nl","()","<p>This string is put at the end of a line that holds a JSON array.\n"],["array_nl=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-array_nl-3D","(p1)","<p>This string is put at the end of a line that holds a JSON array.\n"],["as_json","BigDecimal","BigDecimal.html#method-i-as_json","(*)","<p>Marshal the object to JSON.\n<p>method used for JSON marshalling support.\n"],["as_json","Complex","Complex.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Date","Date.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","DateTime","DateTime.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Exception","Exception.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","JSON::GenericObject","JSON/GenericObject.html#method-i-as_json","(*)",""],["as_json","OpenStruct","OpenStruct.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Range","Range.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Rational","Rational.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Regexp","Regexp.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Set","Set.html#method-i-as_json","(*)","<p>Marshal the object to JSON.\n<p>method used for JSON marshalling support.\n"],["as_json","Struct","Struct.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Symbol","Symbol.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Time","Time.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["ascii_only?","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-ascii_only-3F","()","<p>Returns true, if only ASCII characters should be generated. Otherwise\nreturns false.\n"],["buffer_initial_length","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-buffer_initial_length","()","<p>This integer returns the current initial length of the buffer.\n"],["buffer_initial_length=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-buffer_initial_length-3D","(p1)","<p>This sets the initial length of the buffer to <code>length</code>, if\n<code>length</code> &gt; 0, otherwise its value isn’t changed. …\n"],["check_circular?","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-check_circular-3F","()","<p>Returns true, if circular data structures should be checked, otherwise\nreturns false.\n"],["configure","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-configure","(p1)","<p>Configure this State instance with the Hash <em>opts</em>, and return\nitself.\n"],["depth","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-depth","()","<p>This integer returns the current depth of data structure nesting.\n"],["depth=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-depth-3D","(p1)","<p>This sets the maximum level of data structure nesting in the generated JSON\nto the integer depth, max_nesting …\n"],["dump","JSON","JSON.html#method-i-dump","(obj, anIO = nil, limit = nil)","<p>Dumps <em>obj</em> as a JSON string, i.e. calls generate on the object and\nreturns the result.\n<p>If anIO (an IO-like …\n"],["dump","JSON::GenericObject","JSON/GenericObject.html#method-c-dump","(obj, *args)",""],["fast_generate","JSON","JSON.html#method-i-fast_generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. This method disables the checks …\n"],["from_hash","JSON::GenericObject","JSON/GenericObject.html#method-c-from_hash","(object)",""],["from_state","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-c-from_state","(p1)","<p>Creates a State object from <em>opts</em>, which ought to be Hash to create\na new State instance configured by …\n"],["generate","JSON","JSON.html#method-i-generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. <em>opts</em> is\n<p>a Hash like object (responding …\n"],["generate","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-generate","(p1)","<p>Generates a valid JSON document from object <code>obj</code> and returns\nthe result. If no valid JSON document can …\n"],["iconv","JSON","JSON.html#method-c-iconv","(to, from, string)","<p>Encodes string using Ruby’s <em>String.encode</em>\n"],["indent","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-indent","()","<p>Returns the string that is used to indent levels in the JSON text.\n"],["indent=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-indent-3D","(p1)","<p>Sets the string that is used to indent levels in the JSON text.\n"],["initialize_copy","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-initialize_copy","(p1)","<p>Initializes this object from orig if it can be duplicated/cloned and\nreturns it.\n"],["json_creatable?","Class","Class.html#method-i-json_creatable-3F","()","<p>Returns true if this class can be used to create an instance from a\nserialised JSON string. The class …\n"],["json_creatable?","JSON::GenericObject","JSON/GenericObject.html#method-c-json_creatable-3F","()",""],["json_create","BigDecimal","BigDecimal.html#method-c-json_create","(object)","<p>Import a JSON Marshalled object.\n<p>method used for JSON marshalling support.\n"],["json_create","Complex","Complex.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting Real value <code>r</code>, imaginary\nvalue <code>i</code>, to a Complex object.\n"],["json_create","Date","Date.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code> and Day of Calendar Reform\n<code>sg</code> to …\n"],["json_create","DateTime","DateTime.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting year <code>y</code>, month\n<code>m</code>, day <code>d</code>, hour <code>H</code>, minute\n<code>M</code>, second <code>S</code>, offset <code>of</code> …\n"],["json_create","Exception","Exception.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Exception object with message\n<code>m</code> and backtrace <code>b</code> serialized …\n"],["json_create","JSON::GenericObject","JSON/GenericObject.html#method-c-json_create","(data)",""],["json_create","OpenStruct","OpenStruct.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Struct object with values\n<code>t</code> serialized by <code>to_json</code>.\n"],["json_create","Range","Range.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Range object with arguments\n<code>a</code> serialized by <code>to_json</code>.\n"],["json_create","Rational","Rational.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting numerator value <code>n</code>,\ndenominator value <code>d</code>, to a Rational object. …\n"],["json_create","Regexp","Regexp.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Regexp object with source\n<code>s</code> (Regexp or String) and options …\n"],["json_create","Set","Set.html#method-c-json_create","(object)","<p>Import a JSON Marshalled object.\n<p>method used for JSON marshalling support.\n"],["json_create","Struct","Struct.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Struct object with values\n<code>v</code> serialized by <code>to_json</code>.\n"],["json_create","Symbol","Symbol.html#method-c-json_create","(o)","<p>Deserializes JSON string by converting the <code>string</code> value stored\nin the object to a Symbol\n"],["json_create","Time","Time.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting time since epoch to Time\n"],["load","JSON","JSON.html#method-i-load","(source, proc = nil, options = {})","<p>Load a ruby data structure from a JSON <em>source</em> and return it. A\nsource can either be a string-like object, …\n"],["load","JSON::GenericObject","JSON/GenericObject.html#method-c-load","(source, proc = nil, opts = {})",""],["max_nesting","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-max_nesting","()","<p>This integer returns the maximum level of data structure nesting in the\ngenerated JSON, max_nesting = …\n"],["max_nesting=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-max_nesting-3D","(p1)","<p>This sets the maximum level of data structure nesting in the generated JSON\nto the integer depth, max_nesting …\n"],["merge","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-merge","(p1)",""],["new","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-c-new","(p1 = v1)","<p>Instantiates a new State object, configured by <em>opts</em>.\n<p><em>opts</em> can have the following keys:\n<p><strong>indent</strong>: a string ...\n"],["new","JSON::Ext::Parser","JSON/Ext/Parser.html#method-c-new","(p1, p2 = {})","<p>Creates a new JSON::Ext::Parser instance for the string <em>source</em>.\n<p>Creates a new JSON::Ext::Parser instance …\n"],["object_nl","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-object_nl","()","<p>This string is put at the end of a line that holds a JSON object (or Hash).\n"],["object_nl=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-object_nl-3D","(p1)","<p>This string is put at the end of a line that holds a JSON object (or Hash).\n"],["parse","JSON","JSON.html#method-i-parse","(source, opts = {})","<p>Parse the JSON document <em>source</em> into a Ruby data structure and\nreturn it.\n<p><em>opts</em> can have the following keys: ...\n"],["parse","JSON::Ext::Parser","JSON/Ext/Parser.html#method-i-parse","()","<p>Parses the current JSON text <em>source</em> and returns the complete data\nstructure as a result.\n"],["parse!","JSON","JSON.html#method-i-parse-21","(source, opts = {})","<p>Parse the JSON document <em>source</em> into a Ruby data structure and\nreturn it. The bang version of the parse …\n"],["pretty_generate","JSON","JSON.html#method-i-pretty_generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. The returned document is a prettier …\n"],["recurse_proc","JSON","JSON.html#method-i-recurse_proc","(result, &proc)","<p>Recursively calls passed <em>Proc</em> if the parsed data structure is an\n<em>Array</em> or <em>Hash</em>\n"],["restore","JSON","JSON.html#method-c-restore","(source, proc = nil, options = {})",""],["source","JSON::Ext::Parser","JSON/Ext/Parser.html#method-i-source","()","<p>Returns a copy of the current <em>source</em> string, that was used to\nconstruct this Parser.\n"],["space","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-space","()","<p>Returns the string that is used to insert a space between the tokens in a\nJSON string.\n"],["space=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-space-3D","(p1)","<p>Sets <em>space</em> to the string that is used to insert a space between\nthe tokens in a JSON string.\n"],["space_before","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-space_before","()","<p>Returns the string that is used to insert a space before the ‘:’ in JSON\nobjects.\n"],["space_before=","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-space_before-3D","(p1)","<p>Sets the string that is used to insert a space before the ‘:’ in JSON\nobjects.\n"],["to_h","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-to_h","()","<p>Returns the configuration instance variables as a hash, that can be passed\nto the configure method.\n"],["to_hash","JSON::Ext::Generator::State","JSON/Ext/Generator/State.html#method-i-to_hash","()",""],["to_hash","JSON::GenericObject","JSON/GenericObject.html#method-i-to_hash","()",""],["to_json","BigDecimal","BigDecimal.html#method-i-to_json","(*args)","<p>return the JSON value\n"],["to_json","Complex","Complex.html#method-i-to_json","(*args)","<p>Stores class name (Complex) along with real value <code>r</code> and\nimaginary value <code>i</code> as JSON string\n"],["to_json","Date","Date.html#method-i-to_json","(*args)","<p>Stores class name (Date) with Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code> and Day of Calendar Reform\n<code>sg</code> as JSON string …\n"],["to_json","DateTime","DateTime.html#method-i-to_json","(*args)","<p>Stores class name (DateTime) with Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code>, hour <code>H</code>, minute\n<code>M</code>, second <code>S</code>, offset  …\n"],["to_json","Exception","Exception.html#method-i-to_json","(*args)","<p>Stores class name (Exception) with message <code>m</code> and backtrace\narray <code>b</code> as JSON string\n"],["to_json","JSON::GenericObject","JSON/GenericObject.html#method-i-to_json","(*a)",""],["to_json","OpenStruct","OpenStruct.html#method-i-to_json","(*args)","<p>Stores class name (OpenStruct) with this struct’s values <code>t</code> as\na JSON string.\n"],["to_json","Range","Range.html#method-i-to_json","(*args)","<p>Stores class name (Range) with JSON array of arguments <code>a</code> which\ninclude <code>first</code> (integer), <code>last</code> (integer), …\n"],["to_json","Rational","Rational.html#method-i-to_json","(*args)","<p>Stores class name (Rational) along with numerator value <code>n</code> and\ndenominator value <code>d</code> as JSON string\n"],["to_json","Regexp","Regexp.html#method-i-to_json","(*args)","<p>Stores class name (Regexp) with options <code>o</code> and source\n<code>s</code> (Regexp or String) as JSON string\n"],["to_json","Set","Set.html#method-i-to_json","(*args)","<p>return the JSON value\n"],["to_json","Struct","Struct.html#method-i-to_json","(*args)","<p>Stores class name (Struct) with Struct values <code>v</code> as a JSON\nstring. Only named structs are supported.\n"],["to_json","Symbol","Symbol.html#method-i-to_json","(*a)","<p>Stores class name (Symbol) with String representation of Symbol as a JSON\nstring.\n"],["to_json","Time","Time.html#method-i-to_json","(*args)","<p>Stores class name (Time) with number of seconds since epoch and number of\nmicroseconds for Time as JSON …\n"],["wrap","JSON::JSONError","JSON/JSONError.html#method-c-wrap","(exception)",""],["|","JSON::GenericObject","JSON/GenericObject.html#method-i-7C","(other)",""]]}}