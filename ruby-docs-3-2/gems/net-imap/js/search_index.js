var search_data = {"index":{"searchIndex":["net","imap","address","authenticators","badresponseerror","bodystructure","bodytypeattachment","bodytypebasic","bodytypeextension","bodytypemessage","bodytypemultipart","bodytypetext","byeresponseerror","contentdisposition","continuationrequest","crammd5authenticator","dataformaterror","digestmd5authenticator","envelope","error","fetchdata","ignoredresponse","loginauthenticator","mailboxaclitem","mailboxlist","mailboxquota","mailboxquotaroot","namespace","namespaces","noresponseerror","numvalidator","plainauthenticator","responsecode","responseerror","responseparseerror","responseparser","responsetext","sasl","bidistringerror","prohibitedcodepoint","saslprep","stringprep","stringpreperror","statusdata","stringformatter","taggedresponse","threadmember","uidplusdata","unknownresponseerror","untaggedresponse","xoauth2authenticator","stringpreptablesgenerator","[]()","add_authenticator()","add_response_handler()","append()","arrays()","asgn_regex()","asgn_regexps()","asgn_regexps!()","asgn_table()","assigned_uids()","attr()","attr()","attr()","authenticate()","authenticator()","authenticators()","bcc()","bidi_l()","bidi_r_al()","bidi_consts()","bidi_fails_req2()","bidi_fails_req3()","bidi_failure_regexp()","bidi_not_r_al()","body()","build_oauth2_string()","capability()","cc()","check()","check_bidi!()","check_prohibited!()","children()","clean_deps()","close()","code()","content_id()","copy()","copy_internal()","create()","create_ssl_params()","data()","data()","data()","data()","date()","debug()","debug=()","decode_date()","decode_datetime()","decode_time()","decode_utf7()","default_imap_port()","default_imaps_port()","default_port()","default_ssl_port()","default_tls_port()","delete()","delim()","delim()","description()","disconnect()","disconnected?()","disposition()","disposition()","dsp_type()","dsp_type()","encode_date()","encode_datetime()","encode_time()","encode_utf7()","encoding()","ensure_mod_sequence_value()","ensure_number()","ensure_nz_number()","envelope()","examine()","expunge()","extension()","extension()","extensions()","fetch()","fetch_internal()","format_date()","format_datetime()","format_time()","from()","generate_json_data_file()","generate_tag()","get_response()","get_tagged_response()","getacl()","getquota()","getquotaroot()","hmac_md5()","host()","id()","idle()","idle_done()","in_reply_to()","json_deps()","language()","language()","lines()","list()","load_tables_and_titles_from_json!()","login()","logout()","lsub()","mailbox()","mailbox()","mailbox()","mailbox()","mailbox()","md5()","media_subtype()","media_subtype()","media_subtype()","media_subtype()","media_type()","media_type()","media_type()","merged_tables_regex()","message_id()","move()","multipart?()","multipart?()","multipart?()","multipart?()","multipart?()","multipart?()","name()","name()","name()","name()","name()","namespace()","nc()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","noop()","normalize_searching_criteria()","nstring()","other()","param()","param()","param()","param()","parse()","parse_date()","parse_datetime()","parse_rfc_text()","parse_time()","parts()","personal()","prefix()","process()","process()","process()","process()","process()","put_string()","qdval()","quota()","ranges()","raw_data()","raw_data()","raw_data()","raw_data()","rb_deps()","receive_responses()","record_response()","regex_str()","regexp_const_desc()","regexp_const_name()","regexp_for()","regexps()","remove_response_handler()","rename()","reply_to()","rights()","route()","saslprep()","saslprep()","saslprep_rb()","search()","search_internal()","select()","send_command()","send_data()","send_date_data()","send_list_data()","send_literal()","send_number_data()","send_quoted_string()","send_string_data()","send_symbol_data()","send_time_data()","sender()","seqno()","seqno()","setacl()","setquota()","sets()","shared()","size()","sort()","sort_internal()","source_uids()","start_tls_session()","starttls()","status()","store()","store_internal()","string()","stringprep_rb()","subject()","subscribe()","subtype()","subtype()","subtype()","table_regexps_rb()","table_titles_rb()","tables()","tag()","tcp_socket()","text()","thread()","thread_internal()","titles()","to()","to_ranges()","to_regexp()","uid_copy()","uid_expunge()","uid_fetch()","uid_mapping()","uid_move()","uid_search()","uid_sort()","uid_store()","uid_thread()","uidvalidity()","unselect()","unsubscribe()","usage()","user()","valid_mod_sequence_value?()","valid_nstring?()","valid_number?()","valid_nz_number?()","valid_string?()","validate_data()","xlist()"],"longSearchIndex":["net","net::imap","net::imap::address","net::imap::authenticators","net::imap::badresponseerror","net::imap::bodystructure","net::imap::bodytypeattachment","net::imap::bodytypebasic","net::imap::bodytypeextension","net::imap::bodytypemessage","net::imap::bodytypemultipart","net::imap::bodytypetext","net::imap::byeresponseerror","net::imap::contentdisposition","net::imap::continuationrequest","net::imap::crammd5authenticator","net::imap::dataformaterror","net::imap::digestmd5authenticator","net::imap::envelope","net::imap::error","net::imap::fetchdata","net::imap::ignoredresponse","net::imap::loginauthenticator","net::imap::mailboxaclitem","net::imap::mailboxlist","net::imap::mailboxquota","net::imap::mailboxquotaroot","net::imap::namespace","net::imap::namespaces","net::imap::noresponseerror","net::imap::numvalidator","net::imap::plainauthenticator","net::imap::responsecode","net::imap::responseerror","net::imap::responseparseerror","net::imap::responseparser","net::imap::responsetext","net::imap::sasl","net::imap::sasl::bidistringerror","net::imap::sasl::prohibitedcodepoint","net::imap::sasl::saslprep","net::imap::sasl::stringprep","net::imap::sasl::stringpreperror","net::imap::statusdata","net::imap::stringformatter","net::imap::taggedresponse","net::imap::threadmember","net::imap::uidplusdata","net::imap::unknownresponseerror","net::imap::untaggedresponse","net::imap::xoauth2authenticator","stringpreptablesgenerator","net::imap::sasl::stringprep::[]()","net::imap::authenticators#add_authenticator()","net::imap#add_response_handler()","net::imap#append()","stringpreptablesgenerator#arrays()","stringpreptablesgenerator#asgn_regex()","stringpreptablesgenerator#asgn_regexps()","stringpreptablesgenerator#asgn_regexps!()","stringpreptablesgenerator#asgn_table()","net::imap::uidplusdata#assigned_uids()","net::imap::fetchdata#attr()","net::imap::mailboxlist#attr()","net::imap::statusdata#attr()","net::imap#authenticate()","net::imap::authenticators#authenticator()","net::imap::authenticators#authenticators()","net::imap::envelope#bcc()","stringpreptablesgenerator#bidi_l()","stringpreptablesgenerator#bidi_r_al()","stringpreptablesgenerator#bidi_consts()","stringpreptablesgenerator#bidi_fails_req2()","stringpreptablesgenerator#bidi_fails_req3()","stringpreptablesgenerator#bidi_failure_regexp()","stringpreptablesgenerator#bidi_not_r_al()","net::imap::bodytypemessage#body()","net::imap::xoauth2authenticator#build_oauth2_string()","net::imap#capability()","net::imap::envelope#cc()","net::imap#check()","net::imap::sasl::stringprep#check_bidi!()","net::imap::sasl::stringprep#check_prohibited!()","net::imap::threadmember#children()","stringpreptablesgenerator#clean_deps()","net::imap#close()","net::imap::responsetext#code()","net::imap::bodytypebasic#content_id()","net::imap#copy()","net::imap#copy_internal()","net::imap#create()","net::imap#create_ssl_params()","net::imap::continuationrequest#data()","net::imap::responsecode#data()","net::imap::taggedresponse#data()","net::imap::untaggedresponse#data()","net::imap::envelope#date()","net::imap::debug()","net::imap::debug=()","net::imap::decode_date()","net::imap::decode_datetime()","net::imap::decode_time()","net::imap::decode_utf7()","net::imap::default_imap_port()","net::imap::default_imaps_port()","net::imap::default_port()","net::imap::default_ssl_port()","net::imap::default_tls_port()","net::imap#delete()","net::imap::mailboxlist#delim()","net::imap::namespace#delim()","net::imap::bodytypebasic#description()","net::imap#disconnect()","net::imap#disconnected?()","net::imap::bodytypebasic#disposition()","net::imap::bodytypemultipart#disposition()","net::imap::bodytypeattachment#dsp_type()","net::imap::contentdisposition#dsp_type()","net::imap::encode_date()","net::imap::encode_datetime()","net::imap::encode_time()","net::imap::encode_utf7()","net::imap::bodytypebasic#encoding()","net::imap::numvalidator#ensure_mod_sequence_value()","net::imap::numvalidator#ensure_number()","net::imap::numvalidator#ensure_nz_number()","net::imap::bodytypemessage#envelope()","net::imap#examine()","net::imap#expunge()","net::imap::bodytypebasic#extension()","net::imap::bodytypemultipart#extension()","net::imap::namespace#extensions()","net::imap#fetch()","net::imap#fetch_internal()","net::imap::format_date()","net::imap::format_datetime()","net::imap::format_time()","net::imap::envelope#from()","stringpreptablesgenerator#generate_json_data_file()","net::imap#generate_tag()","net::imap#get_response()","net::imap#get_tagged_response()","net::imap#getacl()","net::imap#getquota()","net::imap#getquotaroot()","net::imap::crammd5authenticator#hmac_md5()","net::imap::address#host()","net::imap#id()","net::imap#idle()","net::imap#idle_done()","net::imap::envelope#in_reply_to()","stringpreptablesgenerator#json_deps()","net::imap::bodytypebasic#language()","net::imap::bodytypemultipart#language()","net::imap::bodytypetext#lines()","net::imap#list()","stringpreptablesgenerator#load_tables_and_titles_from_json!()","net::imap#login()","net::imap#logout()","net::imap#lsub()","net::imap::address#mailbox()","net::imap::mailboxaclitem#mailbox()","net::imap::mailboxquota#mailbox()","net::imap::mailboxquotaroot#mailbox()","net::imap::statusdata#mailbox()","net::imap::bodytypebasic#md5()","net::imap::bodytypebasic#media_subtype()","net::imap::bodytypemessage#media_subtype()","net::imap::bodytypemultipart#media_subtype()","net::imap::bodytypetext#media_subtype()","net::imap::bodytypeattachment#media_type()","net::imap::bodytypebasic#media_type()","net::imap::bodytypemultipart#media_type()","stringpreptablesgenerator#merged_tables_regex()","net::imap::envelope#message_id()","net::imap#move()","net::imap::bodytypeattachment#multipart?()","net::imap::bodytypebasic#multipart?()","net::imap::bodytypeextension#multipart?()","net::imap::bodytypemessage#multipart?()","net::imap::bodytypemultipart#multipart?()","net::imap::bodytypetext#multipart?()","net::imap::address#name()","net::imap::mailboxlist#name()","net::imap::responsecode#name()","net::imap::taggedresponse#name()","net::imap::untaggedresponse#name()","net::imap#namespace()","net::imap::digestmd5authenticator#nc()","net::imap::new()","net::imap::crammd5authenticator::new()","net::imap::digestmd5authenticator::new()","net::imap::loginauthenticator::new()","net::imap::responseerror::new()","net::imap::responseparser::new()","net::imap::sasl::prohibitedcodepoint::new()","net::imap::sasl::stringpreperror::new()","net::imap::xoauth2authenticator::new()","stringpreptablesgenerator::new()","net::imap#noop()","net::imap#normalize_searching_criteria()","net::imap::stringformatter#nstring()","net::imap::namespaces#other()","net::imap::bodytypeattachment#param()","net::imap::bodytypebasic#param()","net::imap::bodytypemultipart#param()","net::imap::contentdisposition#param()","net::imap::responseparser#parse()","net::imap::parse_date()","net::imap::parse_datetime()","stringpreptablesgenerator#parse_rfc_text()","net::imap::parse_time()","net::imap::bodytypemultipart#parts()","net::imap::namespaces#personal()","net::imap::namespace#prefix()","net::imap::crammd5authenticator#process()","net::imap::digestmd5authenticator#process()","net::imap::loginauthenticator#process()","net::imap::plainauthenticator#process()","net::imap::xoauth2authenticator#process()","net::imap#put_string()","net::imap::digestmd5authenticator#qdval()","net::imap::mailboxquota#quota()","stringpreptablesgenerator#ranges()","net::imap::continuationrequest#raw_data()","net::imap::ignoredresponse#raw_data()","net::imap::taggedresponse#raw_data()","net::imap::untaggedresponse#raw_data()","stringpreptablesgenerator#rb_deps()","net::imap#receive_responses()","net::imap#record_response()","stringpreptablesgenerator#regex_str()","stringpreptablesgenerator#regexp_const_desc()","stringpreptablesgenerator#regexp_const_name()","stringpreptablesgenerator#regexp_for()","stringpreptablesgenerator#regexps()","net::imap#remove_response_handler()","net::imap#rename()","net::imap::envelope#reply_to()","net::imap::mailboxaclitem#rights()","net::imap::address#route()","net::imap::sasl#saslprep()","net::imap::sasl::saslprep#saslprep()","stringpreptablesgenerator#saslprep_rb()","net::imap#search()","net::imap#search_internal()","net::imap#select()","net::imap#send_command()","net::imap#send_data()","net::imap#send_date_data()","net::imap#send_list_data()","net::imap#send_literal()","net::imap#send_number_data()","net::imap#send_quoted_string()","net::imap#send_string_data()","net::imap#send_symbol_data()","net::imap#send_time_data()","net::imap::envelope#sender()","net::imap::fetchdata#seqno()","net::imap::threadmember#seqno()","net::imap#setacl()","net::imap#setquota()","stringpreptablesgenerator#sets()","net::imap::namespaces#shared()","net::imap::bodytypebasic#size()","net::imap#sort()","net::imap#sort_internal()","net::imap::uidplusdata#source_uids()","net::imap#start_tls_session()","net::imap#starttls()","net::imap#status()","net::imap#store()","net::imap#store_internal()","net::imap::stringformatter#string()","stringpreptablesgenerator#stringprep_rb()","net::imap::envelope#subject()","net::imap#subscribe()","net::imap::bodytypeattachment#subtype()","net::imap::bodytypebasic#subtype()","net::imap::bodytypemultipart#subtype()","stringpreptablesgenerator#table_regexps_rb()","stringpreptablesgenerator#table_titles_rb()","stringpreptablesgenerator#tables()","net::imap::taggedresponse#tag()","net::imap#tcp_socket()","net::imap::responsetext#text()","net::imap#thread()","net::imap#thread_internal()","stringpreptablesgenerator#titles()","net::imap::envelope#to()","stringpreptablesgenerator#to_ranges()","stringpreptablesgenerator#to_regexp()","net::imap#uid_copy()","net::imap#uid_expunge()","net::imap#uid_fetch()","net::imap::uidplusdata#uid_mapping()","net::imap#uid_move()","net::imap#uid_search()","net::imap#uid_sort()","net::imap#uid_store()","net::imap#uid_thread()","net::imap::uidplusdata#uidvalidity()","net::imap#unselect()","net::imap#unsubscribe()","net::imap::mailboxquota#usage()","net::imap::mailboxaclitem#user()","net::imap::numvalidator#valid_mod_sequence_value?()","net::imap::stringformatter#valid_nstring?()","net::imap::numvalidator#valid_number?()","net::imap::numvalidator#valid_nz_number?()","net::imap::stringformatter#valid_string?()","net::imap#validate_data()","net::imap#xlist()"],"info":[["Net","","Net.html","",""],["Net::IMAP","","Net/IMAP.html","","<p>Net::IMAP implements Internet Message Access Protocol (IMAP) client functionality.  The protocol is described …\n"],["Net::IMAP::Address","","Net/IMAP/Address.html","","<p>Net::IMAP::Address represents an electronic mail address, which has been parsed into its component parts …\n"],["Net::IMAP::Authenticators","","Net/IMAP/Authenticators.html","","<p>Registry for SASL authenticators used by Net::IMAP.\n"],["Net::IMAP::BadResponseError","","Net/IMAP/BadResponseError.html","","<p>Error raised upon a “BAD” response from the server, indicating that the client command violated …\n"],["Net::IMAP::BodyStructure","","Net/IMAP/BodyStructure.html","","<p>Net::IMAP::BodyStructure is included by all of the structs that can be returned from a <code>&quot;BODYSTRUCTURE&quot;</code> …\n"],["Net::IMAP::BodyTypeAttachment","","Net/IMAP/BodyTypeAttachment.html","","<p>WARNING\n<p>BodyTypeAttachment represents a <code>body-fld-dsp</code> that is incorrectly in a position where the IMAP4rev1 …\n\n<blockquote>"],["Net::IMAP::BodyTypeBasic","","Net/IMAP/BodyTypeBasic.html","","<p>Net::IMAP::BodyTypeBasic represents basic body structures of messages and message parts, unless they …\n"],["Net::IMAP::BodyTypeExtension","","Net/IMAP/BodyTypeExtension.html","","<p>WARNING:\n\n<blockquote><p>BodyTypeExtension is (incorrectly) used for <code>message/*</code> parts (besides <code>message/rfc822</code>, which correctly …\n</blockquote>\n"],["Net::IMAP::BodyTypeMessage","","Net/IMAP/BodyTypeMessage.html","","<p>Net::IMAP::BodyTypeMessage represents the body structures of messages and message parts, when <code>Content-Type</code> …\n"],["Net::IMAP::BodyTypeMultipart","","Net/IMAP/BodyTypeMultipart.html","","<p>Net::IMAP::BodyTypeMultipart represents body structures of messages and message parts, when <code>Content-Type</code> …\n"],["Net::IMAP::BodyTypeText","","Net/IMAP/BodyTypeText.html","","<p>Net::IMAP::BodyTypeText represents the body structures of messages and message parts, when <code>Content-Type</code> …\n"],["Net::IMAP::ByeResponseError","","Net/IMAP/ByeResponseError.html","","<p>Error raised upon a “BYE” response from the server, indicating that the client is not being …\n"],["Net::IMAP::ContentDisposition","","Net/IMAP/ContentDisposition.html","","<p>Net::IMAP::ContentDisposition represents Content-Disposition fields.\n"],["Net::IMAP::ContinuationRequest","","Net/IMAP/ContinuationRequest.html","","<p>Net::IMAP::ContinuationRequest represents command continuation requests.\n<p>The command continuation request …\n"],["Net::IMAP::CramMD5Authenticator","","Net/IMAP/CramMD5Authenticator.html","","<p>Authenticator for the “<code>CRAM-MD5</code>” SASL mechanism, specified in RFC2195.  See Net::IMAP#authenticate …\n"],["Net::IMAP::DataFormatError","","Net/IMAP/DataFormatError.html","","<p>Error raised when data is in the incorrect format.\n"],["Net::IMAP::DigestMD5Authenticator","","Net/IMAP/DigestMD5Authenticator.html","","<p>Net::IMAP authenticator for the “‘DIGEST-MD5`” SASL mechanism type, specified in RFC2831(tools.ietf.org/html/rfc2831 …\n"],["Net::IMAP::Envelope","","Net/IMAP/Envelope.html","","<p>Net::IMAP::Envelope represents envelope structures of messages.\n<p>Note &mdash; When the #sender and #reply_to fields …\n\n"],["Net::IMAP::Error","","Net/IMAP/Error.html","","<p>Superclass of IMAP errors.\n"],["Net::IMAP::FetchData","","Net/IMAP/FetchData.html","","<p>Net::IMAP::FetchData represents the contents of a FETCH response.\n<p>Net::IMAP#fetch and Net::IMAP#uid_fetch …\n"],["Net::IMAP::IgnoredResponse","","Net/IMAP/IgnoredResponse.html","","<p>Net::IMAP::IgnoredResponse represents intentionally ignored responses.\n<p>This includes untagged response …\n"],["Net::IMAP::LoginAuthenticator","","Net/IMAP/LoginAuthenticator.html","","<p>Authenticator for the “<code>LOGIN</code>” SASL mechanism.  See Net::IMAP#authenticate.\n<p><code>LOGIN</code> authentication …\n"],["Net::IMAP::MailboxACLItem","","Net/IMAP/MailboxACLItem.html","","<p>Net::IMAP::MailboxACLItem represents the response from GETACL.\n<p>Net::IMAP#getacl returns an array of MailboxACLItem …\n"],["Net::IMAP::MailboxList","","Net/IMAP/MailboxList.html","","<p>Net::IMAP::MailboxList represents contents of the LIST response, representing a single mailbox path. …\n"],["Net::IMAP::MailboxQuota","","Net/IMAP/MailboxQuota.html","","<p>Net::IMAP::MailboxQuota represents contents of GETQUOTA response. This object can also be a response …\n"],["Net::IMAP::MailboxQuotaRoot","","Net/IMAP/MailboxQuotaRoot.html","","<p>Net::IMAP::MailboxQuotaRoot represents part of the GETQUOTAROOT response. (GETQUOTAROOT can also return …\n"],["Net::IMAP::Namespace","","Net/IMAP/Namespace.html","","<p>Net::IMAP::Namespace represents a single namespace contained inside a NAMESPACE response.\n<p>Returned by …\n"],["Net::IMAP::Namespaces","","Net/IMAP/Namespaces.html","","<p>Net::IMAP::Namespaces represents a <code>NAMESPACE</code> server response, which contains lists of #personal, #shared …\n"],["Net::IMAP::NoResponseError","","Net/IMAP/NoResponseError.html","","<p>Error raised upon a “NO” response from the server, indicating that the client command could …\n"],["Net::IMAP::NumValidator","","Net/IMAP/NumValidator.html","","<p>Common validators of number and nz_number types\n"],["Net::IMAP::PlainAuthenticator","","Net/IMAP/PlainAuthenticator.html","","<p>Authenticator for the “<code>PLAIN</code>” SASL mechanism, specified in RFC4616.  See Net::IMAP#authenticate …\n"],["Net::IMAP::ResponseCode","","Net/IMAP/ResponseCode.html","","<p>Net::IMAP::ResponseCode represents response codes.  Response codes can be retrieved from ResponseText#code …\n"],["Net::IMAP::ResponseError","","Net/IMAP/ResponseError.html","","<p>Superclass of all errors used to encapsulate “fail” responses from the server.\n"],["Net::IMAP::ResponseParseError","","Net/IMAP/ResponseParseError.html","","<p>Error raised when a response from the server is non-parseable.\n"],["Net::IMAP::ResponseParser","","Net/IMAP/ResponseParser.html","","<p>Parses an IMAP server response.\n"],["Net::IMAP::ResponseText","","Net/IMAP/ResponseText.html","","<p>Net::IMAP::ResponseText represents texts of responses.\n<p>The text may be prefixed by a ResponseCode.\n<p>ResponseText …\n"],["Net::IMAP::SASL","","Net/IMAP/SASL.html","","<p>Pluggable authentication mechanisms for protocols which support SASL (Simple Authentication and Security …\n"],["Net::IMAP::SASL::BidiStringError","","Net/IMAP/SASL/BidiStringError.html","","<p>StringPrepError raised when <code>string</code> contains bidirectional characters which violate the StringPrep requirements. …\n"],["Net::IMAP::SASL::ProhibitedCodepoint","","Net/IMAP/SASL/ProhibitedCodepoint.html","","<p>StringPrepError raised when <code>string</code> contains a codepoint prohibited by <code>table</code>.\n"],["Net::IMAP::SASL::SASLprep","","Net/IMAP/SASL/SASLprep.html","","<p>SASLprep#saslprep can be used to prepare a string according to [RFC4013].\n<p>SASLprep maps characters three …\n"],["Net::IMAP::SASL::StringPrep","","Net/IMAP/SASL/StringPrep.html","","<p>Regexps and utility methods for implementing stringprep profiles.  The StringPrep algorithm is defined …\n"],["Net::IMAP::SASL::StringPrepError","","Net/IMAP/SASL/StringPrepError.html","","<p>ArgumentError raised when <code>string</code> is invalid for the stringprep <code>profile</code>.\n"],["Net::IMAP::StatusData","","Net/IMAP/StatusData.html","","<p>Net::IMAP::StatusData represents the contents of the STATUS response.\n<p>Net::IMAP#status returns the contents …\n"],["Net::IMAP::StringFormatter","","Net/IMAP/StringFormatter.html","",""],["Net::IMAP::TaggedResponse","","Net/IMAP/TaggedResponse.html","","<p>Net::IMAP::TaggedResponse represents tagged responses.\n<p>The server completion result response indicates …\n"],["Net::IMAP::ThreadMember","","Net/IMAP/ThreadMember.html","","<p>Net::IMAP::ThreadMember represents a thread-node returned by Net::IMAP#thread.\n"],["Net::IMAP::UIDPlusData","","Net/IMAP/UIDPlusData.html","","<p>Net::IMAP::UIDPlusData represents the ResponseCode#data that accompanies the <code>APPENDUID</code> and <code>COPYUID</code> response …\n"],["Net::IMAP::UnknownResponseError","","Net/IMAP/UnknownResponseError.html","","<p>Error raised upon an unknown response from the server.\n"],["Net::IMAP::UntaggedResponse","","Net/IMAP/UntaggedResponse.html","","<p>Net::IMAP::UntaggedResponse represents untagged responses.\n<p>Data transmitted by the server to the client …\n"],["Net::IMAP::XOauth2Authenticator","","Net/IMAP/XOauth2Authenticator.html","",""],["StringPrepTablesGenerator","","StringPrepTablesGenerator.html","","<p>Generator for stringprep regexps.\n<p>Combines Unicode character classes with generated tables.  Generated …\n"],["[]","Net::IMAP::SASL::StringPrep","Net/IMAP/SASL/StringPrep.html#method-c-5B-5D","(table)","<p>Returns a Regexp matching the given <code>table</code> name.\n"],["add_authenticator","Net::IMAP::Authenticators","Net/IMAP/Authenticators.html#method-i-add_authenticator","(auth_type, authenticator)","<p>Adds an authenticator for Net::IMAP#authenticate to use.  <code>mechanism</code> is the SASL mechanism implemented …\n"],["add_response_handler","Net::IMAP","Net/IMAP.html#method-i-add_response_handler","(handler = nil, &block)","<p>Adds a response handler. For example, to detect when the server sends a new EXISTS response (which normally …\n"],["append","Net::IMAP","Net/IMAP.html#method-i-append","(mailbox, message, flags = nil, date_time = nil)","<p>Sends an APPEND command [IMAP4rev1 §6.3.11] to append the <code>message</code> to the end of the <code>mailbox</code>. The optional …\n"],["arrays","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-arrays","()",""],["asgn_regex","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-asgn_regex","(name, regexp, negate: false)",""],["asgn_regexps","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-asgn_regexps","()",""],["asgn_regexps!","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-asgn_regexps-21","()",""],["asgn_table","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-asgn_table","(name, negate: false)",""],["assigned_uids","Net::IMAP::UIDPlusData","Net/IMAP/UIDPlusData.html#method-i-assigned_uids","","<p>The newly assigned UIDs of the copied, moved, or appended messages.\n<p>Note &mdash; This always returns an array, …\n\n"],["attr","Net::IMAP::FetchData","Net/IMAP/FetchData.html#method-i-attr","","<p>A hash.  Each key is specifies a message attribute, and the value is the corresponding data item.\n<p>See …\n"],["attr","Net::IMAP::MailboxList","Net/IMAP/MailboxList.html#method-i-attr","","<p>Returns the name attributes. Each name attribute is a symbol capitalized by String#capitalize, such as …\n"],["attr","Net::IMAP::StatusData","Net/IMAP/StatusData.html#method-i-attr","","<p>A hash.  Each key is one of “MESSAGES”, “RECENT”, “UIDNEXT”, “UIDVALIDITY”, …\n"],["authenticate","Net::IMAP","Net/IMAP.html#method-i-authenticate","(mechanism, *args, **props, &cb)","<p>Sends an AUTHENTICATE command [IMAP4rev1 §6.2.2] to authenticate the client.  If successful, the connection …\n"],["authenticator","Net::IMAP::Authenticators","Net/IMAP/Authenticators.html#method-i-authenticator","(mechanism, *authargs, **properties, &callback)","<p>Builds a new authentication session context for <code>mechanism</code>.\n<p>Note &mdash; This method is intended for internal use …\n\n"],["authenticators","Net::IMAP::Authenticators","Net/IMAP/Authenticators.html#method-i-authenticators","()",""],["bcc","Net::IMAP::Envelope","Net/IMAP/Envelope.html#method-i-bcc","","<p>Returns an array of Address that represents the <code>Bcc</code> header.\n"],["bidi_L","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-bidi_L","()",""],["bidi_R_AL","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-bidi_R_AL","()",""],["bidi_consts","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-bidi_consts","()",""],["bidi_fails_req2","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-bidi_fails_req2","()",""],["bidi_fails_req3","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-bidi_fails_req3","()",""],["bidi_failure_regexp","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-bidi_failure_regexp","()","<p>shares the bidi_R_AL definition between both req2 and req3\n"],["bidi_not_R_AL","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-bidi_not_R_AL","()",""],["body","Net::IMAP::BodyTypeMessage","Net/IMAP/BodyTypeMessage.html#method-i-body","","<p>Returns a Net::IMAP::BodyStructure for the message’s body structure.\n"],["build_oauth2_string","Net::IMAP::XOauth2Authenticator","Net/IMAP/XOauth2Authenticator.html#method-i-build_oauth2_string","(user, oauth2_token)",""],["capability","Net::IMAP","Net/IMAP.html#method-i-capability","()","<p>Sends a CAPABILITY command [IMAP4rev1 §6.1.1] and returns an array of capabilities that the server supports. …\n"],["cc","Net::IMAP::Envelope","Net/IMAP/Envelope.html#method-i-cc","","<p>Returns an array of Address that represents the <code>Cc</code> header.\n"],["check","Net::IMAP","Net/IMAP.html#method-i-check","()","<p>Sends a CHECK command [IMAP4rev1 §6.4.1] to request a checkpoint of the currently selected mailbox.  …\n"],["check_bidi!","Net::IMAP::SASL::StringPrep","Net/IMAP/SASL/StringPrep.html#method-i-check_bidi-21","(string, c_8: false, profile: nil)","<p>Checks that <code>string</code> obeys all of the “Bidirectional Characters” requirements in RFC-3454, §6: …\n"],["check_prohibited!","Net::IMAP::SASL::StringPrep","Net/IMAP/SASL/StringPrep.html#method-i-check_prohibited-21","(string, *tables, bidi: false, profile: nil)","<p>Checks <code>string</code> for any codepoint in <code>tables</code>. Raises a ProhibitedCodepoint describing the first matching …\n"],["children","Net::IMAP::ThreadMember","Net/IMAP/ThreadMember.html#method-i-children","","<p>An array of Net::IMAP::ThreadMember objects for mail items that are children of this in the thread.\n"],["clean_deps","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-clean_deps","()",""],["close","Net::IMAP","Net/IMAP.html#method-i-close","()","<p>Sends a CLOSE command [IMAP4rev1 §6.4.2] to close the currently selected mailbox.  The CLOSE command …\n"],["code","Net::IMAP::ResponseText","Net/IMAP/ResponseText.html#method-i-code","","<p>Returns a ResponseCode, if the response contains one\n"],["content_id","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-content_id","","<p>Returns a string giving the content id as defined in [MIME-IMB] §7.\n"],["copy","Net::IMAP","Net/IMAP.html#method-i-copy","(set, mailbox)","<p>Sends a COPY command [IMAP4rev1 §6.4.7] to copy the specified message(s) to the end of the specified …\n"],["copy_internal","Net::IMAP","Net/IMAP.html#method-i-copy_internal","(cmd, set, mailbox)",""],["create","Net::IMAP","Net/IMAP.html#method-i-create","(mailbox)","<p>Sends a CREATE command [IMAP4rev1 §6.3.3] to create a new <code>mailbox</code>.\n<p>A Net::IMAP::NoResponseError is raised …\n"],["create_ssl_params","Net::IMAP","Net/IMAP.html#method-i-create_ssl_params","(certs = nil, verify = true)",""],["data","Net::IMAP::ContinuationRequest","Net/IMAP/ContinuationRequest.html#method-i-data","","<p>Returns a ResponseText object\n"],["data","Net::IMAP::ResponseCode","Net/IMAP/ResponseCode.html#method-i-data","","<p>Returns the parsed response code data, e.g: an array of capabilities strings, an array of character set …\n"],["data","Net::IMAP::TaggedResponse","Net/IMAP/TaggedResponse.html#method-i-data","","<p>Returns a ResponseText object\n"],["data","Net::IMAP::UntaggedResponse","Net/IMAP/UntaggedResponse.html#method-i-data","","<p>The parsed response data, e.g: an array of flag symbols, an array of capabilities strings, a ResponseText …\n"],["date","Net::IMAP::Envelope","Net/IMAP/Envelope.html#method-i-date","","<p>Returns a string that represents the <code>Date</code> header.\n<p>Note &mdash; For a well-formed [RFC5322] message, the #date …\n\n"],["debug","Net::IMAP","Net/IMAP.html#method-c-debug","()","<p>Returns the debug mode.\n"],["debug=","Net::IMAP","Net/IMAP.html#method-c-debug-3D","(val)","<p>Sets the debug mode.\n"],["decode_date","Net::IMAP","Net/IMAP.html#method-c-decode_date","(string)","<p>Decodes <code>string</code> as an IMAP formatted “date”.\n<p>Double quotes are optional.  Day of month may be …\n"],["decode_datetime","Net::IMAP","Net/IMAP.html#method-c-decode_datetime","(string)","<p>Decodes <code>string</code> as an IMAP4 formatted “date-time”.\n<p>Note that double quotes are not optional. …\n"],["decode_time","Net::IMAP","Net/IMAP.html#method-c-decode_time","(string)","<p>Decodes <code>string</code> as an IMAP4 formatted “date-time”.\n<p>Same as <code>decode_datetime</code>, but returning a  …\n"],["decode_utf7","Net::IMAP","Net/IMAP.html#method-c-decode_utf7","(s)","<p>Decode a string from modified UTF-7 format to UTF-8.\n<p>UTF-7 is a 7-bit encoding of Unicode [UTF7].  IMAP …\n"],["default_imap_port","Net::IMAP","Net/IMAP.html#method-c-default_imap_port","()",""],["default_imaps_port","Net::IMAP","Net/IMAP.html#method-c-default_imaps_port","()",""],["default_port","Net::IMAP","Net/IMAP.html#method-c-default_port","()","<p>The default port for IMAP connections, port 143\n"],["default_ssl_port","Net::IMAP","Net/IMAP.html#method-c-default_ssl_port","()",""],["default_tls_port","Net::IMAP","Net/IMAP.html#method-c-default_tls_port","()","<p>The default port for IMAPS connections, port 993\n"],["delete","Net::IMAP","Net/IMAP.html#method-i-delete","(mailbox)","<p>Sends a DELETE command [IMAP4rev1 §6.3.4] to remove the <code>mailbox</code>.\n<p>A Net::IMAP::NoResponseError is raised …\n"],["delim","Net::IMAP::MailboxList","Net/IMAP/MailboxList.html#method-i-delim","","<p>Returns the hierarchy delimiter for the mailbox path.\n"],["delim","Net::IMAP::Namespace","Net/IMAP/Namespace.html#method-i-delim","","<p>Returns a hierarchy delimiter character, if it exists.\n"],["description","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-description","","<p>Returns a string giving the content description as defined in [MIME-IMB] §8.\n"],["disconnect","Net::IMAP","Net/IMAP.html#method-i-disconnect","()","<p>Disconnects from the server.\n<p>Related: #logout\n"],["disconnected?","Net::IMAP","Net/IMAP.html#method-i-disconnected-3F","()","<p>Returns true if disconnected from the server.\n<p>Related: #logout, #disconnect\n"],["disposition","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-disposition","","<p>Returns a ContentDisposition object giving the content disposition, as defined by [DISPOSITION].\n"],["disposition","Net::IMAP::BodyTypeMultipart","Net/IMAP/BodyTypeMultipart.html#method-i-disposition","","<p>Returns a Net::IMAP::ContentDisposition object giving the content disposition.\n"],["dsp_type","Net::IMAP::BodyTypeAttachment","Net/IMAP/BodyTypeAttachment.html#method-i-dsp_type","","<p>Returns the content disposition type, as defined by [DISPOSITION].\n"],["dsp_type","Net::IMAP::ContentDisposition","Net/IMAP/ContentDisposition.html#method-i-dsp_type","","<p>Returns the content disposition type, as defined by [DISPOSITION].\n"],["encode_date","Net::IMAP","Net/IMAP.html#method-c-encode_date","(date)","<p>Formats <code>time</code> as an IMAP4 date.\n"],["encode_datetime","Net::IMAP","Net/IMAP.html#method-c-encode_datetime","(time)","<p>Formats <code>time</code> as an IMAP4 date-time.\n"],["encode_time","Net::IMAP","Net/IMAP.html#method-c-encode_time","(time)",""],["encode_utf7","Net::IMAP","Net/IMAP.html#method-c-encode_utf7","(s)","<p>Encode a string from UTF-8 format to modified UTF-7.\n"],["encoding","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-encoding","","<p>Returns a string giving the content transfer encoding as defined in [MIME-IMB] §6.\n"],["ensure_mod_sequence_value","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-i-ensure_mod_sequence_value","(num)","<p>Ensure argument is ‘mod_sequence_value’ or raise DataFormatError\n"],["ensure_number","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-i-ensure_number","(num)","<p>Ensure argument is ‘number’ or raise DataFormatError\n"],["ensure_nz_number","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-i-ensure_nz_number","(num)","<p>Ensure argument is ‘nz_number’ or raise DataFormatError\n"],["envelope","Net::IMAP::BodyTypeMessage","Net/IMAP/BodyTypeMessage.html#method-i-envelope","","<p>Returns a Net::IMAP::Envelope giving the envelope structure.\n"],["examine","Net::IMAP","Net/IMAP.html#method-i-examine","(mailbox)","<p>Sends a EXAMINE command [IMAP4rev1 §6.3.2] to select a <code>mailbox</code> so that messages in the <code>mailbox</code> can be …\n"],["expunge","Net::IMAP","Net/IMAP.html#method-i-expunge","()","<p>Sends an EXPUNGE command [IMAP4rev1 §6.4.3] Sends a EXPUNGE command to permanently remove from the currently …\n"],["extension","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-extension","","<p>Returns extension data.  The <code>BODYSTRUCTURE</code> fetch attribute contains extension data, but <code>BODY</code> does not. …\n"],["extension","Net::IMAP::BodyTypeMultipart","Net/IMAP/BodyTypeMultipart.html#method-i-extension","","<p>Returns extension data as an array of numbers strings, and nested arrays (of numbers, strings, etc). …\n"],["extensions","Net::IMAP::Namespace","Net/IMAP/Namespace.html#method-i-extensions","","<p>A hash of parameters mapped to arrays of strings, for extensibility. Extension parameter semantics would …\n"],["fetch","Net::IMAP","Net/IMAP.html#method-i-fetch","(set, attr, mod = nil)","<p>Sends a FETCH command [IMAP4rev1 §6.4.5] to retrieve data associated with a message in the mailbox.\n<p>The …\n"],["fetch_internal","Net::IMAP","Net/IMAP.html#method-i-fetch_internal","(cmd, set, attr, mod = nil)",""],["format_date","Net::IMAP","Net/IMAP.html#method-c-format_date","(date)",""],["format_datetime","Net::IMAP","Net/IMAP.html#method-c-format_datetime","(time)","<p>DEPRECATED &mdash; The original version returned incorrectly formatted strings. Strings returned by encode_datetime …\n\n"],["format_time","Net::IMAP","Net/IMAP.html#method-c-format_time","(time)",""],["from","Net::IMAP::Envelope","Net/IMAP/Envelope.html#method-i-from","","<p>Returns an array of Address that represents the <code>From</code> header.\n<p>If the <code>From</code> header is absent, or is present …\n"],["generate_json_data_file","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-generate_json_data_file","()",""],["generate_tag","Net::IMAP","Net/IMAP.html#method-i-generate_tag","()",""],["get_response","Net::IMAP","Net/IMAP.html#method-i-get_response","()",""],["get_tagged_response","Net::IMAP","Net/IMAP.html#method-i-get_tagged_response","(tag, cmd, timeout = nil)",""],["getacl","Net::IMAP","Net/IMAP.html#method-i-getacl","(mailbox)","<p>Sends a GETACL command [RFC4314 §3.3] along with a specified <code>mailbox</code>.  If this mailbox exists, an array …\n"],["getquota","Net::IMAP","Net/IMAP.html#method-i-getquota","(mailbox)","<p>Sends a GETQUOTA command [RFC2087 §4.2] along with specified <code>mailbox</code>.  If this mailbox exists, then an …\n"],["getquotaroot","Net::IMAP","Net/IMAP.html#method-i-getquotaroot","(mailbox)","<p>Sends a GETQUOTAROOT command [RFC2087 §4.3] along with the specified <code>mailbox</code>.  This command is generally …\n"],["hmac_md5","Net::IMAP::CramMD5Authenticator","Net/IMAP/CramMD5Authenticator.html#method-i-hmac_md5","(text, key)",""],["host","Net::IMAP::Address","Net/IMAP/Address.html#method-i-host","","<p>Returns the [RFC5322] addr-spec <code>domain</code> name.\n<p><code>nil</code> indicates [RFC5322] group syntax.\n"],["id","Net::IMAP","Net/IMAP.html#method-i-id","(client_id=nil)","<p>Sends an ID command [RFC2971 §3.1] and returns a hash of the server’s response, or nil if the server …\n"],["idle","Net::IMAP","Net/IMAP.html#method-i-idle","(timeout = nil, &response_handler)","<p>Sends an IDLE command [RFC2177 §3] [IMAP4rev2 §6.3.13] that waits for notifications of new or expunged …\n"],["idle_done","Net::IMAP","Net/IMAP.html#method-i-idle_done","()","<p>Leaves IDLE.\n<p>Related: #idle\n"],["in_reply_to","Net::IMAP::Envelope","Net/IMAP/Envelope.html#method-i-in_reply_to","","<p>Returns a string that represents the <code>In-Reply-To</code> header.\n<p>Note &mdash; For a well-formed [RFC5322] message, the …\n"],["json_deps","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-json_deps","()","<p>for rake deps\n"],["language","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-language","","<p>Returns a string or an array of strings giving the body language value as defined in [LANGUAGE-TAGS]. …\n"],["language","Net::IMAP::BodyTypeMultipart","Net/IMAP/BodyTypeMultipart.html#method-i-language","","<p>Returns a string or an array of strings giving the body language value as defined in [LANGUAGE-TAGS]. …\n"],["lines","Net::IMAP::BodyTypeText","Net/IMAP/BodyTypeText.html#method-i-lines","","<p>Returns the size of the body in text lines.\n"],["list","Net::IMAP","Net/IMAP.html#method-i-list","(refname, mailbox)","<p>Sends a LIST command [IMAP4rev1 §6.3.8] and returns a subset of names from the complete set of all names …\n"],["load_tables_and_titles_from_json!","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-load_tables_and_titles_from_json-21","()",""],["login","Net::IMAP","Net/IMAP.html#method-i-login","(user, password)","<p>Sends a LOGIN command [IMAP4rev1 §6.2.3] to identify the client and carries the plaintext <code>password</code> authenticating …\n"],["logout","Net::IMAP","Net/IMAP.html#method-i-logout","()","<p>Sends a LOGOUT command [IMAP4rev1 §6.1.3] to inform the command to inform the server that the client …\n"],["lsub","Net::IMAP","Net/IMAP.html#method-i-lsub","(refname, mailbox)","<p>Sends a LSUB command [IMAP4rev1 §6.3.9] and returns a subset of names from the set of names that the …\n"],["mailbox","Net::IMAP::Address","Net/IMAP/Address.html#method-i-mailbox","","<p>Returns the [RFC5322] address <code>local-part</code>, if #host is not <code>nil</code>.\n<p>When #host is <code>nil</code>, this returns an [RFC5322 …\n"],["mailbox","Net::IMAP::MailboxACLItem","Net/IMAP/MailboxACLItem.html#method-i-mailbox","","<p>The mailbox to which the indicated #user has the specified #rights.\n"],["mailbox","Net::IMAP::MailboxQuota","Net/IMAP/MailboxQuota.html#method-i-mailbox","","<p>The mailbox with the associated quota.\n"],["mailbox","Net::IMAP::MailboxQuotaRoot","Net/IMAP/MailboxQuotaRoot.html#method-i-mailbox","","<p>The mailbox with the associated quota.\n"],["mailbox","Net::IMAP::StatusData","Net/IMAP/StatusData.html#method-i-mailbox","","<p>The mailbox name.\n"],["md5","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-md5","","<p>Returns a string giving the body MD5 value as defined in [MD5].\n"],["media_subtype","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-media_subtype","()","\n<blockquote><p>Obsolete &mdash; Use <code>subtype</code> instead.  Calling this will generate a warning message to <code>stderr</code>, then return the …\n\n</blockquote>\n"],["media_subtype","Net::IMAP::BodyTypeMessage","Net/IMAP/BodyTypeMessage.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a warning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeMultipart","Net/IMAP/BodyTypeMultipart.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a warning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeText","Net/IMAP/BodyTypeText.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a warning message to <code>stderr</code>, then return the …\n"],["media_type","Net::IMAP::BodyTypeAttachment","Net/IMAP/BodyTypeAttachment.html#method-i-media_type","()","<p>*invalid for BodyTypeAttachment*\n"],["media_type","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-media_type","","<p>The top-level media type as defined in [MIME-IMB].\n"],["media_type","Net::IMAP::BodyTypeMultipart","Net/IMAP/BodyTypeMultipart.html#method-i-media_type","","<p>BodyTypeMultipart is only used with <code>multipart/*</code> media types.\n"],["merged_tables_regex","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-merged_tables_regex","(*table_names, negate: false)",""],["message_id","Net::IMAP::Envelope","Net/IMAP/Envelope.html#method-i-message_id","","<p>Returns a string that represents the <code>Message-ID</code>.\n<p>Note &mdash; For a well-formed [RFC5322] message, the #message_id …\n"],["move","Net::IMAP","Net/IMAP.html#method-i-move","(set, mailbox)","<p>Sends a MOVE command [RFC6851 §3.1] [IMAP4rev2 §6.4.8] to move the specified message(s) to the end of …\n"],["multipart?","Net::IMAP::BodyTypeAttachment","Net/IMAP/BodyTypeAttachment.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-multipart-3F","()","<p>BodyTypeBasic is not used for multipart MIME parts.\n"],["multipart?","Net::IMAP::BodyTypeExtension","Net/IMAP/BodyTypeExtension.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeMessage","Net/IMAP/BodyTypeMessage.html#method-i-multipart-3F","()","<p>BodyTypeMessage is not used for multipart MIME parts.\n"],["multipart?","Net::IMAP::BodyTypeMultipart","Net/IMAP/BodyTypeMultipart.html#method-i-multipart-3F","()","<p>BodyTypeMultipart is used for multipart MIME parts.\n"],["multipart?","Net::IMAP::BodyTypeText","Net/IMAP/BodyTypeText.html#method-i-multipart-3F","()","<p>BodyTypeText is not used for multipart MIME parts.\n"],["name","Net::IMAP::Address","Net/IMAP/Address.html#method-i-name","","<p>Returns the [RFC5322] address <code>display-name</code> (or the mailbox <code>phrase</code> in the RFC-822 grammar).\n"],["name","Net::IMAP::MailboxList","Net/IMAP/MailboxList.html#method-i-name","","<p>Returns the mailbox name.\n"],["name","Net::IMAP::ResponseCode","Net/IMAP/ResponseCode.html#method-i-name","","<p>Returns the response code name, such as “ALERT”, “PERMANENTFLAGS”, or “UIDVALIDITY”. …\n"],["name","Net::IMAP::TaggedResponse","Net/IMAP/TaggedResponse.html#method-i-name","","<p>Returns the name, one of “OK”, “NO”, or “BAD”.\n"],["name","Net::IMAP::UntaggedResponse","Net/IMAP/UntaggedResponse.html#method-i-name","","<p>The uppercase response name, e.g. “FLAGS”, “LIST”, “FETCH”, etc.\n"],["namespace","Net::IMAP","Net/IMAP.html#method-i-namespace","()","<p>Sends a NAMESPACE command [RFC2342 §5] and returns the namespaces that are available.  The NAMESPACE …\n"],["nc","Net::IMAP::DigestMD5Authenticator","Net/IMAP/DigestMD5Authenticator.html#method-i-nc","(nonce)",""],["new","Net::IMAP","Net/IMAP.html#method-c-new","(host, port_or_options = {}, usessl = false, certs = nil, verify = true)","<p>Creates a new Net::IMAP object and connects it to the specified <code>host</code>.\n<p><code>options</code> is an option hash, each …\n"],["new","Net::IMAP::CramMD5Authenticator","Net/IMAP/CramMD5Authenticator.html#method-c-new","(user, password, warn_deprecation: true, **_ignored)",""],["new","Net::IMAP::DigestMD5Authenticator","Net/IMAP/DigestMD5Authenticator.html#method-c-new","(user, password, authname = nil, warn_deprecation: true)",""],["new","Net::IMAP::LoginAuthenticator","Net/IMAP/LoginAuthenticator.html#method-c-new","(user, password, warn_deprecation: true, **_ignored)",""],["new","Net::IMAP::ResponseError","Net/IMAP/ResponseError.html#method-c-new","(response)",""],["new","Net::IMAP::ResponseParser","Net/IMAP/ResponseParser.html#method-c-new","()",""],["new","Net::IMAP::SASL::ProhibitedCodepoint","Net/IMAP/SASL/ProhibitedCodepoint.html#method-c-new","(table, *args, **kwargs)",""],["new","Net::IMAP::SASL::StringPrepError","Net/IMAP/SASL/StringPrepError.html#method-c-new","(*args, string: nil, profile: nil)",""],["new","Net::IMAP::XOauth2Authenticator","Net/IMAP/XOauth2Authenticator.html#method-c-new","(user, oauth2_token)",""],["new","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-c-new","(rfc_filename: STRINGPREP_RFC_FILE, json_filename: STRINGPREP_JSON_FILE)",""],["noop","Net::IMAP","Net/IMAP.html#method-i-noop","()","<p>Sends a NOOP command [IMAP4rev1 §6.1.2] to the server.\n<p>This allows the server to send unsolicited untagged …\n"],["normalize_searching_criteria","Net::IMAP","Net/IMAP.html#method-i-normalize_searching_criteria","(keys)",""],["nstring","Net::IMAP::StringFormatter","Net/IMAP/StringFormatter.html#method-i-nstring","(str)","<p>coerces non-nil using <code>to_s</code>\n"],["other","Net::IMAP::Namespaces","Net/IMAP/Namespaces.html#method-i-other","","<p>Returns an array of Other Users’ Namespace objects.\n"],["param","Net::IMAP::BodyTypeAttachment","Net/IMAP/BodyTypeAttachment.html#method-i-param","","<p>Returns a hash representing parameters of the Content-Disposition field, as defined by [DISPOSITION]. …\n"],["param","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-param","","<p>Returns a hash that represents parameters as defined in [MIME-IMB].\n"],["param","Net::IMAP::BodyTypeMultipart","Net/IMAP/BodyTypeMultipart.html#method-i-param","","<p>Returns a hash that represents parameters as defined in [MIME-IMB].\n"],["param","Net::IMAP::ContentDisposition","Net/IMAP/ContentDisposition.html#method-i-param","","<p>Returns a hash representing parameters of the Content-Disposition field, as defined by [DISPOSITION]. …\n"],["parse","Net::IMAP::ResponseParser","Net/IMAP/ResponseParser.html#method-i-parse","(str)","<p>Raises ResponseParseError for unparsable strings.\n"],["parse_date","Net::IMAP","Net/IMAP.html#method-c-parse_date","(string)",""],["parse_datetime","Net::IMAP","Net/IMAP.html#method-c-parse_datetime","(string)",""],["parse_rfc_text","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-parse_rfc_text","(rfc3454_text)",""],["parse_time","Net::IMAP","Net/IMAP.html#method-c-parse_time","(string)",""],["parts","Net::IMAP::BodyTypeMultipart","Net/IMAP/BodyTypeMultipart.html#method-i-parts","","<p>Returns an array with a BodyStructure object for each part contained in this part.\n"],["personal","Net::IMAP::Namespaces","Net/IMAP/Namespaces.html#method-i-personal","","<p>Returns an array of Personal Namespace objects.\n"],["prefix","Net::IMAP::Namespace","Net/IMAP/Namespace.html#method-i-prefix","","<p>Returns the namespace prefix string.\n"],["process","Net::IMAP::CramMD5Authenticator","Net/IMAP/CramMD5Authenticator.html#method-i-process","(challenge)",""],["process","Net::IMAP::DigestMD5Authenticator","Net/IMAP/DigestMD5Authenticator.html#method-i-process","(challenge)",""],["process","Net::IMAP::LoginAuthenticator","Net/IMAP/LoginAuthenticator.html#method-i-process","(data)",""],["process","Net::IMAP::PlainAuthenticator","Net/IMAP/PlainAuthenticator.html#method-i-process","(data)",""],["process","Net::IMAP::XOauth2Authenticator","Net/IMAP/XOauth2Authenticator.html#method-i-process","(_data)",""],["put_string","Net::IMAP","Net/IMAP.html#method-i-put_string","(str)",""],["qdval","Net::IMAP::DigestMD5Authenticator","Net/IMAP/DigestMD5Authenticator.html#method-i-qdval","(k, v)","<p>some responses need quoting\n"],["quota","Net::IMAP::MailboxQuota","Net/IMAP/MailboxQuota.html#method-i-quota","","<p>Quota limit imposed on the mailbox.\n"],["ranges","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-ranges","()",""],["raw_data","Net::IMAP::ContinuationRequest","Net/IMAP/ContinuationRequest.html#method-i-raw_data","","<p>the raw response data\n"],["raw_data","Net::IMAP::IgnoredResponse","Net/IMAP/IgnoredResponse.html#method-i-raw_data","","<p>The raw response data.\n"],["raw_data","Net::IMAP::TaggedResponse","Net/IMAP/TaggedResponse.html#method-i-raw_data","","<p>The raw response data.\n"],["raw_data","Net::IMAP::UntaggedResponse","Net/IMAP/UntaggedResponse.html#method-i-raw_data","","<p>The raw response data.\n"],["rb_deps","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-rb_deps","()",""],["receive_responses","Net::IMAP","Net/IMAP.html#method-i-receive_responses","()",""],["record_response","Net::IMAP","Net/IMAP.html#method-i-record_response","(name, data)",""],["regex_str","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-regex_str","(*names, negate: false)",""],["regexp_const_desc","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-regexp_const_desc","(name, negate: false)",""],["regexp_const_name","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-regexp_const_name","(table_name, negate: false)",""],["regexp_for","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-regexp_for","(*names, negate: false)",""],["regexps","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-regexps","()",""],["remove_response_handler","Net::IMAP","Net/IMAP.html#method-i-remove_response_handler","(handler)","<p>Removes the response handler.\n"],["rename","Net::IMAP","Net/IMAP.html#method-i-rename","(mailbox, newname)","<p>Sends a RENAME command [IMAP4rev1 §6.3.5] to change the name of the <code>mailbox</code> to <code>newname</code>.\n<p>A Net::IMAP::NoResponseError …\n"],["reply_to","Net::IMAP::Envelope","Net/IMAP/Envelope.html#method-i-reply_to","","<p>Returns an array of Address that represents the <code>Reply-To</code> header.\n<p>Note &mdash; If the <code>Reply-To</code> header is absent, …\n\n"],["rights","Net::IMAP::MailboxACLItem","Net/IMAP/MailboxACLItem.html#method-i-rights","","<p>The access rights the indicated #user has to the #mailbox.\n"],["route","Net::IMAP::Address","Net/IMAP/Address.html#method-i-route","","<p>Returns the route from RFC-822 route-addr.\n<p>Note &mdash; Generating this obsolete route addressing syntax is not …\n\n"],["saslprep","Net::IMAP::SASL","Net/IMAP/SASL.html#method-i-saslprep","(string, **opts)","<p>See SASLprep#saslprep.\n"],["saslprep","Net::IMAP::SASL::SASLprep","Net/IMAP/SASL/SASLprep.html#method-i-saslprep","(str, stored: false, exception: false)","<p>Prepares a UTF-8 <code>string</code> for comparison, using the SASLprep profile RFC4013 of the StringPrep algorithm …\n"],["saslprep_rb","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-saslprep_rb","()",""],["search","Net::IMAP","Net/IMAP.html#method-i-search","(keys, charset = nil)","<p>Sends a SEARCH command [IMAP4rev1 §6.4.4] to search the mailbox for messages that match the given searching …\n"],["search_internal","Net::IMAP","Net/IMAP.html#method-i-search_internal","(cmd, keys, charset)",""],["select","Net::IMAP","Net/IMAP.html#method-i-select","(mailbox)","<p>Sends a SELECT command [IMAP4rev1 §6.3.1] to select a <code>mailbox</code> so that messages in the <code>mailbox</code> can be …\n"],["send_command","Net::IMAP","Net/IMAP.html#method-i-send_command","(cmd, *args, &block)",""],["send_data","Net::IMAP","Net/IMAP.html#method-i-send_data","(data, tag = nil)",""],["send_date_data","Net::IMAP","Net/IMAP.html#method-i-send_date_data","(date)",""],["send_list_data","Net::IMAP","Net/IMAP.html#method-i-send_list_data","(list, tag = nil)",""],["send_literal","Net::IMAP","Net/IMAP.html#method-i-send_literal","(str, tag = nil)",""],["send_number_data","Net::IMAP","Net/IMAP.html#method-i-send_number_data","(num)",""],["send_quoted_string","Net::IMAP","Net/IMAP.html#method-i-send_quoted_string","(str)",""],["send_string_data","Net::IMAP","Net/IMAP.html#method-i-send_string_data","(str, tag = nil)",""],["send_symbol_data","Net::IMAP","Net/IMAP.html#method-i-send_symbol_data","(symbol)",""],["send_time_data","Net::IMAP","Net/IMAP.html#method-i-send_time_data","(time)",""],["sender","Net::IMAP::Envelope","Net/IMAP/Envelope.html#method-i-sender","","<p>Returns an array of Address that represents the <code>Sender</code> header.\n<p>Note &mdash; If the <code>Sender</code> header is absent, or …\n\n"],["seqno","Net::IMAP::FetchData","Net/IMAP/FetchData.html#method-i-seqno","","<p>The message sequence number.\n<p>Note &mdash; This is never the unique identifier (UID), not even for the Net::IMAP#uid_fetch …\n\n"],["seqno","Net::IMAP::ThreadMember","Net/IMAP/ThreadMember.html#method-i-seqno","","<p>The message sequence number.\n"],["setacl","Net::IMAP","Net/IMAP.html#method-i-setacl","(mailbox, user, rights)","<p>Sends a SETACL command [RFC4314 §3.1] along with <code>mailbox</code>, <code>user</code> and the <code>rights</code> that user is to have on …\n"],["setquota","Net::IMAP","Net/IMAP.html#method-i-setquota","(mailbox, quota)","<p>Sends a SETQUOTA command [RFC2087 §4.1] along with the specified <code>mailbox</code> and <code>quota</code>.  If <code>quota</code> is nil, …\n"],["sets","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-sets","()",""],["shared","Net::IMAP::Namespaces","Net/IMAP/Namespaces.html#method-i-shared","","<p>Returns an array of Shared Namespace objects.\n"],["size","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-size","","<p>Returns a number giving the size of the body in octets.\n"],["sort","Net::IMAP","Net/IMAP.html#method-i-sort","(sort_keys, search_keys, charset)","<p>Sends a SORT command [RFC5256 §3] to search a mailbox for messages that match <code>search_keys</code> and return …\n"],["sort_internal","Net::IMAP","Net/IMAP.html#method-i-sort_internal","(cmd, sort_keys, search_keys, charset)",""],["source_uids","Net::IMAP::UIDPlusData","Net/IMAP/UIDPlusData.html#method-i-source_uids","","<p>The UIDs of the copied or moved messages.\n<p>Note &mdash; Returns <code>nil</code> for Net::IMAP#append.\n\n"],["start_tls_session","Net::IMAP","Net/IMAP.html#method-i-start_tls_session","(params = {})",""],["starttls","Net::IMAP","Net/IMAP.html#method-i-starttls","(options = {}, verify = true)","<p>Sends a STARTTLS command [IMAP4rev1 §6.2.1] to start a TLS session.\n<p>Any <code>options</code> are forwarded to OpenSSL::SSL::SSLContext#set_params …\n"],["status","Net::IMAP","Net/IMAP.html#method-i-status","(mailbox, attr)","<p>Sends a STATUS commands [IMAP4rev1 §6.3.10] and returns the status of the indicated <code>mailbox</code>. <code>attr</code> is …\n"],["store","Net::IMAP","Net/IMAP.html#method-i-store","(set, attr, flags)","<p>Sends a STORE command [IMAP4rev1 §6.4.6] to alter data associated with messages in the mailbox, in particular …\n"],["store_internal","Net::IMAP","Net/IMAP.html#method-i-store_internal","(cmd, set, attr, flags)",""],["string","Net::IMAP::StringFormatter","Net/IMAP/StringFormatter.html#method-i-string","(str)","<p>coerces using <code>to_s</code>\n"],["stringprep_rb","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-stringprep_rb","()",""],["subject","Net::IMAP::Envelope","Net/IMAP/Envelope.html#method-i-subject","","<p>Returns a string that represents the <code>Subject</code> header, if it is present.\n<p>Note &mdash; Servers should return <code>nil</code> …\n\n"],["subscribe","Net::IMAP","Net/IMAP.html#method-i-subscribe","(mailbox)","<p>Sends a SUBSCRIBE command [IMAP4rev1 §6.3.6] to add the specified <code>mailbox</code> name to the server’s set …\n"],["subtype","Net::IMAP::BodyTypeAttachment","Net/IMAP/BodyTypeAttachment.html#method-i-subtype","()","<p>*invalid for BodyTypeAttachment*\n"],["subtype","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-subtype","","<p>The media subtype name as defined in [MIME-IMB].\n"],["subtype","Net::IMAP::BodyTypeMultipart","Net/IMAP/BodyTypeMultipart.html#method-i-subtype","","<p>Returns the content subtype name as defined in [MIME-IMB].\n"],["table_regexps_rb","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-table_regexps_rb","(indent = 3)",""],["table_titles_rb","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-table_titles_rb","(indent = 3)",""],["tables","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-tables","()",""],["tag","Net::IMAP::TaggedResponse","Net/IMAP/TaggedResponse.html#method-i-tag","","<p>Returns the command tag\n"],["tcp_socket","Net::IMAP","Net/IMAP.html#method-i-tcp_socket","(host, port)",""],["text","Net::IMAP::ResponseText","Net/IMAP/ResponseText.html#method-i-text","","<p>Returns the response text, not including any response code\n"],["thread","Net::IMAP","Net/IMAP.html#method-i-thread","(algorithm, search_keys, charset)","<p>Sends a THREAD command [RFC5256 §3] to search a mailbox and return message sequence numbers in threaded …\n"],["thread_internal","Net::IMAP","Net/IMAP.html#method-i-thread_internal","(cmd, algorithm, search_keys, charset)",""],["titles","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-titles","()",""],["to","Net::IMAP::Envelope","Net/IMAP/Envelope.html#method-i-to","","<p>Returns an array of Address that represents the <code>To</code> header.\n"],["to_ranges","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-to_ranges","(table)",""],["to_regexp","StringPrepTablesGenerator","StringPrepTablesGenerator.html#method-i-to_regexp","(codepoints, negate: false)","<p>Starting from a codepoints array (rather than ranges) to deduplicate merged tables.\n"],["uid_copy","Net::IMAP","Net/IMAP.html#method-i-uid_copy","(set, mailbox)","<p>Sends a UID COPY command [IMAP4rev1 §6.4.8] to copy the specified message(s) to the end of the specified …\n"],["uid_expunge","Net::IMAP","Net/IMAP.html#method-i-uid_expunge","(uid_set)","<p>Sends a UID EXPUNGE command [RFC4315 §2.1] [IMAP4rev2 §6.4.9] to permanently remove all messages that …\n"],["uid_fetch","Net::IMAP","Net/IMAP.html#method-i-uid_fetch","(set, attr, mod = nil)","<p>Sends a UID FETCH command [IMAP4rev1 §6.4.8] to retrieve data associated with a message in the mailbox. …\n"],["uid_mapping","Net::IMAP::UIDPlusData","Net/IMAP/UIDPlusData.html#method-i-uid_mapping","()","<p>Returns a hash mapping each source UID to the newly assigned destination UID.\n<p>Note &mdash; Returns <code>nil</code> for Net::IMAP#append …\n\n"],["uid_move","Net::IMAP","Net/IMAP.html#method-i-uid_move","(set, mailbox)","<p>Sends a UID MOVE command [RFC6851 §3.2] [IMAP4rev2 §6.4.9] to move the specified message(s) to the end …\n"],["uid_search","Net::IMAP","Net/IMAP.html#method-i-uid_search","(keys, charset = nil)","<p>Sends a UID SEARCH command [IMAP4rev1 §6.4.8] to search the mailbox for messages that match the given …\n"],["uid_sort","Net::IMAP","Net/IMAP.html#method-i-uid_sort","(sort_keys, search_keys, charset)","<p>Sends a UID SORT command [RFC5256 §3] to search a mailbox for messages that match <code>search_keys</code> and return …\n"],["uid_store","Net::IMAP","Net/IMAP.html#method-i-uid_store","(set, attr, flags)","<p>Sends a UID STORE command [IMAP4rev1 §6.4.8] to alter data associated with messages in the mailbox, in …\n"],["uid_thread","Net::IMAP","Net/IMAP.html#method-i-uid_thread","(algorithm, search_keys, charset)","<p>Sends a UID THREAD command [RFC5256 §3] Similar to #thread, but returns unique identifiers instead of …\n"],["uidvalidity","Net::IMAP::UIDPlusData","Net/IMAP/UIDPlusData.html#method-i-uidvalidity","","<p>The UIDVALIDITY of the destination mailbox.\n"],["unselect","Net::IMAP","Net/IMAP.html#method-i-unselect","()","<p>Sends an UNSELECT command [RFC3691 §2] [IMAP4rev2 §6.4.2] to free the session resources for a mailbox …\n"],["unsubscribe","Net::IMAP","Net/IMAP.html#method-i-unsubscribe","(mailbox)","<p>Sends an UNSUBSCRIBE command [IMAP4rev1 §6.3.7] to remove the specified <code>mailbox</code> name from the server’s …\n"],["usage","Net::IMAP::MailboxQuota","Net/IMAP/MailboxQuota.html#method-i-usage","","<p>Current storage usage of the mailbox.\n"],["user","Net::IMAP::MailboxACLItem","Net/IMAP/MailboxACLItem.html#method-i-user","","<p>Login name that has certain #rights to the #mailbox that was specified with the getacl command.\n"],["valid_mod_sequence_value?","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-i-valid_mod_sequence_value-3F","(num)","<p>Check is passed argument valid ‘mod_sequence_value’ in RFC 4551 terminology\n"],["valid_nstring?","Net::IMAP::StringFormatter","Net/IMAP/StringFormatter.html#method-i-valid_nstring-3F","(str)","<p>Allows nil, symbols, and strings\n"],["valid_number?","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-i-valid_number-3F","(num)","<p>Check is passed argument valid ‘number’ in RFC 3501 terminology\n"],["valid_nz_number?","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-i-valid_nz_number-3F","(num)","<p>Check is passed argument valid ‘nz_number’ in RFC 3501 terminology\n"],["valid_string?","Net::IMAP::StringFormatter","Net/IMAP/StringFormatter.html#method-i-valid_string-3F","(str)","<p>Allows symbols in addition to strings\n"],["validate_data","Net::IMAP","Net/IMAP.html#method-i-validate_data","(data)",""],["xlist","Net::IMAP","Net/IMAP.html#method-i-xlist","(refname, mailbox)","<p>Sends a XLIST command, and returns a subset of names from the complete set of all names available to …\n"]]}}