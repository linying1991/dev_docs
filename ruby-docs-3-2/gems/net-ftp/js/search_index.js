var search_data = {"index":{"searchIndex":["net","ftp","bufferedsslsocket","bufferedsocket","mlsxentry","nullsocket","ftpconnectionerror","ftperror","ftppermerror","ftpprotoerror","ftpreplyerror","ftptemperror","abort()","acct()","appendable?()","binary=()","chdir()","close()","closed?()","connect()","creatable?()","debug_print()","default_passive()","default_passive=()","deletable?()","delete()","dir()","directory?()","directory_makable?()","enterable?()","features()","file?()","get()","getbinaryfile()","getdir()","gettextfile()","help()","list()","listable?()","login()","ls()","mdtm()","mkdir()","mlsd()","mlst()","mtime()","new()","new()","nlst()","noop()","open()","option()","parse_mlsx_entry()","parse_pasv_ipv4_host()","parse_pasv_ipv6_host()","parse_pasv_port()","purgeable?()","put()","putbinaryfile()","puttextfile()","pwd()","quit()","read_timeout=()","readable?()","renamable?()","rename()","retrbinary()","retrlines()","rmdir()","sendcmd()","set_socket()","site()","size()","start_tls_session()","status()","storbinary()","storlines()","system()","voidcmd()","writable?()"],"longSearchIndex":["net","net::ftp","net::ftp::bufferedsslsocket","net::ftp::bufferedsocket","net::ftp::mlsxentry","net::ftp::nullsocket","net::ftpconnectionerror","net::ftperror","net::ftppermerror","net::ftpprotoerror","net::ftpreplyerror","net::ftptemperror","net::ftp#abort()","net::ftp#acct()","net::ftp::mlsxentry#appendable?()","net::ftp#binary=()","net::ftp#chdir()","net::ftp#close()","net::ftp#closed?()","net::ftp#connect()","net::ftp::mlsxentry#creatable?()","net::ftp#debug_print()","net::ftp::default_passive()","net::ftp::default_passive=()","net::ftp::mlsxentry#deletable?()","net::ftp#delete()","net::ftp#dir()","net::ftp::mlsxentry#directory?()","net::ftp::mlsxentry#directory_makable?()","net::ftp::mlsxentry#enterable?()","net::ftp#features()","net::ftp::mlsxentry#file?()","net::ftp#get()","net::ftp#getbinaryfile()","net::ftp#getdir()","net::ftp#gettextfile()","net::ftp#help()","net::ftp#list()","net::ftp::mlsxentry#listable?()","net::ftp#login()","net::ftp#ls()","net::ftp#mdtm()","net::ftp#mkdir()","net::ftp#mlsd()","net::ftp#mlst()","net::ftp#mtime()","net::ftp::new()","net::ftp::mlsxentry::new()","net::ftp#nlst()","net::ftp#noop()","net::ftp::open()","net::ftp#option()","net::ftp#parse_mlsx_entry()","net::ftp#parse_pasv_ipv4_host()","net::ftp#parse_pasv_ipv6_host()","net::ftp#parse_pasv_port()","net::ftp::mlsxentry#purgeable?()","net::ftp#put()","net::ftp#putbinaryfile()","net::ftp#puttextfile()","net::ftp#pwd()","net::ftp#quit()","net::ftp#read_timeout=()","net::ftp::mlsxentry#readable?()","net::ftp::mlsxentry#renamable?()","net::ftp#rename()","net::ftp#retrbinary()","net::ftp#retrlines()","net::ftp#rmdir()","net::ftp#sendcmd()","net::ftp#set_socket()","net::ftp#site()","net::ftp#size()","net::ftp#start_tls_session()","net::ftp#status()","net::ftp#storbinary()","net::ftp#storlines()","net::ftp#system()","net::ftp#voidcmd()","net::ftp::mlsxentry#writable?()"],"info":[["Net","","Net.html","",""],["Net::FTP","","Net/FTP.html","","<p>This class implements the File Transfer Protocol.  If you have used a command-line FTP program, and are …\n"],["Net::FTP::BufferedSSLSocket","","Net/FTP/BufferedSSLSocket.html","",""],["Net::FTP::BufferedSocket","","Net/FTP/BufferedSocket.html","",""],["Net::FTP::MLSxEntry","","Net/FTP/MLSxEntry.html","","<p>MLSxEntry represents an entry in responses of MLST/MLSD. Each entry has the facts (e.g., size, last modification …\n"],["Net::FTP::NullSocket","","Net/FTP/NullSocket.html","",""],["Net::FTPConnectionError","","Net/FTPConnectionError.html","",""],["Net::FTPError","","Net/FTPError.html","",""],["Net::FTPPermError","","Net/FTPPermError.html","",""],["Net::FTPProtoError","","Net/FTPProtoError.html","",""],["Net::FTPReplyError","","Net/FTPReplyError.html","",""],["Net::FTPTempError","","Net/FTPTempError.html","",""],["abort","Net::FTP","Net/FTP.html#method-i-abort","()","<p>Aborts the previous command (ABOR command).\n"],["acct","Net::FTP","Net/FTP.html#method-i-acct","(account)","<p>Sends the ACCT command.\n<p>This is a less common FTP command, to send account information if the destination …\n"],["appendable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-appendable-3F","()","<p>Returns <code>true</code> if the APPE command may be applied to the file.\n"],["binary=","Net::FTP","Net/FTP.html#method-i-binary-3D","(newmode)","<p>A setter to toggle transfers in binary mode. <code>newmode</code> is either <code>true</code> or <code>false</code>\n"],["chdir","Net::FTP","Net/FTP.html#method-i-chdir","(dirname)","<p>Changes the (remote) directory.\n"],["close","Net::FTP","Net/FTP.html#method-i-close","()","<p>Closes the connection.  Further operations are impossible until you open a new connection with #connect …\n"],["closed?","Net::FTP","Net/FTP.html#method-i-closed-3F","()","<p>Returns <code>true</code> if and only if the connection is closed.\n"],["connect","Net::FTP","Net/FTP.html#method-i-connect","(host, port = FTP_PORT)","<p>Establishes an FTP connection to host, optionally overriding the default port. If the environment variable …\n"],["creatable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-creatable-3F","()","<p>Returns <code>true</code> if files may be created in the directory by STOU, STOR, APPE, and RNTO.\n"],["debug_print","Net::FTP","Net/FTP.html#method-i-debug_print","(msg)","<p>Writes debug message to the debug output stream\n"],["default_passive","Net::FTP","Net/FTP.html#method-c-default_passive","()","<p>When <code>true</code>, connections are in passive mode per default. Default: <code>true</code>.\n"],["default_passive=","Net::FTP","Net/FTP.html#method-c-default_passive-3D","(value)","<p>When <code>true</code>, connections are in passive mode per default. Default: <code>true</code>.\n"],["deletable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-deletable-3F","()","<p>Returns <code>true</code> if the file or directory may be deleted by DELE/RMD.\n"],["delete","Net::FTP","Net/FTP.html#method-i-delete","(filename)","<p>Deletes a file on the server.\n"],["dir","Net::FTP","Net/FTP.html#method-i-dir","(*args)",""],["directory?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-directory-3F","()","<p>Returns <code>true</code> if the entry is a directory (i.e., the value of the type fact is dir, cdir, or pdir).\n"],["directory_makable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-directory_makable-3F","()","<p>Returns <code>true</code> if the MKD command may be used to create a new directory within the directory.\n"],["enterable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-enterable-3F","()","<p>Returns <code>true</code> if the directory may be entered by CWD/CDUP.\n"],["features","Net::FTP","Net/FTP.html#method-i-features","()","<p>Issues a FEAT command\n<p>Returns an array of supported optional features\n"],["file?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-file-3F","()","<p>Returns <code>true</code> if the entry is a file (i.e., the value of the type fact is file).\n"],["get","Net::FTP","Net/FTP.html#method-i-get","(remotefile, localfile = File.basename(remotefile), blocksize = DEFAULT_BLOCKSIZE)","<p>Retrieves <code>remotefile</code> in whatever mode the session is set (text or binary).  See #gettextfile and #getbinaryfile …\n"],["getbinaryfile","Net::FTP","Net/FTP.html#method-i-getbinaryfile","(remotefile, localfile = File.basename(remotefile), blocksize = DEFAULT_BLOCKSIZE)","<p>Retrieves <code>remotefile</code> in binary mode, storing the result in <code>localfile</code>. If <code>localfile</code> is nil, returns retrieved …\n"],["getdir","Net::FTP","Net/FTP.html#method-i-getdir","()",""],["gettextfile","Net::FTP","Net/FTP.html#method-i-gettextfile","(remotefile, localfile = File.basename(remotefile))","<p>Retrieves <code>remotefile</code> in ASCII (text) mode, storing the result in <code>localfile</code>. If <code>localfile</code> is nil, returns …\n"],["help","Net::FTP","Net/FTP.html#method-i-help","(arg = nil)","<p>Issues the HELP command.\n"],["list","Net::FTP","Net/FTP.html#method-i-list","(*args)","<p>Returns an array of file information in the directory (the output is like ‘ls -l`).  If a block is given, …\n"],["listable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-listable-3F","()","<p>Returns <code>true</code> if the listing commands, LIST, NLST, and MLSD are applied to the directory.\n"],["login","Net::FTP","Net/FTP.html#method-i-login","(user = \"anonymous\", passwd = nil, acct = nil)","<p>Logs in to the remote host.  The session must have been previously connected.  If <code>user</code> is the string …\n"],["ls","Net::FTP","Net/FTP.html#method-i-ls","(*args)",""],["mdtm","Net::FTP","Net/FTP.html#method-i-mdtm","(filename)","<p>Returns the raw last modification time of the (remote) file in the format “YYYYMMDDhhmmss” …\n"],["mkdir","Net::FTP","Net/FTP.html#method-i-mkdir","(dirname)","<p>Creates a remote directory.\n"],["mlsd","Net::FTP","Net/FTP.html#method-i-mlsd","(pathname = nil)","<p>Returns an array of the entries of the directory specified by <code>pathname</code>. Each entry has the facts (e.g. …\n"],["mlst","Net::FTP","Net/FTP.html#method-i-mlst","(pathname = nil)","<p>Returns data (e.g., size, last modification time, entry type, etc.) about the file or directory specified …\n"],["mtime","Net::FTP","Net/FTP.html#method-i-mtime","(filename, local = false)","<p>Returns the last modification time of the (remote) file.  If <code>local</code> is <code>true</code>, it is returned as a local …\n"],["new","Net::FTP","Net/FTP.html#method-c-new","(host = nil, user_or_options = {}, passwd = nil, acct = nil)","<p>Creates and returns a new <code>FTP</code> object. If a <code>host</code> is given, a connection is made.\n<p><code>options</code> is an option hash, …\n"],["new","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-c-new","(facts, pathname)",""],["nlst","Net::FTP","Net/FTP.html#method-i-nlst","(dir = nil)","<p>Returns an array of filenames in the remote directory.\n"],["noop","Net::FTP","Net/FTP.html#method-i-noop","()","<p>Issues a NOOP command.\n<p>Does nothing except return a response.\n"],["open","Net::FTP","Net/FTP.html#method-c-open","(host, *args)","<p>A synonym for <code>FTP.new</code>, but with a mandatory host parameter.\n<p>If a block is given, it is passed the <code>FTP</code> …\n"],["option","Net::FTP","Net/FTP.html#method-i-option","(name, params = nil)","<p>Issues an OPTS command\n<p>name Should be the name of the option to set\n<p>params is any optional parameters to …\n"],["parse_mlsx_entry","Net::FTP","Net/FTP.html#method-i-parse_mlsx_entry","(entry)",""],["parse_pasv_ipv4_host","Net::FTP","Net/FTP.html#method-i-parse_pasv_ipv4_host","(s)",""],["parse_pasv_ipv6_host","Net::FTP","Net/FTP.html#method-i-parse_pasv_ipv6_host","(s)",""],["parse_pasv_port","Net::FTP","Net/FTP.html#method-i-parse_pasv_port","(s)",""],["purgeable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-purgeable-3F","()","<p>Returns <code>true</code> if the objects in the directory may be deleted, or the directory may be purged.\n"],["put","Net::FTP","Net/FTP.html#method-i-put","(localfile, remotefile = File.basename(localfile), blocksize = DEFAULT_BLOCKSIZE, &block)","<p>Transfers <code>localfile</code> to the server in whatever mode the session is set (text or binary).  See #puttextfile …\n"],["putbinaryfile","Net::FTP","Net/FTP.html#method-i-putbinaryfile","(localfile, remotefile = File.basename(localfile), blocksize = DEFAULT_BLOCKSIZE)","<p>Transfers <code>localfile</code> to the server in binary mode, storing the result in <code>remotefile</code>. If a block is supplied, …\n"],["puttextfile","Net::FTP","Net/FTP.html#method-i-puttextfile","(localfile, remotefile = File.basename(localfile))","<p>Transfers <code>localfile</code> to the server in ASCII (text) mode, storing the result in <code>remotefile</code>. If callback …\n"],["pwd","Net::FTP","Net/FTP.html#method-i-pwd","()","<p>Returns the current remote directory.\n"],["quit","Net::FTP","Net/FTP.html#method-i-quit","()","<p>Exits the FTP session.\n"],["read_timeout=","Net::FTP","Net/FTP.html#method-i-read_timeout-3D","(sec)","<p>Setter for the read_timeout attribute.\n"],["readable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-readable-3F","()","<p>Returns <code>true</code> if the RETR command may be applied to the file.\n"],["renamable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-renamable-3F","()","<p>Returns <code>true</code> if the file or directory may be renamed by RNFR.\n"],["rename","Net::FTP","Net/FTP.html#method-i-rename","(fromname, toname)","<p>Renames a file on the server.\n"],["retrbinary","Net::FTP","Net/FTP.html#method-i-retrbinary","(cmd, blocksize, rest_offset = nil)","<p>Puts the connection into binary (image) mode, issues the given command, and fetches the data returned, …\n"],["retrlines","Net::FTP","Net/FTP.html#method-i-retrlines","(cmd)","<p>Puts the connection into ASCII (text) mode, issues the given command, and passes the resulting data, …\n"],["rmdir","Net::FTP","Net/FTP.html#method-i-rmdir","(dirname)","<p>Removes a remote directory.\n"],["sendcmd","Net::FTP","Net/FTP.html#method-i-sendcmd","(cmd)","<p>Sends a command and returns the response.\n"],["set_socket","Net::FTP","Net/FTP.html#method-i-set_socket","(sock, get_greeting = true)","<p>Set the socket used to connect to the FTP server.\n<p>May raise FTPReplyError if <code>get_greeting</code> is false.\n"],["site","Net::FTP","Net/FTP.html#method-i-site","(arg)","<p>Issues a SITE command.\n"],["size","Net::FTP","Net/FTP.html#method-i-size","(filename)","<p>Returns the size of the given (remote) filename.\n"],["start_tls_session","Net::FTP","Net/FTP.html#method-i-start_tls_session","(sock)",""],["status","Net::FTP","Net/FTP.html#method-i-status","(pathname = nil)","<p>Returns the status (STAT command).\n<p>pathname &mdash; when stat is invoked with pathname as a parameter it acts …\n\n"],["storbinary","Net::FTP","Net/FTP.html#method-i-storbinary","(cmd, file, blocksize, rest_offset = nil)","<p>Puts the connection into binary (image) mode, issues the given server-side command (such as “STOR …\n"],["storlines","Net::FTP","Net/FTP.html#method-i-storlines","(cmd, file)","<p>Puts the connection into ASCII (text) mode, issues the given server-side command (such as “STOR …\n"],["system","Net::FTP","Net/FTP.html#method-i-system","()","<p>Returns system information.\n"],["voidcmd","Net::FTP","Net/FTP.html#method-i-voidcmd","(cmd)","<p>Sends a command and expect a response beginning with ‘2’.\n"],["writable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-writable-3F","()","<p>Returns <code>true</code> if the STOR command may be applied to the file.\n"]]}}