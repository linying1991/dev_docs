var search_data = {"index":{"searchIndex":["coreextensions","tcpsocketext","initializer","gem","availableset","basicspecification","bundlerversionfinder","command","commandlineerror","commandmanager","commands","buildcommand","certcommand","checkcommand","cleanupcommand","contentscommand","dependencycommand","environmentcommand","execcommand","fetchcommand","generateindexcommand","helpcommand","infocommand","installcommand","listcommand","lockcommand","mirrorcommand","opencommand","outdatedcommand","ownercommand","pristinecommand","pushcommand","querycommand","rdoccommand","searchcommand","servercommand","setupcommand","makedirs","signincommand","signoutcommand","sourcescommand","specificationcommand","stalecommand","uninstallcommand","unpackcommand","updatecommand","whichcommand","yankcommand","configfile","conflicterror","consoleui","defaultuserinteraction","dependency","dependencyerror","dependencyinstaller","dependencylist","dependencyremovalexception","dependencyresolutionerror","deprecate","doctor","documenterror","endofyamlexception","errorreason","exception","ext","builderror","builder","cargobuilder","dylibnotfounderror","linkflagconverter","cmakebuilder","configurebuilder","extconfbuilder","rakebuilder","filepermissionerror","formatexception","gemnotfoundexception","gemnotinhomeexception","gemrunner","gemcutterutilities","webauthnlistener","badrequestresponse","methodnotallowedresponse","nocontentresponse","notfoundresponse","okresponse","response","socketresponder","webauthnpoller","impossibledependencieserror","indexer","installerror","installupdateoptions","installer","fakepackage","installeruninstallerutils","invalidspecificationexception","licenses","list","loaderror","localremoteoptions","missingspecerror","missingspecversionerror","mockgemui","inputeoferror","systemexitexception","tty","termerror","nametuple","noaliasyamltree","operationnotsupportederror","optionparser","ac","acceptables","ambiguousargument","ambiguousoption","arguable","completinghash","completion","invalidargument","invalidoption","list","missingargument","needlessargument","optionmap","parseerror","switch","noargument","optionalargument","placedargument","requiredargument","package","digestio","error","formaterror","nonseekableio","old","patherror","symlinkerror","tarheader","tarinvaliderror","tarreader","entry","unexpectedeof","tarwriter","boundedstream","fileoverflow","restrictedstream","toolongfilename","packagetask","pathsupport","platform","platformmismatch","queryutils","remoteerror","remotefetcher","fetcherror","unknownhosterror","remoteinstallationcancelled","remoteinstallationskipped","remotesourceexception","request","requestset","gemdependencyapi","lockfile","parseerror","parser","tokenizer","requirement","badrequirementerror","resolver","apiset","gemparser","apispecification","activationrequest","bestset","composedset","conflict","currentset","dependencyrequest","gitset","gitspecification","indexset","indexspecification","installedspecification","installerset","localspecification","lockset","lockspecification","molinillo","circulardependencyerror","delegates","resolutionstate","specificationprovider","dependencygraph","action","addedgenocircular","deleteedge","detachvertexnamed","log","tag","vertex","dependencystate","nosuchdependencyerror","possibilitystate","resolutionstate","resolver","resolution","conflict","possibilityset","unwinddetails","resolvererror","specificationprovider","ui","versionconflict","requirementlist","set","sourceset","specspecification","specification","stats","vendorset","vendorspecification","rubyversionmismatch","runtimerequirementnotmeterror","s3urisigner","configurationerror","instanceprofileerror","safeyaml","security","exception","policy","signer","trustdir","securityoption","silentui","nullio","source","git","installed","local","lock","specificfile","vendor","sourcefetchproblem","sourcelist","specfetcher","specificgemnotfoundexception","specification","specificationpolicy","streamui","silentdownloadreporter","silentprogressreporter","simpleprogressreporter","threadeddownloadreporter","verboseprogressreporter","stubspecification","systemexitexception","tsort","cyclic","text","uninstallerror","uninstaller","unknowncommanderror","unknowncommandspellchecker","unsatisfiabledependencyerror","updatesuggestion","uri","uriformatter","userinteraction","util","validator","verificationerror","version","versionoption","webauthnverificationerror","kernel","<<()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","===()","===()","===()","=~()","=~()","=~()","[]()","[]()","[]=()","_ac_arg_enable()","_check_ac_args()","_dump()","_gets_noecho()","_load()","_path_to?()","_recursive_predecessors()","_recursive_successors()","_segments()","_sorted_requirements()","_split_segments()","_tilde_requirements()","_version()","abbreviate()","abort()","ac_arg_disable()","ac_arg_enable()","ac_arg_with()","accept()","accept()","accept()","accept_uri_http()","action_name()","action_name()","action_name()","action_name()","action_name()","activate()","activate!()","activate_dependencies()","activate_new_spec()","activated()","activated?()","activated_gem_paths()","active_count()","add()","add()","add()","add_git()","add_access_control_headers()","add_access_control_headers()","add_always_install()","add_bindir()","add_body()","add_bulk_threshold_option()","add_checksums()","add_child_vertex()","add_clear_sources_option()","add_common_option()","add_connection_header()","add_dependency()","add_dependency_with_type()","add_development_dependency()","add_edge()","add_edge_no_circular()","add_edge_no_circular()","add_extra_args()","add_file()","add_file_digest()","add_file_signed()","add_file_simple()","add_install_update_options()","add_key_option()","add_local()","add_local_remote_options()","add_option()","add_otp_option()","add_owners()","add_parser_run_info()","add_path()","add_platform()","add_platform_option()","add_prerelease_option()","add_proxy_option()","add_query_options()","add_runtime_dependency()","add_security_option()","add_self_to_load_path()","add_source_gem()","add_source_option()","add_spec()","add_specific_extra_args()","add_symlink()","add_to_load_path()","add_update_sources_option()","add_version_option()","add_vertex()","add_vertex()","additional_message()","after_resolution()","alert()","alert()","alert_error()","alert_error()","alert_warning()","alert_warning()","alien()","all()","all=()","all_names()","all_requirements()","all_specs()","allow_missing?()","allow_missing?()","allow_missing?()","already_loaded?()","alt_name_or_x509_entry()","amount_constrained()","ancestor?()","announce_deletion_of()","api_key()","api_key_forbidden?()","api_keys()","app_script_text()","append()","approximate_recommendation()","args()","arguments()","array_attributes()","ask()","ask()","ask()","ask_for_password()","ask_for_password()","ask_yes_no()","ask_yes_no()","at()","attach_correctable()","attempt_to_activate()","attempt_to_filter_existing_spec()","attribute_names()","author()","author=()","authors()","authors=()","available_specs()","backtrace()","backtrace()","backtracking!()","banner()","base()","base64_uri_escape()","base_dir()","base_dir()","bash_prolog_script()","before_resolution()","begins?()","bin_dir()","bin_file()","bin_file_names()","bin_path()","binary_mode()","binding_requirement_in_set?()","binding_requirements_for_conflict()","bindir()","body()","body()","body()","both?()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build_args()","build_args()","build_args()","build_args=()","build_details_for_unwind()","build_env()","build_extensions()","build_extensions()","build_gem()","build_http_response()","build_indices()","build_info_dir()","build_info_file()","build_marshal_gemspecs()","build_message()","build_message()","build_modern_index()","build_modern_indices()","build_package()","bump()","bundle_update_bundler_version()","bundler_version()","bytes_read()","cache_dir()","cache_dir()","cache_file()","cache_home()","cache_update_path()","calculate_checksum()","candidate()","candidate()","candidate()","canonical_segments()","cargo()","cargo_command()","cargo_crate_name()","cargo_dylib_path()","cargo_rustc_args()","cert_files()","cert_path()","certificates_matching()","check_cert()","check_chain()","check_closed()","check_credentials_permissions()","check_data()","check_deprecated_options()","check_executable()","check_gems()","check_installed_gems()","check_installed_gems?()","check_key()","check_openssl()","check_root()","check_ruby_version()","check_trust()","check_typo_squatting()","choose_from_list()","choose_from_list()","ci?()","class_name()","clean_gems()","clean_text()","clear()","clear()","clear_default_specs()","clear_paths()","close()","close()","close()","close()","close()","close_all()","closed?()","closed?()","code()","code()","code()","code()","code()","code()","command_names()","common_options()","compact_specs()","complain()","complete()","complete()","compose_sets()","compress()","compress_indices()","concat()","config_file()","config_file_name()","config_home()","configuration()","configuration=()","configure_connection_for_https()","configure_options()","conflict_fixing_possibilities?()","conflicting_dependencies()","conflicting_dependencies()","conflicts()","conflicts()","connection_for()","consider_local?()","consider_remote?()","contains_requirable_file?()","contents()","contents()","convert()","convert()","copy_to()","copy_to()","correct?()","correct_for_windows_path()","corrections()","create()","create()","create()","create_cert()","create_cert_email()","create_cert_self_signed()","create_conflict()","create_digest()","create_key()","create_option_parser()","create_request_pool()","credentials_path()","darwin_target?()","data_home()","datadir()","datadir()","date()","date=()","debug()","debug()","debug?()","debug?()","def_head_option()","def_option()","def_tail_option()","default()","default_bindir()","default_cert_path()","default_dir()","default_dir()","default_exec_format()","default_ext_dir_for()","default_gem?()","default_gem_load_paths()","default_host?()","default_key_path()","default_path()","default_path()","default_prerelease()","default_rubygems_dirs()","default_sources()","default_spec_cache_dir()","default_spec_file()","default_spec_matches?()","default_specifications_dir()","default_specifications_dir()","default_specs_that_match()","default_stubs()","default_value()","defaults_str()","defaults_str()","define()","define()","define_by_keywords()","define_head()","define_tail()","deflate()","delete()","delete_edge()","delete_edge()","delete_first()","dependencies()","dependencies()","dependencies()","dependencies_equal?()","dependencies_equal?()","dependencies_for()","dependencies_for()","dependencies_for()","dependency()","dependency_order()","dependent_gems()","dependent_specs()","deprecate()","deprecate_option()","deprecated?()","deprecation_warning()","depth()","descendent?()","description()","description()","description=()","detach_vertex_named()","detach_vertex_named()","detect()","development?()","development?()","development_dependencies()","dir()","dir()","directory?()","dirs()","dirs=()","display()","display_header()","do_configuration()","doc_dir()","doctor()","doctor()","done()","done()","done()","done()","done()","done_installing()","down()","down()","down()","down()","down()","download()","download()","download()","download()","download()","download_reporter()","download_to_cache()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each_certificate()","each_const()","each_entry()","each_option()","each_source()","each_spec()","each_strongly_connected_component()","each_strongly_connected_component()","each_strongly_connected_component_from()","each_strongly_connected_component_from()","ec2_metadata_credentials_json()","ec2_metadata_request()","eglible_for_update?()","email_to_name()","empty()","empty?()","empty?()","empty?()","empty?()","empty?()","end_resolution()","enforce_trailing_slash()","ensure_default_gem_subdirectories()","ensure_dependency()","ensure_gem_subdirectories()","ensure_loadable_spec()","entry_details()","entry_versions()","env_requirement()","environment()","eof?()","eql?()","eql?()","eql?()","eql?()","eql?()","error()","error_message()","errors()","errors()","escape()","exact?()","exec_format()","executable()","executable=()","executables()","executables=()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","expand()","explain()","explanation()","explicit?()","explicit_version_requirement()","extend_object()","extension_dir()","extension_nesting()","extensions()","extensions=()","extensions_dir()","extra_args()","extra_args=()","extra_rdoc_files()","extra_rdoc_files=()","extract_bin()","extract_files()","extract_files()","extract_files()","extract_files()","fetch()","fetch()","fetch()","fetch_file()","fetch_http()","fetch_https()","fetch_otp()","fetch_path()","fetch_s3()","fetch_s3_config()","fetch_spec()","fetch_spec()","fetcher()","fetcher()","file?()","file_name()","files()","files=()","files_in()","files_in()","files_in_default_gem()","files_in_gem()","filter_backtrace()","filter_possibilities_after_unwind()","filter_possibilities_for_parent_unwind()","filter_possibilities_for_primary_unwind()","filtered_possibility_set()","find_active_stub_by_path()","find_alias_command()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all_by_full_name()","find_all_by_name()","find_all_satisfiers()","find_by_full_name()","find_by_name()","find_by_path()","find_command()","find_command_possibilities()","find_config_file()","find_files()","find_files_for_gem()","find_gem()","find_gemspec()","find_home()","find_in_cache()","find_in_unresolved()","find_in_unresolved_tree()","find_inactive_by_path()","find_latest_files()","find_name()","find_paths()","find_spec_for_exe()","find_state_for()","find_unresolved_default_spec()","finish_resolve()","first()","flush()","flush()","for()","for_cache()","for_current_gems()","for_spec()","for_spec?()","format_text()","format_time()","formatted_program_filename()","freeze()","from()","from()","from_file()","from_list()","from_specs()","from_yaml()","full_gem_path()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_require_paths()","full_spec()","gem()","gem()","gem()","gem()","gem_contents()","gem_dir()","gem_dir()","gem_file_list()","gem_install_dir()","gem_name()","gem_name?()","gem_repository?()","gemdeps_load()","gems_dir()","gems_dir()","gemspec()","gemspec_stubs_in()","generate_bin_script()","generate_bin_symlink()","generate_canonical_query_params()","generate_canonical_request()","generate_default_dirs()","generate_default_man_dir()","generate_index()","generate_signature()","generate_string_to_sign()","generate_windows_script()","get_all_gem_names()","get_all_gem_names_and_versions()","get_candidate_gems()","get_candidates()","get_cert_files()","get_env_editor()","get_gems_to_cleanup()","get_hosts_for()","get_key_name()","get_mfa_params()","get_one_gem_name()","get_one_optional_argument()","get_owner_scope()","get_path()","get_platform_from_requirements()","get_primary_gems()","get_proxy_from_env()","get_public_key()","get_push_scope()","get_relative_path()","get_scope_params()","get_set()","get_user_profile()","get_version_from_requirements()","get_yank_scope()","getc()","getopts()","getopts()","getopts()","gets()","git()","git_path()","git_source()","glob_files_in_dir()","group()","group_possibilities()","guess()","gunzip()","gzip()","gzip()","gzip_to()","handle_arguments()","handle_missing_or_push_dependency_state()","handle_options()","handle_options()","handles?()","has_conflicts?()","hash()","hash()","hash()","hash()","hash()","have_extensions?()","have_file?()","header()","help()","host()","host()","host=()","https?()","identity()","implicit?()","import()","inc()","inc()","include?()","incompatible_argument_styles()","incompatible_argument_styles()","indicate_progress()","indicate_progress()","inflate()","inherited()","init()","initialize()","initialize_copy()","initialize_copy()","initialize_copy()","inject_into_list()","input()","inspect()","inspect()","inspect()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install_default_bundler_gem()","install_executables()","install_file()","install_file_list()","install_from_gemdeps()","install_hooks()","install_if_needed()","install_indices()","install_into()","install_lib()","install_rdoc()","install_update_defaults_str()","install_update_options()","installable?()","installable_platform?()","installable_platform?()","installable_platform?()","installation_satisfies_dependency?()","installed?()","installed?()","installed_specs()","installed_stubs()","instance()","instance()","invalidate_memoized_attributes()","invoke()","invoke_command()","invoke_with_build_args()","is_reachable_from?()","issuer_of()","iteration!()","java_platform?()","keep_only_files_and_directories()","last_update_check()","last_update_check=()","latest_rubygems_version()","latest_spec_for()","latest_spec_for()","latest_specs()","latest_version()","latest_version?()","latest_version_for()","ldflag_to_link_modifier()","length()","levenshtein_distance()","lib_dirs_glob()","lib_files()","libruby_args()","license()","license=()","licenses()","licenses=()","lines()","linker_args()","listener_thread()","load()","load()","load()","load()","load!()","load_and_instantiate()","load_api_keys()","load_certificate()","load_default_cert()","load_default_key()","load_defaults()","load_env_plugins()","load_file()","load_gemdeps()","load_path_insert_index()","load_plugin()","load_plugins()","load_relative_enabled?()","load_specs()","load_yaml()","local()","local?()","location_of_caller()","locked_puts()","locked_requirement_named()","locked_requirement_possibility_set()","lockfile_contents()","lockfile_version()","make()","make_destination_dirs()","make_edge()","make_edge()","make_entry()","make_parser()","make_switch()","make_temp_directories()","makefile_config()","manage_owners()","map_gems_to_specs()","mark_version()","marshal_dump()","marshal_load()","marshal_version()","match()","match()","match?()","match?()","match?()","match_gem?()","match_platform!()","match_platform?()","match_platforms?()","match_spec?()","matches_for_glob()","matches_spec?()","matches_spec?()","matching_specs()","maybe_resolve_ldflag_variable()","merge()","merge_options()","message()","message()","message()","message_with_trees()","metadata_satisfied?()","method_missing()","mfa_unauthorized?()","mingw_target?()","missing_extensions?()","mkdir()","mkdir_p()","mkmf_libpath()","msvc_target?()","mswin_link_args()","name()","name()","name()","name()","name()","name()","name_for()","name_for()","name_for()","name_for_explicit_dependency_source()","name_for_explicit_dependency_source()","name_for_locking_dependency_source()","name_for_locking_dependency_source()","name_path()","name_pattern()","name_tuple()","name_tuple()","needs()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_vertex_set()","next5()","next_token()","nil_versions_are_discouraged!()","noecho()","non_nil_attributes()","none?()","normalize()","normalize()","normalize_path()","normalize_path()","normalize_yaml_input()","normalized_linux_version()","null()","oauth_basic?()","oct()","oct_or_256based()","ok?()","ok_to_remove?()","oldest_supported_version()","on()","on_head()","on_tail()","open()","open_cert()","open_editor()","open_file()","open_gem()","open_private_key()","operating_system_defaults()","option_is_deprecated?()","options()","options=()","order()","order!()","order!()","otp()","outdated()","outdated_and_latest_version()","output()","output()","output()","output_query_results()","output_versions()","paranoid()","parent()","parent_of()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse!()","parse!()","parse!()","parse!()","parse_dependency()","parse_gem()","parse_otp_from_uri()","parser()","password?()","path()","path()","path_ok?()","path_separator()","path_to?()","paths()","paths=()","pattern()","pattern()","peek()","permute()","permute!()","permute!()","pick_best!()","pin_gem_source()","platform()","platform()","platform()","platform()","platform()","platform=()","platform_defaults()","platform_specific_rustc_args()","platforms()","platforms()","platforms=()","plugin_suffix_pattern()","plugin_suffix_regexp()","plugindir()","plugins()","poll_for_otp()","poll_thread()","pools_for()","pop!()","pop_possibility_state()","popen()","pos()","pos=()","possibilities()","possibilities_for_requirement()","possibility()","possibility()","possibility_satisfies_requirements?()","post_build()","post_install()","post_reset()","post_uninstall()","pre_install()","pre_install_checks()","pre_reset()","pre_uninstall()","predecessors()","prefetch()","prefetch()","prefetch()","prefetch()","prefetch()","prefetch()","prefix()","preparing_gem_layout_for()","prepend()","prepend()","prepend()","prepend_destdir_if_present()","prepended()","prerelease()","prerelease=()","prerelease=()","prerelease?()","prerelease?()","prerelease?()","prerelease?()","pretty_host()","print()","print_command()","prioritize!()","prioritizes_bundler?()","process_args()","process_topmost_state()","program_name()","progress_rate()","progress_reporter()","proxy_for()","proxy_uri()","push_action()","push_initial_state()","push_state_for_requirements()","puts()","raise_error_unless_state()","raw_spec()","rb_config()","rb_config_env()","rdoc_options()","rdoc_options=()","re_sign()","re_sign_cert()","re_sign_cert()","read()","read_binary()","read_checksums()","readpartial()","really_verbose()","reason()","reason_phrase()","reason_phrase()","reason_phrase()","reason_phrase()","reason_phrase()","reason_phrase()","record_depth()","record_requirements()","recover()","recursive_predecessors()","recursive_successors()","redact()","redact_credentials_from()","redacted()","refresh()","regenerate_binstubs()","regenerate_plugins()","regenerate_plugins()","regenerate_plugins_for()","regexp()","register()","register_command()","register_default_spec()","reject()","reject()","reject()","release()","release()","remote=()","remote?()","remove()","remove()","remove()","remove_all()","remove_by_name()","remove_executables()","remove_file_list()","remove_installed!()","remove_old_bin_files()","remove_old_lib_files()","remove_old_man_files()","remove_option()","remove_owners()","remove_plugins_for()","remove_spec()","remove_specs_unsatisfied_by()","removed_method_calls()","replace()","request()","request_context()","request_path()","request_with_otp()","requester()","requests()","require()","require_io_console()","require_nested_dependencies_for()","require_path()","require_path=()","require_paths()","require_paths=()","required_attribute?()","required_attributes()","required_ruby_version()","required_ruby_version()","required_ruby_version=()","required_rubygems_version()","required_rubygems_version()","required_rubygems_version=()","requirement()","requirement()","requirement()","requirement!()","requirement_for_existing_name()","requirement_satisfied_by?()","requirement_satisfied_by?()","requirement_satisfied_by?()","requirement_tree_for()","requirement_trees()","requirements()","requirements()","requirements()","requirements=()","requirements_list()","reset()","reset()","reset()","reset()","reset_nil_attributes_to_default()","resolve()","resolve()","resolve()","resolve()","resolve_activated_specs()","resolve_current()","resolve_gem_name()","respond_to_missing?()","reverse_each()","reversed_requirement_tree_index()","rewind()","rewind()","rewind_to()","rewind_to()","ri_dir()","root_path?()","root_vertex_named()","ruby()","ruby()","ruby()","ruby_api_version()","ruby_code()","ruby_engine()","ruby_install_name()","ruby_static?()","ruby_version()","rubygems_api_key()","rubygems_api_key=()","rubygems_api_request()","rubygems_deprecate()","rubygems_deprecate()","rubygems_deprecate_command()","rubygems_deprecate_command()","rubygems_target_version()","rubygems_version()","run()","run()","run()","runtime?()","runtime_dependencies()","rustc_dynamic_linker_flags()","rustc_lib_flags()","s3_uri_signer()","safe_delete()","safe_load()","same_attributes?()","sanitize()","sanitize_string()","satisfied_by?()","satisfies_requirement?()","say()","say()","search()","search_const()","search_for()","search_for()","search_for()","search_for_dependency()","seek()","seek()","send()","send_gem()","send_owner_request()","send_push_request()","separator()","set_api_key()","set_api_key()","set_backtrace()","set_config_file_name()","set_gem_exec_install_paths()","set_option()","set_payload()","set_payload()","setup_signer()","shallow_eql?()","shebang()","shebang()","shift()","show_files()","show_gems()","show_help()","show_local_gems()","show_lookup_failure()","show_owners()","show_prereleases?()","show_release_notes()","show_remote_gems()","show_version()","sign()","sign()","sign()","sign()","sign_in()","silent_system()","size()","size()","size()","skip()","skip_during()","skip_during()","so_ext()","solaris_platform?()","sort_dependencies()","sort_dependencies()","sort_dependencies()","sort_obj()","sort_priority()","sorted()","sorted_requests()","source()","source()","source_date_epoch()","source_date_epoch_string()","source_for()","source_paths()","sources()","sources=()","spec()","spec()","spec()","spec()","spec_authors()","spec_cache_dir()","spec_dir()","spec_file()","spec_file()","spec_for()","spec_for()","spec_for_dependency()","spec_groups()","spec_homepage()","spec_license()","spec_loaded_from()","spec_name()","spec_name()","spec_path()","spec_platforms()","spec_predecessors()","spec_summary()","specific?()","specific?()","specific_extra_args()","specific_extra_args_hash()","specs()","specs()","specs_in()","specs_type()","spell_checker()","split_flags()","split_gem_path()","start_resolution()","state()","state_file()","state_file_name()","state_file_writable?()","state_home()","strict_oct()","strongly_connected_components()","strongly_connected_components()","stubbed?()","stubbed?()","stubs()","stubs_for()","sub_dependencies_to_avoid()","successors()","suffix_pattern()","suffix_regexp()","suffixes()","suggest_gems_from_name()","suggestions()","summarize()","summarize()","summarize()","summary=()","suppress_always_install()","switch_name()","symlink?()","tag()","tag()","target_bin_path()","terminate()","terminate()","terminate_interaction()","terminate_interaction()","terminate_interaction()","terminated?()","this()","time()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_basic()","to_dot()","to_fullpath()","to_request_set()","to_ruby()","to_ruby_for_cache()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_spec()","to_spec()","to_spec()","to_specs()","token?()","tokenize()","top()","top()","traverse()","traverse_parents()","truncate_text()","trust_cert()","trust_dir()","trusted_certificates()","try_activate()","tsort()","tsort()","tsort()","tsort_each()","tsort_each()","tsort_each_child()","tsort_each_child()","tsort_each_child()","tsort_each_node()","tsort_each_node()","tsort_each_node()","tty?()","tty?()","tty?()","type()","type()","typo_squatting?()","ui()","ui()","ui()","ui=()","ui=()","unescape()","uninstall()","uninstall()","uninstall_all()","uninstall_dep()","uninstall_gem()","uninstall_gem()","uninstall_old_gemcutter()","uninstall_specific()","unpack()","unregister_command()","unresolved_deps()","unresolved_specs()","unset_api_key!()","unshift()","unused_unwind_options()","unwind_for_conflict()","unwind_options_for_requirements()","unwinding_to_primary_requirement?()","up()","up()","up()","up()","up()","update()","update()","update_cache?()","update_checksum()","update_gem()","update_gems()","update_index()","update_rubygems()","update_scope()","update_specs_index()","update_suggestion()","updated()","updated()","updated()","usage()","use_gemdeps()","use_paths()","use_ui()","use_ui()","user_agent()","user_dir()","user_home()","valid_email?()","valid_uri?()","validate()","validate()","validate_array_attribute()","validate_array_attributes()","validate_attribute_present()","validate_authors_field()","validate_dependencies()","validate_lazy_metadata()","validate_licenses()","validate_licenses_length()","validate_metadata()","validate_metadata()","validate_name()","validate_nil_attributes()","validate_non_files()","validate_optional()","validate_permissions()","validate_permissions()","validate_platform()","validate_require_paths()","validate_required!()","validate_required_attributes()","validate_rubygems_version()","validate_self_inclusion_in_files_list()","validate_shebang_line_in()","validate_specification_version()","validate_values()","ver()","verbose()","verify()","verify()","verify()","verify()","verify_api_key()","verify_certificate()","verify_certificate_message()","verify_entry()","verify_files()","verify_signatures()","verify_spec()","version()","version()","version()","version()","version()","version()","version=()","vertex_named()","visit_string()","wait_for_otp_code()","wait_for_otp_thread()","warn()","warn_cannot_uninstall_default_gems()","warning_without_suggested_alternatives()","webauthn_verification_poll_response()","webauthn_verification_url()","when_invoked()","which_to_update()","why_not_ok?()","win_platform?()","win_target?()","windows_stub_script()","with()","with_no_such_dependency_error_handling()","with_redacted_password()","with_redacted_user()","with_response()","wordy()","wordy()","wrap()","wrap()","write()","write()","write()","write()","write()","write()","write_binary()","write_build_info_file()","write_cache_file()","write_default_spec()","write_deffile()","write_spec()","yank_api_request()","yank_gem()"],"longSearchIndex":["coreextensions","coreextensions::tcpsocketext","coreextensions::tcpsocketext::initializer","gem","gem::availableset","gem::basicspecification","gem::bundlerversionfinder","gem::command","gem::commandlineerror","gem::commandmanager","gem::commands","gem::commands::buildcommand","gem::commands::certcommand","gem::commands::checkcommand","gem::commands::cleanupcommand","gem::commands::contentscommand","gem::commands::dependencycommand","gem::commands::environmentcommand","gem::commands::execcommand","gem::commands::fetchcommand","gem::commands::generateindexcommand","gem::commands::helpcommand","gem::commands::infocommand","gem::commands::installcommand","gem::commands::listcommand","gem::commands::lockcommand","gem::commands::mirrorcommand","gem::commands::opencommand","gem::commands::outdatedcommand","gem::commands::ownercommand","gem::commands::pristinecommand","gem::commands::pushcommand","gem::commands::querycommand","gem::commands::rdoccommand","gem::commands::searchcommand","gem::commands::servercommand","gem::commands::setupcommand","gem::commands::setupcommand::makedirs","gem::commands::signincommand","gem::commands::signoutcommand","gem::commands::sourcescommand","gem::commands::specificationcommand","gem::commands::stalecommand","gem::commands::uninstallcommand","gem::commands::unpackcommand","gem::commands::updatecommand","gem::commands::whichcommand","gem::commands::yankcommand","gem::configfile","gem::conflicterror","gem::consoleui","gem::defaultuserinteraction","gem::dependency","gem::dependencyerror","gem::dependencyinstaller","gem::dependencylist","gem::dependencyremovalexception","gem::dependencyresolutionerror","gem::deprecate","gem::doctor","gem::documenterror","gem::endofyamlexception","gem::errorreason","gem::exception","gem::ext","gem::ext::builderror","gem::ext::builder","gem::ext::cargobuilder","gem::ext::cargobuilder::dylibnotfounderror","gem::ext::cargobuilder::linkflagconverter","gem::ext::cmakebuilder","gem::ext::configurebuilder","gem::ext::extconfbuilder","gem::ext::rakebuilder","gem::filepermissionerror","gem::formatexception","gem::gemnotfoundexception","gem::gemnotinhomeexception","gem::gemrunner","gem::gemcutterutilities","gem::gemcutterutilities::webauthnlistener","gem::gemcutterutilities::webauthnlistener::badrequestresponse","gem::gemcutterutilities::webauthnlistener::methodnotallowedresponse","gem::gemcutterutilities::webauthnlistener::nocontentresponse","gem::gemcutterutilities::webauthnlistener::notfoundresponse","gem::gemcutterutilities::webauthnlistener::okresponse","gem::gemcutterutilities::webauthnlistener::response","gem::gemcutterutilities::webauthnlistener::socketresponder","gem::gemcutterutilities::webauthnpoller","gem::impossibledependencieserror","gem::indexer","gem::installerror","gem::installupdateoptions","gem::installer","gem::installer::fakepackage","gem::installeruninstallerutils","gem::invalidspecificationexception","gem::licenses","gem::list","gem::loaderror","gem::localremoteoptions","gem::missingspecerror","gem::missingspecversionerror","gem::mockgemui","gem::mockgemui::inputeoferror","gem::mockgemui::systemexitexception","gem::mockgemui::tty","gem::mockgemui::termerror","gem::nametuple","gem::noaliasyamltree","gem::operationnotsupportederror","gem::optionparser","gem::optionparser::ac","gem::optionparser::acceptables","gem::optionparser::ambiguousargument","gem::optionparser::ambiguousoption","gem::optionparser::arguable","gem::optionparser::completinghash","gem::optionparser::completion","gem::optionparser::invalidargument","gem::optionparser::invalidoption","gem::optionparser::list","gem::optionparser::missingargument","gem::optionparser::needlessargument","gem::optionparser::optionmap","gem::optionparser::parseerror","gem::optionparser::switch","gem::optionparser::switch::noargument","gem::optionparser::switch::optionalargument","gem::optionparser::switch::placedargument","gem::optionparser::switch::requiredargument","gem::package","gem::package::digestio","gem::package::error","gem::package::formaterror","gem::package::nonseekableio","gem::package::old","gem::package::patherror","gem::package::symlinkerror","gem::package::tarheader","gem::package::tarinvaliderror","gem::package::tarreader","gem::package::tarreader::entry","gem::package::tarreader::unexpectedeof","gem::package::tarwriter","gem::package::tarwriter::boundedstream","gem::package::tarwriter::fileoverflow","gem::package::tarwriter::restrictedstream","gem::package::toolongfilename","gem::packagetask","gem::pathsupport","gem::platform","gem::platformmismatch","gem::queryutils","gem::remoteerror","gem::remotefetcher","gem::remotefetcher::fetcherror","gem::remotefetcher::unknownhosterror","gem::remoteinstallationcancelled","gem::remoteinstallationskipped","gem::remotesourceexception","gem::request","gem::requestset","gem::requestset::gemdependencyapi","gem::requestset::lockfile","gem::requestset::lockfile::parseerror","gem::requestset::lockfile::parser","gem::requestset::lockfile::tokenizer","gem::requirement","gem::requirement::badrequirementerror","gem::resolver","gem::resolver::apiset","gem::resolver::apiset::gemparser","gem::resolver::apispecification","gem::resolver::activationrequest","gem::resolver::bestset","gem::resolver::composedset","gem::resolver::conflict","gem::resolver::currentset","gem::resolver::dependencyrequest","gem::resolver::gitset","gem::resolver::gitspecification","gem::resolver::indexset","gem::resolver::indexspecification","gem::resolver::installedspecification","gem::resolver::installerset","gem::resolver::localspecification","gem::resolver::lockset","gem::resolver::lockspecification","gem::resolver::molinillo","gem::resolver::molinillo::circulardependencyerror","gem::resolver::molinillo::delegates","gem::resolver::molinillo::delegates::resolutionstate","gem::resolver::molinillo::delegates::specificationprovider","gem::resolver::molinillo::dependencygraph","gem::resolver::molinillo::dependencygraph::action","gem::resolver::molinillo::dependencygraph::addedgenocircular","gem::resolver::molinillo::dependencygraph::deleteedge","gem::resolver::molinillo::dependencygraph::detachvertexnamed","gem::resolver::molinillo::dependencygraph::log","gem::resolver::molinillo::dependencygraph::tag","gem::resolver::molinillo::dependencygraph::vertex","gem::resolver::molinillo::dependencystate","gem::resolver::molinillo::nosuchdependencyerror","gem::resolver::molinillo::possibilitystate","gem::resolver::molinillo::resolutionstate","gem::resolver::molinillo::resolver","gem::resolver::molinillo::resolver::resolution","gem::resolver::molinillo::resolver::resolution::conflict","gem::resolver::molinillo::resolver::resolution::possibilityset","gem::resolver::molinillo::resolver::resolution::unwinddetails","gem::resolver::molinillo::resolvererror","gem::resolver::molinillo::specificationprovider","gem::resolver::molinillo::ui","gem::resolver::molinillo::versionconflict","gem::resolver::requirementlist","gem::resolver::set","gem::resolver::sourceset","gem::resolver::specspecification","gem::resolver::specification","gem::resolver::stats","gem::resolver::vendorset","gem::resolver::vendorspecification","gem::rubyversionmismatch","gem::runtimerequirementnotmeterror","gem::s3urisigner","gem::s3urisigner::configurationerror","gem::s3urisigner::instanceprofileerror","gem::safeyaml","gem::security","gem::security::exception","gem::security::policy","gem::security::signer","gem::security::trustdir","gem::securityoption","gem::silentui","gem::silentui::nullio","gem::source","gem::source::git","gem::source::installed","gem::source::local","gem::source::lock","gem::source::specificfile","gem::source::vendor","gem::sourcefetchproblem","gem::sourcelist","gem::specfetcher","gem::specificgemnotfoundexception","gem::specification","gem::specificationpolicy","gem::streamui","gem::streamui::silentdownloadreporter","gem::streamui::silentprogressreporter","gem::streamui::simpleprogressreporter","gem::streamui::threadeddownloadreporter","gem::streamui::verboseprogressreporter","gem::stubspecification","gem::systemexitexception","gem::tsort","gem::tsort::cyclic","gem::text","gem::uninstallerror","gem::uninstaller","gem::unknowncommanderror","gem::unknowncommandspellchecker","gem::unsatisfiabledependencyerror","gem::updatesuggestion","gem::uri","gem::uriformatter","gem::userinteraction","gem::util","gem::validator","gem::verificationerror","gem::version","gem::versionoption","gem::webauthnverificationerror","kernel","gem::availableset#<<()","gem::sourcelist#<<()","gem::dependency#<=>()","gem::nametuple#<=>()","gem::resolver::molinillo::resolver::resolution::unwinddetails#<=>()","gem::source#<=>()","gem::source::git#<=>()","gem::source::installed#<=>()","gem::source::local#<=>()","gem::source::specificfile#<=>()","gem::source::vendor#<=>()","gem::version#<=>()","gem::nametuple#==()","gem::platform#==()","gem::resolver::indexspecification#==()","gem::resolver::molinillo::dependencygraph#==()","gem::resolver::molinillo::dependencygraph::vertex#==()","gem::dependency#===()","gem::platform#===()","gem::requirement#===()","gem::dependency#=~()","gem::platform#=~()","gem::requirement#=~()","gem::commandmanager#[]()","gem::configfile#[]()","gem::configfile#[]=()","gem::optionparser::ac#_ac_arg_enable()","gem::optionparser::ac#_check_ac_args()","gem::specification#_dump()","gem::streamui#_gets_noecho()","gem::specification::_load()","gem::resolver::molinillo::dependencygraph::vertex#_path_to?()","gem::resolver::molinillo::dependencygraph::vertex#_recursive_predecessors()","gem::resolver::molinillo::dependencygraph::vertex#_recursive_successors()","gem::version#_segments()","gem::requirement#_sorted_requirements()","gem::version#_split_segments()","gem::requirement#_tilde_requirements()","gem::version#_version()","gem::specification#abbreviate()","gem::optionparser#abort()","gem::optionparser::ac#ac_arg_disable()","gem::optionparser::ac#ac_arg_enable()","gem::optionparser::ac#ac_arg_with()","gem::optionparser#accept()","gem::optionparser::accept()","gem::optionparser::list#accept()","gem::localremoteoptions#accept_uri_http()","gem::resolver::molinillo::dependencygraph::action::action_name()","gem::resolver::molinillo::dependencygraph::addedgenocircular::action_name()","gem::resolver::molinillo::dependencygraph::deleteedge::action_name()","gem::resolver::molinillo::dependencygraph::detachvertexnamed::action_name()","gem::resolver::molinillo::dependencygraph::tag::action_name()","gem::specification#activate()","gem::commands::execcommand#activate!()","gem::specification#activate_dependencies()","gem::resolver::molinillo::resolver::resolution#activate_new_spec()","gem::resolver::molinillo::delegates::resolutionstate#activated()","gem::basicspecification#activated?()","gem::activated_gem_paths()","gem::dependencylist#active_count()","gem::availableset#add()","gem::dependencylist#add()","gem::resolver::requirementlist#add()","gem::requestset::lockfile#add_git()","gem::gemcutterutilities::webauthnlistener::methodnotallowedresponse#add_access_control_headers()","gem::gemcutterutilities::webauthnlistener::response#add_access_control_headers()","gem::resolver::installerset#add_always_install()","gem::specification#add_bindir()","gem::gemcutterutilities::webauthnlistener::response#add_body()","gem::localremoteoptions#add_bulk_threshold_option()","gem::package#add_checksums()","gem::resolver::molinillo::dependencygraph#add_child_vertex()","gem::localremoteoptions#add_clear_sources_option()","gem::command::add_common_option()","gem::gemcutterutilities::webauthnlistener::response#add_connection_header()","gem::specification#add_dependency()","gem::specification#add_dependency_with_type()","gem::specification#add_development_dependency()","gem::resolver::molinillo::dependencygraph#add_edge()","gem::resolver::molinillo::dependencygraph#add_edge_no_circular()","gem::resolver::molinillo::dependencygraph::log#add_edge_no_circular()","gem::command#add_extra_args()","gem::package::tarwriter#add_file()","gem::package::tarwriter#add_file_digest()","gem::package::tarwriter#add_file_signed()","gem::package::tarwriter#add_file_simple()","gem::installupdateoptions#add_install_update_options()","gem::gemcutterutilities#add_key_option()","gem::resolver::installerset#add_local()","gem::localremoteoptions#add_local_remote_options()","gem::command#add_option()","gem::gemcutterutilities#add_otp_option()","gem::commands::ownercommand#add_owners()","gem::command#add_parser_run_info()","gem::commands::environmentcommand#add_path()","gem::platformmismatch#add_platform()","gem::versionoption#add_platform_option()","gem::versionoption#add_prerelease_option()","gem::localremoteoptions#add_proxy_option()","gem::queryutils#add_query_options()","gem::specification#add_runtime_dependency()","gem::securityoption#add_security_option()","gem::specification#add_self_to_load_path()","gem::resolver::sourceset#add_source_gem()","gem::localremoteoptions#add_source_option()","gem::specification::add_spec()","gem::command::add_specific_extra_args()","gem::package::tarwriter#add_symlink()","gem::add_to_load_path()","gem::localremoteoptions#add_update_sources_option()","gem::versionoption#add_version_option()","gem::resolver::molinillo::dependencygraph#add_vertex()","gem::resolver::molinillo::dependencygraph::log#add_vertex()","gem::optionparser#additional_message()","gem::resolver::molinillo::ui#after_resolution()","gem::streamui#alert()","gem::userinteraction#alert()","gem::streamui#alert_error()","gem::userinteraction#alert_error()","gem::streamui#alert_warning()","gem::userinteraction#alert_warning()","gem::validator#alien()","gem::specification::all()","gem::specification::all=()","gem::specification::all_names()","gem::resolver::molinillo::resolver::resolution::unwinddetails#all_requirements()","gem::availableset#all_specs()","gem::resolver#allow_missing?()","gem::resolver::molinillo::delegates::specificationprovider#allow_missing?()","gem::resolver::molinillo::specificationprovider#allow_missing?()","gem::already_loaded?()","gem::security::alt_name_or_x509_entry()","gem::resolver#amount_constrained()","gem::resolver::molinillo::dependencygraph::vertex#ancestor?()","gem::uninstaller#announce_deletion_of()","gem::gemcutterutilities#api_key()","gem::gemcutterutilities#api_key_forbidden?()","gem::configfile#api_keys()","gem::installer#app_script_text()","gem::optionparser::list#append()","gem::version#approximate_recommendation()","gem::queryutils#args()","gem::command#arguments()","gem::specification::array_attributes()","gem::mockgemui#ask()","gem::streamui#ask()","gem::userinteraction#ask()","gem::streamui#ask_for_password()","gem::userinteraction#ask_for_password()","gem::streamui#ask_yes_no()","gem::userinteraction#ask_yes_no()","gem::installer::at()","gem::unknowncommanderror::attach_correctable()","gem::resolver::molinillo::resolver::resolution#attempt_to_activate()","gem::resolver::molinillo::resolver::resolution#attempt_to_filter_existing_spec()","gem::specification::attribute_names()","gem::specification#author()","gem::specification#author=()","gem::specification#authors()","gem::specification#authors=()","gem::specfetcher#available_specs()","gem::configfile#backtrace()","gem::streamui#backtrace()","gem::resolver::stats#backtracking!()","gem::optionparser#banner()","gem::optionparser#base()","gem::s3urisigner#base64_uri_escape()","gem::basicspecification#base_dir()","gem::specification#base_dir()","gem::installer#bash_prolog_script()","gem::resolver::molinillo::ui#before_resolution()","gem::command#begins?()","gem::specification#bin_dir()","gem::specification#bin_file()","gem::commands::setupcommand#bin_file_names()","gem::bin_path()","gem::binary_mode()","gem::resolver::molinillo::resolver::resolution#binding_requirement_in_set?()","gem::resolver::molinillo::resolver::resolution#binding_requirements_for_conflict()","gem::bindir()","gem::gemcutterutilities::webauthnlistener::badrequestresponse#body()","gem::gemcutterutilities::webauthnlistener::okresponse#body()","gem::gemcutterutilities::webauthnlistener::response#body()","gem::localremoteoptions#both?()","gem::commands::certcommand#build()","gem::ext::cargobuilder#build()","gem::ext::cmakebuilder::build()","gem::ext::configurebuilder::build()","gem::ext::extconfbuilder::build()","gem::ext::rakebuilder::build()","gem::package::build()","gem::package#build()","gem::requestset::lockfile::build()","gem::command::build_args()","gem::installer#build_args()","gem::specification#build_args()","gem::command::build_args=()","gem::resolver::molinillo::resolver::resolution#build_details_for_unwind()","gem::ext::cargobuilder#build_env()","gem::ext::builder#build_extensions()","gem::installer#build_extensions()","gem::commands::buildcommand#build_gem()","gem::gemcutterutilities::webauthnlistener::response#build_http_response()","gem::indexer#build_indices()","gem::specification#build_info_dir()","gem::specification#build_info_file()","gem::indexer#build_marshal_gemspecs()","gem::missingspecerror#build_message()","gem::missingspecversionerror#build_message()","gem::indexer#build_modern_index()","gem::indexer#build_modern_indices()","gem::commands::buildcommand#build_package()","gem::version#bump()","gem::bundlerversionfinder::bundle_update_bundler_version()","gem::bundlerversionfinder::bundler_version()","gem::package::tarreader::entry#bytes_read()","gem::source#cache_dir()","gem::specification#cache_dir()","gem::specification#cache_file()","gem::cache_home()","gem::remotefetcher#cache_update_path()","gem::package::tarheader#calculate_checksum()","gem::optionparser#candidate()","gem::optionparser::completion::candidate()","gem::optionparser::completion#candidate()","gem::version#canonical_segments()","gem::ext::cargobuilder#cargo()","gem::ext::cargobuilder#cargo_command()","gem::ext::cargobuilder#cargo_crate_name()","gem::ext::cargobuilder#cargo_dylib_path()","gem::ext::cargobuilder#cargo_rustc_args()","gem::request#cert_files()","gem::security::trustdir#cert_path()","gem::commands::certcommand#certificates_matching()","gem::security::policy#check_cert()","gem::security::policy#check_chain()","gem::package::tarwriter#check_closed()","gem::configfile#check_credentials_permissions()","gem::security::policy#check_data()","gem::command#check_deprecated_options()","gem::commands::execcommand#check_executable()","gem::commands::checkcommand#check_gems()","gem::queryutils#check_installed_gems()","gem::queryutils#check_installed_gems?()","gem::security::policy#check_key()","gem::commands::certcommand#check_openssl()","gem::security::policy#check_root()","gem::commands::setupcommand#check_ruby_version()","gem::security::policy#check_trust()","gem::commands::sourcescommand#check_typo_squatting()","gem::streamui#choose_from_list()","gem::userinteraction#choose_from_list()","gem::updatesuggestion#ci?()","gem::ext::builder::class_name()","gem::commands::cleanupcommand#clean_gems()","gem::text#clean_text()","gem::dependencylist#clear()","gem::sourcelist#clear()","gem::clear_default_specs()","gem::clear_paths()","gem::package::tarreader#close()","gem::package::tarreader::entry#close()","gem::package::tarwriter#close()","gem::silentui#close()","gem::streamui#close()","gem::remotefetcher#close_all()","gem::package::tarreader::entry#closed?()","gem::package::tarwriter#closed?()","gem::gemcutterutilities::webauthnlistener::badrequestresponse#code()","gem::gemcutterutilities::webauthnlistener::methodnotallowedresponse#code()","gem::gemcutterutilities::webauthnlistener::nocontentresponse#code()","gem::gemcutterutilities::webauthnlistener::notfoundresponse#code()","gem::gemcutterutilities::webauthnlistener::okresponse#code()","gem::gemcutterutilities::webauthnlistener::response#code()","gem::commandmanager#command_names()","gem::command::common_options()","gem::indexer#compact_specs()","gem::commands::lockcommand#complain()","gem::optionparser::completion#complete()","gem::optionparser::list#complete()","gem::resolver::compose_sets()","gem::indexer#compress()","gem::indexer#compress_indices()","gem::requirement#concat()","gem::config_file()","gem::configfile#config_file_name()","gem::config_home()","gem::configuration()","gem::configuration=()","gem::request::configure_connection_for_https()","gem::command#configure_options()","gem::resolver::molinillo::resolver::resolution#conflict_fixing_possibilities?()","gem::dependencyresolutionerror#conflicting_dependencies()","gem::resolver::conflict#conflicting_dependencies()","gem::resolver::molinillo::delegates::resolutionstate#conflicts()","gem::specification#conflicts()","gem::request#connection_for()","gem::dependencyinstaller#consider_local?()","gem::dependencyinstaller#consider_remote?()","gem::basicspecification#contains_requirable_file?()","gem::package#contents()","gem::package::old#contents()","gem::ext::cargobuilder::linkflagconverter::convert()","gem::optionparser::completion#convert()","gem::installer::fakepackage#copy_to()","gem::package#copy_to()","gem::version::correct?()","gem::util::correct_for_windows_path()","gem::unknowncommandspellchecker#corrections()","gem::noaliasyamltree::create()","gem::requirement::create()","gem::version::create()","gem::security::create_cert()","gem::security::create_cert_email()","gem::security::create_cert_self_signed()","gem::resolver::molinillo::resolver::resolution#create_conflict()","gem::security::create_digest()","gem::security::create_key()","gem::command#create_option_parser()","gem::s3urisigner#create_request_pool()","gem::configfile#credentials_path()","gem::ext::cargobuilder#darwin_target?()","gem::data_home()","gem::datadir()","gem::basicspecification#datadir()","gem::specification#date()","gem::specification#date=()","gem::resolver::molinillo::resolver::resolution#debug()","gem::resolver::molinillo::ui#debug()","gem::resolver#debug?()","gem::resolver::molinillo::ui#debug?()","gem::optionparser#def_head_option()","gem::optionparser#def_option()","gem::optionparser#def_tail_option()","gem::requirement::default()","gem::default_bindir()","gem::default_cert_path()","gem::default_dir()","gem::commands::setupcommand#default_dir()","gem::default_exec_format()","gem::default_ext_dir_for()","gem::basicspecification#default_gem?()","gem::default_gem_load_paths()","gem::gemcutterutilities#default_host?()","gem::default_key_path()","gem::default_path()","gem::pathsupport#default_path()","gem::requirement::default_prerelease()","gem::default_rubygems_dirs()","gem::default_sources()","gem::default_spec_cache_dir()","gem::installer#default_spec_file()","gem::uninstaller#default_spec_matches?()","gem::default_specifications_dir()","gem::basicspecification::default_specifications_dir()","gem::uninstaller#default_specs_that_match()","gem::specification::default_stubs()","gem::specification#default_value()","gem::command#defaults_str()","gem::commands::infocommand#defaults_str()","gem::optionparser#define()","gem::packagetask#define()","gem::optionparser#define_by_keywords()","gem::optionparser#define_head()","gem::optionparser#define_tail()","gem::deflate()","gem::sourcelist#delete()","gem::resolver::molinillo::dependencygraph#delete_edge()","gem::resolver::molinillo::dependencygraph::log#delete_edge()","gem::resolver::molinillo::dependencygraph::addedgenocircular#delete_first()","gem::resolver::indexspecification#dependencies()","gem::resolver::specspecification#dependencies()","gem::specification#dependencies()","gem::resolver::molinillo::delegates::specificationprovider#dependencies_equal?()","gem::resolver::molinillo::specificationprovider#dependencies_equal?()","gem::resolver#dependencies_for()","gem::resolver::molinillo::delegates::specificationprovider#dependencies_for()","gem::resolver::molinillo::specificationprovider#dependencies_for()","gem::impossibledependencieserror#dependency()","gem::dependencylist#dependency_order()","gem::specification#dependent_gems()","gem::specification#dependent_specs()","gem::deprecate#deprecate()","gem::command#deprecate_option()","gem::command#deprecated?()","gem::commands::querycommand#deprecation_warning()","gem::resolver::molinillo::delegates::resolutionstate#depth()","gem::resolver::molinillo::dependencygraph::vertex#descendent?()","gem::command#description()","gem::commands::unpackcommand#description()","gem::specification#description=()","gem::resolver::molinillo::dependencygraph#detach_vertex_named()","gem::resolver::molinillo::dependencygraph::log#detach_vertex_named()","gem::specfetcher#detect()","gem::resolver::activationrequest#development?()","gem::resolver::dependencyrequest#development?()","gem::specification#development_dependencies()","gem::dir()","gem::installer#dir()","gem::package::tarreader::entry#directory?()","gem::specification::dirs()","gem::specification::dirs=()","gem::resolver::stats#display()","gem::queryutils#display_header()","gem::gemrunner#do_configuration()","gem::specification#doc_dir()","gem::commands::checkcommand#doctor()","gem::doctor#doctor()","gem::streamui::silentdownloadreporter#done()","gem::streamui::silentprogressreporter#done()","gem::streamui::simpleprogressreporter#done()","gem::streamui::threadeddownloadreporter#done()","gem::streamui::verboseprogressreporter#done()","gem::done_installing()","gem::resolver::molinillo::dependencygraph::action#down()","gem::resolver::molinillo::dependencygraph::addedgenocircular#down()","gem::resolver::molinillo::dependencygraph::deleteedge#down()","gem::resolver::molinillo::dependencygraph::detachvertexnamed#down()","gem::resolver::molinillo::dependencygraph::tag#down()","gem::remotefetcher#download()","gem::resolver::activationrequest#download()","gem::resolver::specification#download()","gem::source#download()","gem::source::installed#download()","gem::streamui#download_reporter()","gem::remotefetcher#download_to_cache()","gem::availableset#each()","gem::configfile#each()","gem::dependencylist#each()","gem::list#each()","gem::package::tarreader#each()","gem::resolver::molinillo::dependencygraph#each()","gem::resolver::molinillo::dependencygraph::log#each()","gem::sourcelist#each()","gem::specification::each()","gem::security::trustdir#each_certificate()","gem::optionparser::each_const()","gem::package::tarreader#each_entry()","gem::optionparser::list#each_option()","gem::sourcelist#each_source()","gem::availableset#each_spec()","gem::tsort#each_strongly_connected_component()","gem::tsort::each_strongly_connected_component()","gem::tsort#each_strongly_connected_component_from()","gem::tsort::each_strongly_connected_component_from()","gem::s3urisigner#ec2_metadata_credentials_json()","gem::s3urisigner#ec2_metadata_request()","gem::updatesuggestion#eglible_for_update?()","gem::security::email_to_name()","gem::resolver::molinillo::resolutionstate::empty()","gem::availableset#empty?()","gem::package::tarheader#empty?()","gem::requestset::lockfile::tokenizer#empty?()","gem::resolver::requirementlist#empty?()","gem::sourcelist#empty?()","gem::resolver::molinillo::resolver::resolution#end_resolution()","gem::source#enforce_trailing_slash()","gem::ensure_default_gem_subdirectories()","gem::installer#ensure_dependency()","gem::ensure_gem_subdirectories()","gem::installer#ensure_loadable_spec()","gem::queryutils#entry_details()","gem::queryutils#entry_versions()","gem::env_requirement()","gem::optionparser#environment()","gem::package::tarreader::entry#eof?()","gem::nametuple#eql?()","gem::platform#eql?()","gem::resolver::activationrequest#eql?()","gem::resolver::molinillo::dependencygraph::vertex#eql?()","gem::version#eql?()","gem::mockgemui#error()","gem::commands::buildcommand#error_message()","gem::resolver::composedset#errors()","gem::resolver::installerset#errors()","gem::uriformatter#escape()","gem::requirement#exact?()","gem::installer::exec_format()","gem::specification#executable()","gem::specification#executable=()","gem::specification#executables()","gem::specification#executables=()","gem::command#execute()","gem::commands::buildcommand#execute()","gem::commands::certcommand#execute()","gem::commands::checkcommand#execute()","gem::commands::cleanupcommand#execute()","gem::commands::contentscommand#execute()","gem::commands::dependencycommand#execute()","gem::commands::environmentcommand#execute()","gem::commands::execcommand#execute()","gem::commands::fetchcommand#execute()","gem::commands::generateindexcommand#execute()","gem::commands::helpcommand#execute()","gem::commands::installcommand#execute()","gem::commands::lockcommand#execute()","gem::commands::mirrorcommand#execute()","gem::commands::opencommand#execute()","gem::commands::outdatedcommand#execute()","gem::commands::ownercommand#execute()","gem::commands::pristinecommand#execute()","gem::commands::pushcommand#execute()","gem::commands::rdoccommand#execute()","gem::commands::servercommand#execute()","gem::commands::setupcommand#execute()","gem::commands::signincommand#execute()","gem::commands::signoutcommand#execute()","gem::commands::sourcescommand#execute()","gem::commands::specificationcommand#execute()","gem::commands::stalecommand#execute()","gem::commands::uninstallcommand#execute()","gem::commands::unpackcommand#execute()","gem::commands::updatecommand#execute()","gem::commands::whichcommand#execute()","gem::commands::yankcommand#execute()","gem::queryutils#execute()","gem::pathsupport#expand()","gem::resolver::conflict#explain()","gem::resolver::conflict#explanation()","gem::resolver::dependencyrequest#explicit?()","gem::installer#explicit_version_requirement()","gem::optionparser::arguable::extend_object()","gem::basicspecification#extension_dir()","gem::ext::cargobuilder#extension_nesting()","gem::specification#extensions()","gem::specification#extensions=()","gem::basicspecification#extensions_dir()","gem::command::extra_args()","gem::command::extra_args=()","gem::specification#extra_rdoc_files()","gem::specification#extra_rdoc_files=()","gem::installer#extract_bin()","gem::installer#extract_files()","gem::installer::fakepackage#extract_files()","gem::package#extract_files()","gem::package::old#extract_files()","gem::request#fetch()","gem::streamui::silentdownloadreporter#fetch()","gem::streamui::threadeddownloadreporter#fetch()","gem::remotefetcher#fetch_file()","gem::remotefetcher#fetch_http()","gem::remotefetcher#fetch_https()","gem::gemcutterutilities#fetch_otp()","gem::remotefetcher#fetch_path()","gem::remotefetcher#fetch_s3()","gem::s3urisigner#fetch_s3_config()","gem::source#fetch_spec()","gem::source::lock#fetch_spec()","gem::remotefetcher::fetcher()","gem::specfetcher::fetcher()","gem::package::tarreader::entry#file?()","gem::specification#file_name()","gem::specification#files()","gem::specification#files=()","gem::commands::contentscommand#files_in()","gem::commands::setupcommand#files_in()","gem::commands::contentscommand#files_in_default_gem()","gem::commands::contentscommand#files_in_gem()","gem::optionparser::parseerror::filter_backtrace()","gem::resolver::molinillo::resolver::resolution#filter_possibilities_after_unwind()","gem::resolver::molinillo::resolver::resolution#filter_possibilities_for_parent_unwind()","gem::resolver::molinillo::resolver::resolution#filter_possibilities_for_primary_unwind()","gem::resolver::molinillo::resolver::resolution#filtered_possibility_set()","gem::specification::find_active_stub_by_path()","gem::commandmanager#find_alias_command()","gem::availableset#find_all()","gem::resolver::apiset#find_all()","gem::resolver::composedset#find_all()","gem::resolver::currentset#find_all()","gem::resolver::gitset#find_all()","gem::resolver::indexset#find_all()","gem::resolver::installerset#find_all()","gem::resolver::lockset#find_all()","gem::resolver::set#find_all()","gem::resolver::vendorset#find_all()","gem::specification::find_all_by_full_name()","gem::specification::find_all_by_name()","gem::specification#find_all_satisfiers()","gem::specification::find_by_full_name()","gem::specification::find_by_name()","gem::specification::find_by_path()","gem::commandmanager#find_command()","gem::commandmanager#find_command_possibilities()","gem::find_config_file()","gem::find_files()","gem::validator#find_files_for_gem()","gem::source::local#find_gem()","gem::commands::buildcommand#find_gemspec()","gem::find_home()","gem::commands::unpackcommand#find_in_cache()","gem::specification::find_in_unresolved()","gem::specification::find_in_unresolved_tree()","gem::specification::find_inactive_by_path()","gem::find_latest_files()","gem::dependencylist#find_name()","gem::commands::whichcommand#find_paths()","gem::find_spec_for_exe()","gem::resolver::molinillo::resolver::resolution#find_state_for()","gem::find_unresolved_default_spec()","gem::finish_resolve()","gem::sourcelist#first()","gem::package::tarwriter#flush()","gem::silentui::nullio#flush()","gem::gemcutterutilities::webauthnlistener::response::for()","gem::specification#for_cache()","gem::resolver::for_current_gems()","gem::installer::for_spec()","gem::resolver::conflict#for_spec?()","gem::text#format_text()","gem::noaliasyamltree#format_time()","gem::installer#formatted_program_filename()","gem::version#freeze()","gem::package::tarheader::from()","gem::sourcelist::from()","gem::requestset::lockfile::tokenizer::from_file()","gem::nametuple::from_list()","gem::dependencylist::from_specs()","gem::specification::from_yaml()","gem::basicspecification#full_gem_path()","gem::basicspecification#full_name()","gem::nametuple#full_name()","gem::package::tarreader::entry#full_name()","gem::resolver::activationrequest#full_name()","gem::resolver::specspecification#full_name()","gem::resolver::specification#full_name()","gem::specification#full_name()","gem::basicspecification#full_require_paths()","gem::resolver::activationrequest#full_spec()","gem::installer#gem()","gem::requestset#gem()","gem::requestset::gemdependencyapi#gem()","kernel#gem()","gem::commands::contentscommand#gem_contents()","gem::basicspecification#gem_dir()","gem::installer#gem_dir()","gem::indexer#gem_file_list()","gem::commands::contentscommand#gem_install_dir()","gem::commands::buildcommand#gem_name()","gem::queryutils#gem_name?()","gem::doctor#gem_repository?()","gem::installer#gemdeps_load()","gem::basicspecification#gems_dir()","gem::specification#gems_dir()","gem::requestset::gemdependencyapi#gemspec()","gem::specification::gemspec_stubs_in()","gem::installer#generate_bin_script()","gem::installer#generate_bin_symlink()","gem::s3urisigner#generate_canonical_query_params()","gem::s3urisigner#generate_canonical_request()","gem::commands::setupcommand#generate_default_dirs()","gem::commands::setupcommand#generate_default_man_dir()","gem::indexer#generate_index()","gem::s3urisigner#generate_signature()","gem::s3urisigner#generate_string_to_sign()","gem::installer#generate_windows_script()","gem::command#get_all_gem_names()","gem::command#get_all_gem_names_and_versions()","gem::commands::cleanupcommand#get_candidate_gems()","gem::optionparser::list#get_candidates()","gem::request::get_cert_files()","gem::commands::opencommand#get_env_editor()","gem::commands::cleanupcommand#get_gems_to_cleanup()","gem::commands::pushcommand#get_hosts_for()","gem::gemcutterutilities#get_key_name()","gem::gemcutterutilities#get_mfa_params()","gem::command#get_one_gem_name()","gem::command#get_one_optional_argument()","gem::commands::ownercommand#get_owner_scope()","gem::commands::unpackcommand#get_path()","gem::versionoption#get_platform_from_requirements()","gem::commands::cleanupcommand#get_primary_gems()","gem::request::get_proxy_from_env()","gem::security::get_public_key()","gem::commands::pushcommand#get_push_scope()","gem::ext::extconfbuilder::get_relative_path()","gem::gemcutterutilities#get_scope_params()","gem::resolver::sourceset#get_set()","gem::gemcutterutilities#get_user_profile()","gem::commands::yankcommand#get_version_from_requirements()","gem::commands::yankcommand#get_yank_scope()","gem::package::tarreader::entry#getc()","gem::optionparser#getopts()","gem::optionparser::getopts()","gem::optionparser::arguable#getopts()","gem::silentui::nullio#gets()","gem::requestset::gemdependencyapi#git()","gem::commands::environmentcommand#git_path()","gem::requestset::gemdependencyapi#git_source()","gem::util::glob_files_in_dir()","gem::requestset::gemdependencyapi#group()","gem::resolver::molinillo::resolver::resolution#group_possibilities()","gem::optionparser::switch::guess()","gem::util::gunzip()","gem::indexer#gzip()","gem::util::gzip()","gem::package#gzip_to()","gem::configfile#handle_arguments()","gem::resolver::molinillo::resolver::resolution#handle_missing_or_push_dependency_state()","gem::command#handle_options()","gem::commands::execcommand#handle_options()","gem::command#handles?()","gem::specification#has_conflicts?()","gem::nametuple#hash()","gem::resolver::apispecification#hash()","gem::resolver::activationrequest#hash()","gem::resolver::indexspecification#hash()","gem::resolver::molinillo::dependencygraph::vertex#hash()","gem::basicspecification#have_extensions?()","gem::basicspecification#have_file?()","gem::package::tarheader#header()","gem::optionparser#help()","gem::host()","gem::gemcutterutilities#host()","gem::host=()","gem::remotefetcher#https?()","gem::dependency#identity()","gem::resolver::dependencyrequest#implicit?()","gem::requestset#import()","gem::optionparser::inc()","gem::optionparser#inc()","gem::sourcelist#include?()","gem::optionparser::switch::incompatible_argument_styles()","gem::optionparser::switch::noargument::incompatible_argument_styles()","gem::resolver::molinillo::resolver::resolution#indicate_progress()","gem::resolver::molinillo::ui#indicate_progress()","gem::util::inflate()","gem::installer::inherited()","gem::packagetask#init()","gem::package#initialize()","gem::resolver::molinillo::dependencygraph#initialize_copy()","gem::specification#initialize_copy()","gem::uri#initialize_copy()","gem::availableset#inject_into_list()","gem::mockgemui#input()","gem::optionparser::parseerror#inspect()","gem::resolver::molinillo::dependencygraph#inspect()","gem::resolver::molinillo::dependencygraph::vertex#inspect()","gem::install()","gem::commands::execcommand#install()","gem::dependencyinstaller#install()","gem::installer#install()","gem::requestset#install()","gem::resolver::gitspecification#install()","gem::resolver::installedspecification#install()","gem::resolver::lockspecification#install()","gem::resolver::specification#install()","gem::resolver::vendorspecification#install()","gem::commands::setupcommand#install_default_bundler_gem()","gem::commands::setupcommand#install_executables()","gem::commands::setupcommand#install_file()","gem::commands::setupcommand#install_file_list()","gem::requestset#install_from_gemdeps()","gem::requestset#install_hooks()","gem::commands::execcommand#install_if_needed()","gem::indexer#install_indices()","gem::requestset#install_into()","gem::commands::setupcommand#install_lib()","gem::commands::setupcommand#install_rdoc()","gem::installupdateoptions#install_update_defaults_str()","gem::installupdateoptions#install_update_options()","gem::platform::installable?()","gem::resolver::installedspecification#installable_platform?()","gem::resolver::localspecification#installable_platform?()","gem::resolver::specification#installable_platform?()","gem::installer#installation_satisfies_dependency?()","gem::queryutils#installed?()","gem::resolver::activationrequest#installed?()","gem::installer#installed_specs()","gem::specification::installed_stubs()","gem::commandmanager::instance()","gem::commandmanager#instance()","gem::specification#invalidate_memoized_attributes()","gem::command#invoke()","gem::commandmanager#invoke_command()","gem::command#invoke_with_build_args()","gem::resolver::molinillo::dependencygraph::vertex#is_reachable_from?()","gem::security::trustdir#issuer_of()","gem::resolver::stats#iteration!()","gem::java_platform?()","gem::specification#keep_only_files_and_directories()","gem::configfile#last_update_check()","gem::configfile#last_update_check=()","gem::latest_rubygems_version()","gem::latest_spec_for()","gem::specification::latest_spec_for()","gem::specification::latest_specs()","gem::resolver::molinillo::resolver::resolution::possibilityset#latest_version()","gem::dependency#latest_version?()","gem::latest_version_for()","gem::ext::cargobuilder#ldflag_to_link_modifier()","gem::package::tarreader::entry#length()","gem::text#levenshtein_distance()","gem::basicspecification#lib_dirs_glob()","gem::specification#lib_files()","gem::ext::cargobuilder#libruby_args()","gem::specification#license()","gem::specification#license=()","gem::specification#licenses()","gem::specification#licenses=()","gem::resolver::apiset#lines()","gem::ext::cargobuilder#linker_args()","gem::gemcutterutilities::webauthnlistener::listener_thread()","gem::optionparser#load()","gem::requestset::gemdependencyapi#load()","gem::safeyaml::load()","gem::specification::load()","gem::commands::execcommand#load!()","gem::commandmanager#load_and_instantiate()","gem::configfile#load_api_keys()","gem::security::trustdir#load_certificate()","gem::commands::certcommand#load_default_cert()","gem::commands::certcommand#load_default_key()","gem::specification::load_defaults()","gem::load_env_plugins()","gem::configfile#load_file()","gem::requestset#load_gemdeps()","gem::load_path_insert_index()","gem::installer#load_plugin()","gem::load_plugins()","gem::installer#load_relative_enabled?()","gem::source#load_specs()","gem::load_yaml()","gem::platform::local()","gem::localremoteoptions#local?()","gem::location_of_caller()","gem::streamui::threadeddownloadreporter#locked_puts()","gem::resolver::molinillo::resolver::resolution#locked_requirement_named()","gem::resolver::molinillo::resolver::resolution#locked_requirement_possibility_set()","gem::bundlerversionfinder::lockfile_contents()","gem::bundlerversionfinder::lockfile_version()","gem::ext::builder::make()","gem::commands::setupcommand#make_destination_dirs()","gem::resolver::molinillo::dependencygraph::addedgenocircular#make_edge()","gem::resolver::molinillo::dependencygraph::deleteedge#make_edge()","gem::queryutils#make_entry()","gem::requestset::lockfile::tokenizer#make_parser()","gem::optionparser#make_switch()","gem::indexer#make_temp_directories()","gem::ext::cargobuilder#makefile_config()","gem::commands::ownercommand#manage_owners()","gem::indexer#map_gems_to_specs()","gem::specification#mark_version()","gem::version#marshal_dump()","gem::version#marshal_load()","gem::marshal_version()","gem::optionparser::completinghash#match()","gem::platform::match()","gem::dependency#match?()","gem::licenses::match?()","gem::resolver::dependencyrequest#match?()","gem::platform::match_gem?()","gem::availableset#match_platform!()","gem::nametuple#match_platform?()","gem::platform::match_platforms?()","gem::platform::match_spec?()","gem::basicspecification#matches_for_glob()","gem::dependency#matches_spec?()","gem::resolver::dependencyrequest#matches_spec?()","gem::dependency#matching_specs()","gem::ext::cargobuilder#maybe_resolve_ldflag_variable()","gem::dependency#merge()","gem::command#merge_options()","gem::optionparser::parseerror#message()","gem::resolver::molinillo::nosuchdependencyerror#message()","gem::runtimerequirementnotmeterror#message()","gem::resolver::molinillo::versionconflict#message_with_trees()","gem::resolver::installerset#metadata_satisfied?()","gem::uri#method_missing()","gem::gemcutterutilities#mfa_unauthorized?()","gem::ext::cargobuilder#mingw_target?()","gem::specification#missing_extensions?()","gem::package::tarwriter#mkdir()","gem::commands::setupcommand::makedirs#mkdir_p()","gem::ext::cargobuilder#mkmf_libpath()","gem::ext::cargobuilder#msvc_target?()","gem::ext::cargobuilder#mswin_link_args()","gem::basicspecification#name()","gem::resolver::activationrequest#name()","gem::resolver::dependencyrequest#name()","gem::resolver::molinillo::delegates::resolutionstate#name()","gem::resolver::specspecification#name()","gem::unsatisfiabledependencyerror#name()","gem::resolver#name_for()","gem::resolver::molinillo::delegates::specificationprovider#name_for()","gem::resolver::molinillo::specificationprovider#name_for()","gem::resolver::molinillo::delegates::specificationprovider#name_for_explicit_dependency_source()","gem::resolver::molinillo::specificationprovider#name_for_explicit_dependency_source()","gem::resolver::molinillo::delegates::specificationprovider#name_for_locking_dependency_source()","gem::resolver::molinillo::specificationprovider#name_for_locking_dependency_source()","gem::security::trustdir#name_path()","gem::commands::dependencycommand#name_pattern()","gem::resolver::activationrequest#name_tuple()","gem::specification#name_tuple()","gem::needs()","coreextensions::tcpsocketext::initializer::new()","gem::availableset::new()","gem::basicspecification::new()","gem::command::new()","gem::commandmanager::new()","gem::commands::buildcommand::new()","gem::commands::certcommand::new()","gem::commands::checkcommand::new()","gem::commands::cleanupcommand::new()","gem::commands::contentscommand::new()","gem::commands::dependencycommand::new()","gem::commands::environmentcommand::new()","gem::commands::execcommand::new()","gem::commands::fetchcommand::new()","gem::commands::generateindexcommand::new()","gem::commands::helpcommand::new()","gem::commands::infocommand::new()","gem::commands::installcommand::new()","gem::commands::listcommand::new()","gem::commands::lockcommand::new()","gem::commands::mirrorcommand::new()","gem::commands::opencommand::new()","gem::commands::outdatedcommand::new()","gem::commands::ownercommand::new()","gem::commands::pristinecommand::new()","gem::commands::pushcommand::new()","gem::commands::querycommand::new()","gem::commands::rdoccommand::new()","gem::commands::searchcommand::new()","gem::commands::servercommand::new()","gem::commands::setupcommand::new()","gem::commands::signincommand::new()","gem::commands::signoutcommand::new()","gem::commands::sourcescommand::new()","gem::commands::specificationcommand::new()","gem::commands::stalecommand::new()","gem::commands::uninstallcommand::new()","gem::commands::unpackcommand::new()","gem::commands::updatecommand::new()","gem::commands::whichcommand::new()","gem::commands::yankcommand::new()","gem::configfile::new()","gem::conflicterror::new()","gem::consoleui::new()","gem::dependency::new()","gem::dependencyinstaller::new()","gem::dependencylist::new()","gem::dependencyresolutionerror::new()","gem::doctor::new()","gem::ext::builder::new()","gem::ext::cargobuilder::new()","gem::ext::cargobuilder::dylibnotfounderror::new()","gem::filepermissionerror::new()","gem::gemrunner::new()","gem::gemcutterutilities::webauthnlistener::new()","gem::gemcutterutilities::webauthnlistener::response::new()","gem::gemcutterutilities::webauthnlistener::socketresponder::new()","gem::gemcutterutilities::webauthnpoller::new()","gem::impossibledependencieserror::new()","gem::indexer::new()","gem::installer::new()","gem::installer::fakepackage::new()","gem::list::new()","gem::missingspecerror::new()","gem::missingspecversionerror::new()","gem::mockgemui::new()","gem::mockgemui::inputeoferror::new()","gem::mockgemui::termerror::new()","gem::nametuple::new()","gem::optionparser::new()","gem::optionparser#new()","gem::optionparser::arguable::new()","gem::optionparser::list::new()","gem::optionparser::parseerror::new()","gem::optionparser::switch::new()","gem::package::new()","gem::package::digestio::new()","gem::package::formaterror::new()","gem::package::old::new()","gem::package::patherror::new()","gem::package::symlinkerror::new()","gem::package::tarheader::new()","gem::package::tarreader::new()","gem::package::tarreader::new()","gem::package::tarreader::entry::new()","gem::package::tarwriter::new()","gem::package::tarwriter::new()","gem::package::tarwriter::boundedstream::new()","gem::package::tarwriter::restrictedstream::new()","gem::packagetask::new()","gem::pathsupport::new()","gem::platform::new()","gem::platformmismatch::new()","gem::remotefetcher::new()","gem::remotefetcher::fetcherror::new()","gem::request::new()","gem::requestset::new()","gem::requestset::gemdependencyapi::new()","gem::requestset::lockfile::new()","gem::requestset::lockfile::parseerror::new()","gem::requestset::lockfile::parser::new()","gem::requestset::lockfile::tokenizer::new()","gem::requirement::new()","gem::resolver::new()","gem::resolver::apiset::new()","gem::resolver::apispecification::new()","gem::resolver::apispecification::new()","gem::resolver::activationrequest::new()","gem::resolver::bestset::new()","gem::resolver::composedset::new()","gem::resolver::conflict::new()","gem::resolver::dependencyrequest::new()","gem::resolver::indexspecification::new()","gem::resolver::installerset::new()","gem::resolver::lockset::new()","gem::resolver::lockspecification::new()","gem::resolver::molinillo::circulardependencyerror::new()","gem::resolver::molinillo::dependencygraph::new()","gem::resolver::molinillo::dependencygraph::addedgenocircular::new()","gem::resolver::molinillo::dependencygraph::deleteedge::new()","gem::resolver::molinillo::dependencygraph::detachvertexnamed::new()","gem::resolver::molinillo::dependencygraph::log::new()","gem::resolver::molinillo::dependencygraph::tag::new()","gem::resolver::molinillo::dependencygraph::vertex::new()","gem::resolver::molinillo::nosuchdependencyerror::new()","gem::resolver::molinillo::resolver::new()","gem::resolver::molinillo::resolver::resolution::new()","gem::resolver::molinillo::versionconflict::new()","gem::resolver::requirementlist::new()","gem::resolver::sourceset::new()","gem::resolver::specspecification::new()","gem::resolver::specification::new()","gem::resolver::stats::new()","gem::s3urisigner::new()","gem::s3urisigner::configurationerror::new()","gem::s3urisigner::instanceprofileerror::new()","gem::security::policy::new()","gem::security::signer::new()","gem::security::trustdir::new()","gem::silentui::new()","gem::source::new()","gem::source::git::new()","gem::source::lock::new()","gem::source::specificfile::new()","gem::source::vendor::new()","gem::sourcefetchproblem::new()","gem::sourcelist::new()","gem::specfetcher::new()","gem::specificgemnotfoundexception::new()","gem::specification::new()","gem::specificationpolicy::new()","gem::streamui::new()","gem::streamui::silentdownloadreporter::new()","gem::streamui::silentprogressreporter::new()","gem::streamui::simpleprogressreporter::new()","gem::streamui::threadeddownloadreporter::new()","gem::streamui::verboseprogressreporter::new()","gem::systemexitexception::new()","gem::uninstaller::new()","gem::unknowncommanderror::new()","gem::unknowncommandspellchecker::new()","gem::unsatisfiabledependencyerror::new()","gem::uri::new()","gem::uriformatter::new()","gem::version::new()","gem::webauthnverificationerror::new()","gem::resolver::molinillo::dependencygraph::vertex#new_vertex_set()","gem::resolver::requirementlist#next5()","gem::requestset::lockfile::tokenizer#next_token()","gem::version::nil_versions_are_discouraged!()","gem::mockgemui::tty#noecho()","gem::specification::non_nil_attributes()","gem::requirement#none?()","gem::specification#normalize()","gem::uriformatter#normalize()","gem::ext::cargobuilder#normalize_path()","gem::package#normalize_path()","gem::specification::normalize_yaml_input()","gem::platform#normalized_linux_version()","gem::nametuple::null()","gem::uri#oauth_basic?()","gem::package::tarheader#oct()","gem::package::tarheader::oct_or_256based()","gem::dependencylist#ok?()","gem::dependencylist#ok_to_remove?()","gem::commands::updatecommand#oldest_supported_version()","gem::optionparser#on()","gem::optionparser#on_head()","gem::optionparser#on_tail()","gem::package::tarreader::entry::open()","gem::commands::certcommand#open_cert()","gem::commands::opencommand#open_editor()","gem::open_file()","gem::commands::opencommand#open_gem()","gem::commands::certcommand#open_private_key()","gem::operating_system_defaults()","gem::command#option_is_deprecated?()","gem::optionparser::arguable#options()","gem::optionparser::arguable#options=()","gem::optionparser#order()","gem::optionparser#order!()","gem::optionparser::arguable#order!()","gem::gemcutterutilities#otp()","gem::specification::outdated()","gem::specification::outdated_and_latest_version()","gem::mockgemui#output()","gem::resolver#output()","gem::resolver::molinillo::ui#output()","gem::queryutils#output_query_results()","gem::queryutils#output_versions()","gem::indexer#paranoid()","gem::resolver::activationrequest#parent()","gem::resolver::molinillo::resolver::resolution#parent_of()","gem::optionparser#parse()","gem::optionparser::switch::noargument#parse()","gem::optionparser::switch::optionalargument#parse()","gem::optionparser::switch::placedargument#parse()","gem::optionparser::switch::requiredargument#parse()","gem::requestset::lockfile::parser#parse()","gem::requirement::parse()","gem::resolver::apiset::gemparser#parse()","gem::uri::parse()","gem::uri#parse()","gem::optionparser#parse!()","gem::optionparser::arguable#parse!()","gem::uri::parse!()","gem::uri#parse!()","gem::resolver::apiset::gemparser#parse_dependency()","gem::resolver::apiset#parse_gem()","gem::gemcutterutilities::webauthnlistener#parse_otp_from_uri()","gem::command#parser()","gem::uri#password?()","gem::path()","gem::resolver::molinillo::dependencygraph#path()","gem::uninstaller#path_ok?()","gem::path_separator()","gem::resolver::molinillo::dependencygraph::vertex#path_to?()","gem::paths()","gem::paths=()","gem::optionparser::switch::pattern()","gem::optionparser::switch::noargument::pattern()","gem::requestset::lockfile::tokenizer#peek()","gem::optionparser#permute()","gem::optionparser#permute!()","gem::optionparser::arguable#permute!()","gem::availableset#pick_best!()","gem::requestset::gemdependencyapi#pin_gem_source()","gem::basicspecification#platform()","gem::requestset::gemdependencyapi#platform()","gem::resolver::activationrequest#platform()","gem::resolver::specspecification#platform()","gem::specification#platform()","gem::specification#platform=()","gem::platform_defaults()","gem::ext::cargobuilder#platform_specific_rustc_args()","gem::platforms()","gem::requestset::gemdependencyapi#platforms()","gem::platforms=()","gem::plugin_suffix_pattern()","gem::plugin_suffix_regexp()","gem::plugindir()","gem::basicspecification#plugins()","gem::gemcutterutilities::webauthnpoller#poll_for_otp()","gem::gemcutterutilities::webauthnpoller::poll_thread()","gem::remotefetcher#pools_for()","gem::resolver::molinillo::dependencygraph::log#pop!()","gem::resolver::molinillo::dependencystate#pop_possibility_state()","gem::util::popen()","gem::package::tarreader::entry#pos()","gem::package::tarreader::entry#pos=()","gem::resolver::molinillo::delegates::resolutionstate#possibilities()","gem::resolver::molinillo::resolver::resolution#possibilities_for_requirement()","gem::resolver::molinillo::resolver::resolution#possibility()","gem::resolver::molinillo::resolver::resolution::conflict#possibility()","gem::resolver::molinillo::resolver::resolution#possibility_satisfies_requirements?()","gem::post_build()","gem::post_install()","gem::post_reset()","gem::post_uninstall()","gem::pre_install()","gem::installer#pre_install_checks()","gem::pre_reset()","gem::pre_uninstall()","gem::resolver::molinillo::dependencygraph::vertex#predecessors()","gem::availableset#prefetch()","gem::resolver::apiset#prefetch()","gem::resolver::composedset#prefetch()","gem::resolver::gitset#prefetch()","gem::resolver::installerset#prefetch()","gem::resolver::set#prefetch()","gem::prefix()","gem::commands::updatecommand#preparing_gem_layout_for()","gem::list#prepend()","gem::list::prepend()","gem::optionparser::list#prepend()","gem::commands::setupcommand#prepend_destdir_if_present()","coreextensions::tcpsocketext::prepended()","gem::queryutils#prerelease()","gem::resolver::composedset#prerelease=()","gem::resolver::installerset#prerelease=()","gem::dependency#prerelease?()","gem::nametuple#prerelease?()","gem::requirement#prerelease?()","gem::version#prerelease?()","gem::gemcutterutilities#pretty_host()","gem::silentui::nullio#print()","gem::commands::execcommand#print_command()","gem::bundlerversionfinder::prioritize!()","gem::dependency#prioritizes_bundler?()","gem::commandmanager#process_args()","gem::resolver::molinillo::resolver::resolution#process_topmost_state()","gem::optionparser#program_name()","gem::resolver::molinillo::ui#progress_rate()","gem::streamui#progress_reporter()","gem::remotefetcher#proxy_for()","gem::request#proxy_uri()","gem::resolver::molinillo::dependencygraph::log#push_action()","gem::resolver::molinillo::resolver::resolution#push_initial_state()","gem::resolver::molinillo::resolver::resolution#push_state_for_requirements()","gem::silentui::nullio#puts()","gem::resolver::molinillo::resolver::resolution#raise_error_unless_state()","gem::package::raw_spec()","gem::installer#rb_config()","gem::ext::cargobuilder#rb_config_env()","gem::specification#rdoc_options()","gem::specification#rdoc_options=()","gem::security::re_sign()","gem::commands::certcommand#re_sign_cert()","gem::security::signer::re_sign_cert()","gem::package::tarreader::entry#read()","gem::read_binary()","gem::package#read_checksums()","gem::package::tarreader::entry#readpartial()","gem::configfile#really_verbose()","gem::optionparser::parseerror#reason()","gem::gemcutterutilities::webauthnlistener::badrequestresponse#reason_phrase()","gem::gemcutterutilities::webauthnlistener::methodnotallowedresponse#reason_phrase()","gem::gemcutterutilities::webauthnlistener::nocontentresponse#reason_phrase()","gem::gemcutterutilities::webauthnlistener::notfoundresponse#reason_phrase()","gem::gemcutterutilities::webauthnlistener::okresponse#reason_phrase()","gem::gemcutterutilities::webauthnlistener::response#reason_phrase()","gem::resolver::stats#record_depth()","gem::resolver::stats#record_requirements()","gem::optionparser::parseerror#recover()","gem::resolver::molinillo::dependencygraph::vertex#recursive_predecessors()","gem::resolver::molinillo::dependencygraph::vertex#recursive_successors()","gem::uri::redact()","gem::uri#redact_credentials_from()","gem::uri#redacted()","gem::refresh()","gem::commands::setupcommand#regenerate_binstubs()","gem::commands::setupcommand#regenerate_plugins()","gem::uninstaller#regenerate_plugins()","gem::installeruninstallerutils#regenerate_plugins_for()","gem::optionparser::completion::regexp()","gem::noaliasyamltree#register()","gem::commandmanager#register_command()","gem::register_default_spec()","gem::optionparser#reject()","gem::optionparser::reject()","gem::optionparser::list#reject()","gem::optionparser#release()","gem::version#release()","gem::resolver::composedset#remote=()","gem::localremoteoptions#remote?()","gem::optionparser#remove()","gem::resolver::requirementlist#remove()","gem::uninstaller#remove()","gem::uninstaller#remove_all()","gem::dependencylist#remove_by_name()","gem::uninstaller#remove_executables()","gem::commands::setupcommand#remove_file_list()","gem::availableset#remove_installed!()","gem::commands::setupcommand#remove_old_bin_files()","gem::commands::setupcommand#remove_old_lib_files()","gem::commands::setupcommand#remove_old_man_files()","gem::command#remove_option()","gem::commands::ownercommand#remove_owners()","gem::installeruninstallerutils#remove_plugins_for()","gem::specification::remove_spec()","gem::dependencylist#remove_specs_unsatisfied_by()","gem::specification#removed_method_calls()","gem::sourcelist#replace()","gem::remotefetcher#request()","gem::resolver::dependencyrequest#request_context()","gem::resolver::conflict#request_path()","gem::gemcutterutilities#request_with_otp()","gem::resolver::conflict#requester()","gem::requestset::lockfile#requests()","kernel#require()","gem::streamui#require_io_console()","gem::resolver::molinillo::resolver::resolution#require_nested_dependencies_for()","gem::specification#require_path()","gem::specification#require_path=()","gem::basicspecification#require_paths()","gem::specification#require_paths=()","gem::specification::required_attribute?()","gem::specification::required_attributes()","gem::resolver::indexspecification#required_ruby_version()","gem::resolver::specspecification#required_ruby_version()","gem::specification#required_ruby_version=()","gem::resolver::indexspecification#required_rubygems_version()","gem::resolver::specspecification#required_rubygems_version()","gem::specification#required_rubygems_version=()","gem::dependency#requirement()","gem::resolver::dependencyrequest#requirement()","gem::resolver::molinillo::delegates::resolutionstate#requirement()","gem::resolver::stats#requirement!()","gem::resolver::molinillo::resolver::resolution#requirement_for_existing_name()","gem::resolver#requirement_satisfied_by?()","gem::resolver::molinillo::delegates::specificationprovider#requirement_satisfied_by?()","gem::resolver::molinillo::specificationprovider#requirement_satisfied_by?()","gem::resolver::molinillo::resolver::resolution#requirement_tree_for()","gem::resolver::molinillo::resolver::resolution#requirement_trees()","gem::resolver::molinillo::delegates::resolutionstate#requirements()","gem::resolver::molinillo::dependencygraph::vertex#requirements()","gem::specification#requirements()","gem::specification#requirements=()","gem::dependency#requirements_list()","gem::commandmanager::reset()","gem::request#reset()","gem::security::reset()","gem::specification::reset()","gem::specification#reset_nil_attributes_to_default()","gem::requestset#resolve()","gem::resolver#resolve()","gem::resolver::molinillo::resolver#resolve()","gem::resolver::molinillo::resolver::resolution#resolve()","gem::resolver::molinillo::resolver::resolution#resolve_activated_specs()","gem::requestset#resolve_current()","gem::commands::buildcommand#resolve_gem_name()","gem::uri#respond_to_missing?()","gem::resolver::molinillo::dependencygraph::log#reverse_each()","gem::resolver::molinillo::resolver::resolution::unwinddetails#reversed_requirement_tree_index()","gem::package::tarreader#rewind()","gem::package::tarreader::entry#rewind()","gem::resolver::molinillo::dependencygraph#rewind_to()","gem::resolver::molinillo::dependencygraph::log#rewind_to()","gem::specification#ri_dir()","gem::gemcutterutilities::webauthnlistener#root_path?()","gem::resolver::molinillo::dependencygraph#root_vertex_named()","gem::ruby()","gem::ext::builder::ruby()","gem::requestset::gemdependencyapi#ruby()","gem::ruby_api_version()","gem::specification#ruby_code()","gem::ruby_engine()","gem::installer#ruby_install_name()","gem::ext::cargobuilder#ruby_static?()","gem::ruby_version()","gem::configfile#rubygems_api_key()","gem::configfile#rubygems_api_key=()","gem::gemcutterutilities#rubygems_api_request()","gem::deprecate#rubygems_deprecate()","gem::deprecate::rubygems_deprecate()","gem::deprecate#rubygems_deprecate_command()","gem::deprecate::rubygems_deprecate_command()","gem::commands::updatecommand#rubygems_target_version()","gem::rubygems_version()","gem::commandmanager#run()","gem::ext::builder::run()","gem::gemrunner#run()","gem::dependency#runtime?()","gem::specification#runtime_dependencies()","gem::ext::cargobuilder#rustc_dynamic_linker_flags()","gem::ext::cargobuilder#rustc_lib_flags()","gem::remotefetcher#s3_uri_signer()","gem::uninstaller#safe_delete()","gem::safeyaml::safe_load()","gem::specification#same_attributes?()","gem::specification#sanitize()","gem::specification#sanitize_string()","gem::requirement#satisfied_by?()","gem::specification#satisfies_requirement?()","gem::streamui#say()","gem::userinteraction#say()","gem::optionparser::list#search()","gem::optionparser::search_const()","gem::resolver#search_for()","gem::resolver::molinillo::delegates::specificationprovider#search_for()","gem::resolver::molinillo::specificationprovider#search_for()","gem::specfetcher#search_for_dependency()","gem::package::tarreader#seek()","gem::package::tarreader::entry#seek()","gem::gemcutterutilities::webauthnlistener::socketresponder#send()","gem::commands::pushcommand#send_gem()","gem::commands::ownercommand#send_owner_request()","gem::commands::pushcommand#send_push_request()","gem::optionparser#separator()","gem::configfile#set_api_key()","gem::gemcutterutilities#set_api_key()","gem::optionparser::parseerror#set_backtrace()","gem::configfile#set_config_file_name()","gem::commands::execcommand#set_gem_exec_install_paths()","gem::optionparser::parseerror#set_option()","gem::resolver::molinillo::dependencygraph#set_payload()","gem::resolver::molinillo::dependencygraph::log#set_payload()","gem::package#setup_signer()","gem::resolver::molinillo::dependencygraph::vertex#shallow_eql?()","gem::commands::setupcommand#shebang()","gem::installer#shebang()","gem::requestset::lockfile::tokenizer#shift()","gem::commands::contentscommand#show_files()","gem::queryutils#show_gems()","gem::command#show_help()","gem::queryutils#show_local_gems()","gem::command#show_lookup_failure()","gem::commands::ownercommand#show_owners()","gem::queryutils#show_prereleases?()","gem::commands::setupcommand#show_release_notes()","gem::queryutils#show_remote_gems()","gem::optionparser::show_version()","gem::commands::certcommand#sign()","gem::s3urisigner#sign()","gem::security::sign()","gem::security::signer#sign()","gem::gemcutterutilities#sign_in()","gem::util::silent_system()","gem::availableset#size()","gem::package::tarreader::entry#size()","gem::resolver::requirementlist#size()","gem::requestset::lockfile::tokenizer#skip()","gem::deprecate#skip_during()","gem::deprecate::skip_during()","gem::ext::cargobuilder#so_ext()","gem::solaris_platform?()","gem::resolver#sort_dependencies()","gem::resolver::molinillo::delegates::specificationprovider#sort_dependencies()","gem::resolver::molinillo::specificationprovider#sort_dependencies()","gem::specification#sort_obj()","gem::platform::sort_priority()","gem::availableset#sorted()","gem::requestset#sorted_requests()","gem::requestset::gemdependencyapi#source()","gem::resolver::installedspecification#source()","gem::source_date_epoch()","gem::source_date_epoch_string()","gem::availableset#source_for()","gem::basicspecification#source_paths()","gem::sources()","gem::sources=()","gem::installer#spec()","gem::package#spec()","gem::package::old#spec()","gem::resolver::lockspecification#spec()","gem::queryutils#spec_authors()","gem::spec_cache_dir()","gem::specification#spec_dir()","gem::installer#spec_file()","gem::specification#spec_file()","gem::commands::contentscommand#spec_for()","gem::commands::opencommand#spec_for()","gem::specfetcher#spec_for_dependency()","gem::requestset::lockfile#spec_groups()","gem::queryutils#spec_homepage()","gem::queryutils#spec_license()","gem::queryutils#spec_loaded_from()","gem::nametuple#spec_name()","gem::specification#spec_name()","gem::commands::lockcommand#spec_path()","gem::queryutils#spec_platforms()","gem::dependencylist#spec_predecessors()","gem::queryutils#spec_summary()","gem::dependency#specific?()","gem::requirement#specific?()","gem::command::specific_extra_args()","gem::command::specific_extra_args_hash()","gem::requestset#specs()","gem::source::git#specs()","gem::requestset#specs_in()","gem::queryutils#specs_type()","gem::unknowncommandspellchecker#spell_checker()","gem::ext::cargobuilder#split_flags()","gem::pathsupport#split_gem_path()","gem::resolver::molinillo::resolver::resolution#start_resolution()","gem::resolver::molinillo::resolver::resolution#state()","gem::state_file()","gem::configfile#state_file_name()","gem::configfile#state_file_writable?()","gem::state_home()","gem::package::tarheader::strict_oct()","gem::tsort#strongly_connected_components()","gem::tsort::strongly_connected_components()","gem::basicspecification#stubbed?()","gem::specification#stubbed?()","gem::specification::stubs()","gem::specification::stubs_for()","gem::resolver::molinillo::resolver::resolution::unwinddetails#sub_dependencies_to_avoid()","gem::resolver::molinillo::dependencygraph::vertex#successors()","gem::suffix_pattern()","gem::suffix_regexp()","gem::suffixes()","gem::specfetcher#suggest_gems_from_name()","gem::licenses::suggestions()","gem::optionparser#summarize()","gem::optionparser::list#summarize()","gem::optionparser::switch#summarize()","gem::specification#summary=()","gem::commands::execcommand#suppress_always_install()","gem::optionparser::switch#switch_name()","gem::package::tarreader::entry#symlink?()","gem::resolver::molinillo::dependencygraph#tag()","gem::resolver::molinillo::dependencygraph::log#tag()","gem::commands::setupcommand#target_bin_path()","gem::optionparser#terminate()","gem::optionparser::terminate()","gem::mockgemui#terminate_interaction()","gem::streamui#terminate_interaction()","gem::userinteraction#terminate_interaction()","gem::mockgemui#terminated?()","gem::basicspecification#this()","gem::time()","gem::list#to_a()","gem::nametuple#to_a()","gem::optionparser#to_a()","gem::platform#to_a()","gem::requestset::lockfile::tokenizer#to_a()","gem::sourcelist#to_a()","gem::sourcelist#to_ary()","gem::nametuple::to_basic()","gem::resolver::molinillo::dependencygraph#to_dot()","gem::basicspecification#to_fullpath()","gem::availableset#to_request_set()","gem::specification#to_ruby()","gem::specification#to_ruby_for_cache()","gem::gemcutterutilities::webauthnlistener::response#to_s()","gem::optionparser#to_s()","gem::optionparser::parseerror#to_s()","gem::platform#to_s()","gem::requestset::lockfile#to_s()","gem::resolver::activationrequest#to_s()","gem::resolver::molinillo::resolver::resolution::possibilityset#to_s()","gem::uri#to_s()","gem::version#to_s()","gem::basicspecification#to_spec()","gem::dependency#to_spec()","gem::specification#to_spec()","gem::dependency#to_specs()","gem::uri#token?()","gem::requestset::lockfile::tokenizer#tokenize()","gem::optionparser::top()","gem::optionparser#top()","gem::specification#traverse()","gem::util::traverse_parents()","gem::text#truncate_text()","gem::security::trustdir#trust_cert()","gem::security::trust_dir()","gem::security::trusted_certificates()","gem::try_activate()","gem::resolver::molinillo::dependencygraph::tsort()","gem::tsort#tsort()","gem::tsort::tsort()","gem::tsort#tsort_each()","gem::tsort::tsort_each()","gem::dependencylist#tsort_each_child()","gem::resolver::molinillo::dependencygraph#tsort_each_child()","gem::tsort#tsort_each_child()","gem::dependencylist#tsort_each_node()","gem::resolver::molinillo::dependencygraph#tsort_each_node()","gem::tsort#tsort_each_node()","gem::mockgemui::tty#tty?()","gem::silentui::nullio#tty?()","gem::streamui#tty?()","gem::dependency#type()","gem::resolver::dependencyrequest#type()","gem::source#typo_squatting?()","gem::ui()","gem::defaultuserinteraction::ui()","gem::defaultuserinteraction#ui()","gem::defaultuserinteraction::ui=()","gem::defaultuserinteraction#ui=()","gem::uriformatter#unescape()","gem::commands::uninstallcommand#uninstall()","gem::uninstaller#uninstall()","gem::commands::uninstallcommand#uninstall_all()","gem::commands::cleanupcommand#uninstall_dep()","gem::commands::uninstallcommand#uninstall_gem()","gem::uninstaller#uninstall_gem()","gem::commands::setupcommand#uninstall_old_gemcutter()","gem::commands::uninstallcommand#uninstall_specific()","gem::installer#unpack()","gem::commandmanager#unregister_command()","gem::specification::unresolved_deps()","gem::specification::unresolved_specs()","gem::configfile#unset_api_key!()","gem::requestset::lockfile::tokenizer#unshift()","gem::resolver::molinillo::delegates::resolutionstate#unused_unwind_options()","gem::resolver::molinillo::resolver::resolution#unwind_for_conflict()","gem::resolver::molinillo::resolver::resolution#unwind_options_for_requirements()","gem::resolver::molinillo::resolver::resolution::unwinddetails#unwinding_to_primary_requirement?()","gem::resolver::molinillo::dependencygraph::action#up()","gem::resolver::molinillo::dependencygraph::addedgenocircular#up()","gem::resolver::molinillo::dependencygraph::deleteedge#up()","gem::resolver::molinillo::dependencygraph::detachvertexnamed#up()","gem::resolver::molinillo::dependencygraph::tag#up()","gem::streamui::silentdownloadreporter#update()","gem::streamui::threadeddownloadreporter#update()","gem::source#update_cache?()","gem::package::tarheader#update_checksum()","gem::commands::updatecommand#update_gem()","gem::commands::updatecommand#update_gems()","gem::indexer#update_index()","gem::commands::updatecommand#update_rubygems()","gem::gemcutterutilities#update_scope()","gem::indexer#update_specs_index()","gem::updatesuggestion#update_suggestion()","gem::streamui::silentprogressreporter#updated()","gem::streamui::simpleprogressreporter#updated()","gem::streamui::verboseprogressreporter#updated()","gem::command#usage()","gem::use_gemdeps()","gem::use_paths()","gem::defaultuserinteraction::use_ui()","gem::defaultuserinteraction#use_ui()","gem::request#user_agent()","gem::user_dir()","gem::user_home()","gem::commands::certcommand#valid_email?()","gem::uri#valid_uri?()","gem::specification#validate()","gem::specificationpolicy#validate()","gem::specificationpolicy#validate_array_attribute()","gem::specificationpolicy#validate_array_attributes()","gem::specificationpolicy#validate_attribute_present()","gem::specificationpolicy#validate_authors_field()","gem::specification#validate_dependencies()","gem::specificationpolicy#validate_lazy_metadata()","gem::specificationpolicy#validate_licenses()","gem::specificationpolicy#validate_licenses_length()","gem::specification#validate_metadata()","gem::specificationpolicy#validate_metadata()","gem::specificationpolicy#validate_name()","gem::specificationpolicy#validate_nil_attributes()","gem::specificationpolicy#validate_non_files()","gem::specificationpolicy#validate_optional()","gem::specification#validate_permissions()","gem::specificationpolicy#validate_permissions()","gem::specificationpolicy#validate_platform()","gem::specificationpolicy#validate_require_paths()","gem::specificationpolicy#validate_required!()","gem::specificationpolicy#validate_required_attributes()","gem::specificationpolicy#validate_rubygems_version()","gem::specificationpolicy#validate_self_inclusion_in_files_list()","gem::specificationpolicy#validate_shebang_line_in()","gem::specificationpolicy#validate_specification_version()","gem::specificationpolicy#validate_values()","gem::optionparser#ver()","gem::userinteraction#verbose()","gem::package#verify()","gem::package::old#verify()","gem::security::policy#verify()","gem::security::trustdir#verify()","gem::gemcutterutilities#verify_api_key()","gem::request::verify_certificate()","gem::request::verify_certificate_message()","gem::package#verify_entry()","gem::package#verify_files()","gem::security::policy#verify_signatures()","gem::installer#verify_spec()","gem::basicspecification#version()","gem::optionparser#version()","gem::resolver::activationrequest#version()","gem::resolver::specspecification#version()","gem::unsatisfiabledependencyerror#version()","gem::version#version()","gem::specification#version=()","gem::resolver::molinillo::dependencygraph#vertex_named()","gem::noaliasyamltree#visit_string()","gem::gemcutterutilities::webauthnlistener#wait_for_otp_code()","gem::gemcutterutilities#wait_for_otp_thread()","gem::optionparser#warn()","gem::uninstaller#warn_cannot_uninstall_default_gems()","gem::commands::querycommand#warning_without_suggested_alternatives()","gem::gemcutterutilities::webauthnpoller#webauthn_verification_poll_response()","gem::gemcutterutilities#webauthn_verification_url()","gem::command#when_invoked()","gem::commands::updatecommand#which_to_update()","gem::dependencylist#why_not_ok?()","gem::win_platform?()","gem::ext::cargobuilder#win_target?()","gem::installer#windows_stub_script()","gem::optionparser::with()","gem::resolver::molinillo::delegates::specificationprovider#with_no_such_dependency_error_handling()","gem::uri#with_redacted_password()","gem::uri#with_redacted_user()","gem::gemcutterutilities#with_response()","gem::platformmismatch#wordy()","gem::sourcefetchproblem#wordy()","gem::command#wrap()","gem::package::digestio::wrap()","gem::configfile#write()","gem::package::digestio#write()","gem::package::tarwriter::boundedstream#write()","gem::package::tarwriter::restrictedstream#write()","gem::requestset::lockfile#write()","gem::security::write()","gem::write_binary()","gem::installer#write_build_info_file()","gem::installer#write_cache_file()","gem::installer#write_default_spec()","gem::ext::cargobuilder#write_deffile()","gem::installer#write_spec()","gem::commands::yankcommand#yank_api_request()","gem::commands::yankcommand#yank_gem()"],"info":[["CoreExtensions","","CoreExtensions.html","",""],["CoreExtensions::TCPSocketExt","","CoreExtensions/TCPSocketExt.html","",""],["CoreExtensions::TCPSocketExt::Initializer","","CoreExtensions/TCPSocketExt/Initializer.html","",""],["Gem","","Gem.html","","<p>RubyGems is the Ruby standard for publishing and managing third party libraries.\n<p>For user documentation, …\n"],["Gem::AvailableSet","","Gem/AvailableSet.html","",""],["Gem::BasicSpecification","","Gem/BasicSpecification.html","","<p>BasicSpecification is an abstract class which implements some common code used by both Specification …\n"],["Gem::BundlerVersionFinder","","Gem/BundlerVersionFinder.html","",""],["Gem::Command","","Gem/Command.html","","<p>Base class for all Gem commands.  When creating a new gem command, define #initialize, #execute, #arguments …\n"],["Gem::CommandLineError","","Gem/CommandLineError.html","",""],["Gem::CommandManager","","Gem/CommandManager.html","","<p>The command manager registers and installs all the individual sub-commands supported by the gem command. …\n"],["Gem::Commands","","Gem/Commands.html","","<p>Commands will be placed in this namespace\n"],["Gem::Commands::BuildCommand","","Gem/Commands/BuildCommand.html","",""],["Gem::Commands::CertCommand","","Gem/Commands/CertCommand.html","",""],["Gem::Commands::CheckCommand","","Gem/Commands/CheckCommand.html","",""],["Gem::Commands::CleanupCommand","","Gem/Commands/CleanupCommand.html","",""],["Gem::Commands::ContentsCommand","","Gem/Commands/ContentsCommand.html","",""],["Gem::Commands::DependencyCommand","","Gem/Commands/DependencyCommand.html","",""],["Gem::Commands::EnvironmentCommand","","Gem/Commands/EnvironmentCommand.html","",""],["Gem::Commands::ExecCommand","","Gem/Commands/ExecCommand.html","",""],["Gem::Commands::FetchCommand","","Gem/Commands/FetchCommand.html","",""],["Gem::Commands::GenerateIndexCommand","","Gem/Commands/GenerateIndexCommand.html","","<p>Generates a index files for use as a gem server.\n<p>See ‘gem help generate_index`\n"],["Gem::Commands::HelpCommand","","Gem/Commands/HelpCommand.html","",""],["Gem::Commands::InfoCommand","","Gem/Commands/InfoCommand.html","",""],["Gem::Commands::InstallCommand","","Gem/Commands/InstallCommand.html","","<p>Gem installer command line tool\n<p>See ‘gem help install`\n"],["Gem::Commands::ListCommand","","Gem/Commands/ListCommand.html","","<p>Searches for gems starting with the supplied argument.\n"],["Gem::Commands::LockCommand","","Gem/Commands/LockCommand.html","",""],["Gem::Commands::MirrorCommand","","Gem/Commands/MirrorCommand.html","",""],["Gem::Commands::OpenCommand","","Gem/Commands/OpenCommand.html","",""],["Gem::Commands::OutdatedCommand","","Gem/Commands/OutdatedCommand.html","",""],["Gem::Commands::OwnerCommand","","Gem/Commands/OwnerCommand.html","",""],["Gem::Commands::PristineCommand","","Gem/Commands/PristineCommand.html","",""],["Gem::Commands::PushCommand","","Gem/Commands/PushCommand.html","",""],["Gem::Commands::QueryCommand","","Gem/Commands/QueryCommand.html","",""],["Gem::Commands::RdocCommand","","Gem/Commands/RdocCommand.html","",""],["Gem::Commands::SearchCommand","","Gem/Commands/SearchCommand.html","",""],["Gem::Commands::ServerCommand","","Gem/Commands/ServerCommand.html","",""],["Gem::Commands::SetupCommand","","Gem/Commands/SetupCommand.html","","<p>Installs RubyGems itself.  This command is ordinarily only available from a RubyGems checkout or tarball. …\n"],["Gem::Commands::SetupCommand::MakeDirs","","Gem/Commands/SetupCommand/MakeDirs.html","",""],["Gem::Commands::SigninCommand","","Gem/Commands/SigninCommand.html","",""],["Gem::Commands::SignoutCommand","","Gem/Commands/SignoutCommand.html","",""],["Gem::Commands::SourcesCommand","","Gem/Commands/SourcesCommand.html","",""],["Gem::Commands::SpecificationCommand","","Gem/Commands/SpecificationCommand.html","",""],["Gem::Commands::StaleCommand","","Gem/Commands/StaleCommand.html","",""],["Gem::Commands::UninstallCommand","","Gem/Commands/UninstallCommand.html","","<p>Gem uninstaller command line tool\n<p>See ‘gem help uninstall`\n"],["Gem::Commands::UnpackCommand","","Gem/Commands/UnpackCommand.html","",""],["Gem::Commands::UpdateCommand","","Gem/Commands/UpdateCommand.html","",""],["Gem::Commands::WhichCommand","","Gem/Commands/WhichCommand.html","",""],["Gem::Commands::YankCommand","","Gem/Commands/YankCommand.html","",""],["Gem::ConfigFile","","Gem/ConfigFile.html","","<p>Gem::ConfigFile RubyGems options and gem command options from gemrc.\n<p>gemrc is a YAML file that uses strings …\n"],["Gem::ConflictError","","Gem/ConflictError.html","","<p>Raised when there are conflicting gem specs loaded\n"],["Gem::ConsoleUI","","Gem/ConsoleUI.html","","<p>Subclass of StreamUI that instantiates the user interaction using STDIN, STDOUT, and STDERR.\n"],["Gem::DefaultUserInteraction","","Gem/DefaultUserInteraction.html","","<p>Module that defines the default UserInteraction.  Any class including this module will have access to …\n"],["Gem::Dependency","","Gem/Dependency.html","","<p>The Dependency class holds a Gem name and a Gem::Requirement.\n"],["Gem::DependencyError","","Gem/DependencyError.html","",""],["Gem::DependencyInstaller","","Gem/DependencyInstaller.html","","<p>Installs a gem along with all its dependencies from local and remote gems.\n"],["Gem::DependencyList","","Gem/DependencyList.html","","<p>Gem::DependencyList is used for installing and uninstalling gems in the correct order to avoid conflicts. …\n"],["Gem::DependencyRemovalException","","Gem/DependencyRemovalException.html","",""],["Gem::DependencyResolutionError","","Gem/DependencyResolutionError.html","","<p>Raised by Gem::Resolver when a Gem::Dependency::Conflict reaches the toplevel.  Indicates which dependencies …\n"],["Gem::Deprecate","","Gem/Deprecate.html","","<p>Provides 3 methods for declaring when something is going away.\n<p>+deprecate(name, repl, year, month)+:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Indicate</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Gem::Doctor","","Gem/Doctor.html","","<p>Cleans up after a partially-failed uninstall or for an invalid Gem::Specification.\n<p>If a specification …\n"],["Gem::DocumentError","","Gem/DocumentError.html","",""],["Gem::EndOfYAMLException","","Gem/EndOfYAMLException.html","","<p>Potentially raised when a specification is validated.\n"],["Gem::ErrorReason","","Gem/ErrorReason.html","",""],["Gem::Exception","","Gem/Exception.html","","<p>Base exception class for RubyGems.  All exception raised by RubyGems are a subclass of this one.\n"],["Gem::Ext","","Gem/Ext.html","","<p>Classes for building C extensions live here.\n"],["Gem::Ext::BuildError","","Gem/Ext/BuildError.html","",""],["Gem::Ext::Builder","","Gem/Ext/Builder.html","",""],["Gem::Ext::CargoBuilder","","Gem/Ext/CargoBuilder.html","","<p>This class is used by rubygems to build Rust extensions. It is a thin-wrapper over the ‘cargo rustc` …\n"],["Gem::Ext::CargoBuilder::DylibNotFoundError","","Gem/Ext/CargoBuilder/DylibNotFoundError.html","","<p>Error raised when no cdylib artifact was created\n"],["Gem::Ext::CargoBuilder::LinkFlagConverter","","Gem/Ext/CargoBuilder/LinkFlagConverter.html","","<p>Converts Ruby link flags into something cargo understands\n"],["Gem::Ext::CmakeBuilder","","Gem/Ext/CmakeBuilder.html","",""],["Gem::Ext::ConfigureBuilder","","Gem/Ext/ConfigureBuilder.html","",""],["Gem::Ext::ExtConfBuilder","","Gem/Ext/ExtConfBuilder.html","",""],["Gem::Ext::RakeBuilder","","Gem/Ext/RakeBuilder.html","",""],["Gem::FilePermissionError","","Gem/FilePermissionError.html","","<p>Signals that a file permission error is preventing the user from operating on the given directory.\n"],["Gem::FormatException","","Gem/FormatException.html","","<p>Used to raise parsing and loading errors\n"],["Gem::GemNotFoundException","","Gem/GemNotFoundException.html","",""],["Gem::GemNotInHomeException","","Gem/GemNotInHomeException.html","","<p>Raised when attempting to uninstall a gem that isn’t in GEM_HOME.\n"],["Gem::GemRunner","","Gem/GemRunner.html","","<p>Run an instance of the gem program.\n<p>Gem::GemRunner is only intended for internal use by RubyGems itself. …\n"],["Gem::GemcutterUtilities","","Gem/GemcutterUtilities.html","","<p>Utility methods for using the RubyGems API.\n<p>The WebauthnListener class retrieves an OTP after a user successfully …\n"],["Gem::GemcutterUtilities::WebauthnListener","","Gem/GemcutterUtilities/WebauthnListener.html","",""],["Gem::GemcutterUtilities::WebauthnListener::BadRequestResponse","","Gem/GemcutterUtilities/WebauthnListener/BadRequestResponse.html","",""],["Gem::GemcutterUtilities::WebauthnListener::MethodNotAllowedResponse","","Gem/GemcutterUtilities/WebauthnListener/MethodNotAllowedResponse.html","",""],["Gem::GemcutterUtilities::WebauthnListener::NoContentResponse","","Gem/GemcutterUtilities/WebauthnListener/NoContentResponse.html","",""],["Gem::GemcutterUtilities::WebauthnListener::NotFoundResponse","","Gem/GemcutterUtilities/WebauthnListener/NotFoundResponse.html","",""],["Gem::GemcutterUtilities::WebauthnListener::OkResponse","","Gem/GemcutterUtilities/WebauthnListener/OkResponse.html","",""],["Gem::GemcutterUtilities::WebauthnListener::Response","","Gem/GemcutterUtilities/WebauthnListener/Response.html","",""],["Gem::GemcutterUtilities::WebauthnListener::SocketResponder","","Gem/GemcutterUtilities/WebauthnListener/SocketResponder.html","",""],["Gem::GemcutterUtilities::WebauthnPoller","","Gem/GemcutterUtilities/WebauthnPoller.html","",""],["Gem::ImpossibleDependenciesError","","Gem/ImpossibleDependenciesError.html","","<p>Raised by Gem::Resolver when dependencies conflict and create the inability to find a valid possible …\n"],["Gem::Indexer","","Gem/Indexer.html","","<p>Top level class for building the gem repository index.\n"],["Gem::InstallError","","Gem/InstallError.html","",""],["Gem::InstallUpdateOptions","","Gem/InstallUpdateOptions.html","","<p>Mixin methods for install and update options for Gem::Commands\n"],["Gem::Installer","","Gem/Installer.html","","<p>The installer installs the files contained in the .gem into the Gem.home.\n<p>Gem::Installer does the work …\n"],["Gem::Installer::FakePackage","","Gem/Installer/FakePackage.html","",""],["Gem::InstallerUninstallerUtils","","Gem/InstallerUninstallerUtils.html","","<p>Helper methods for both Gem::Installer and Gem::Uninstaller\n"],["Gem::InvalidSpecificationException","","Gem/InvalidSpecificationException.html","","<p>Potentially raised when a specification is validated.\n"],["Gem::Licenses","","Gem/Licenses.html","",""],["Gem::List","","Gem/List.html","",""],["Gem::LoadError","","Gem/LoadError.html","","<p>Raised when RubyGems is unable to load or activate a gem.  Contains the name and version requirements …\n"],["Gem::LocalRemoteOptions","","Gem/LocalRemoteOptions.html","","<p>Mixin methods for local and remote Gem::Command options.\n"],["Gem::MissingSpecError","","Gem/MissingSpecError.html","","<p>Raised when trying to activate a gem, and that gem does not exist on the system.  Instead of rescuing …\n"],["Gem::MissingSpecVersionError","","Gem/MissingSpecVersionError.html","","<p>Raised when trying to activate a gem, and the gem exists on the system, but not the requested version. …\n"],["Gem::MockGemUi","","Gem/MockGemUi.html","","<p>This Gem::StreamUI subclass records input and output to StringIO for retrieval during tests.\n"],["Gem::MockGemUi::InputEOFError","","Gem/MockGemUi/InputEOFError.html","","<p>Raised when you haven’t provided enough input to your MockGemUi\n"],["Gem::MockGemUi::SystemExitException","","Gem/MockGemUi/SystemExitException.html","",""],["Gem::MockGemUi::TTY","","Gem/MockGemUi/TTY.html","",""],["Gem::MockGemUi::TermError","","Gem/MockGemUi/TermError.html","",""],["Gem::NameTuple","","Gem/NameTuple.html","","<p>Represents a gem of name <code>name</code> at <code>version</code> of <code>platform</code>. These wrap the data returned from the indexes. …\n"],["Gem::NoAliasYAMLTree","","Gem/NoAliasYAMLTree.html","",""],["Gem::OperationNotSupportedError","","Gem/OperationNotSupportedError.html","",""],["Gem::OptionParser","","Gem/OptionParser.html","","<p>Gem::OptionParser\n<p>New to Gem::OptionParser?\n<p>See the Tutorial.\n"],["Gem::OptionParser::AC","","Gem/OptionParser/AC.html","",""],["Gem::OptionParser::Acceptables","","Gem/OptionParser/Acceptables.html","","<p>Acceptable argument classes. Now contains DecimalInteger, OctalInteger and DecimalNumeric. See Acceptable …\n"],["Gem::OptionParser::AmbiguousArgument","","Gem/OptionParser/AmbiguousArgument.html","","<p>Raises when the given argument word can’t be completed uniquely.\n"],["Gem::OptionParser::AmbiguousOption","","Gem/OptionParser/AmbiguousOption.html","","<p>Raises when ambiguously completable string is encountered.\n"],["Gem::OptionParser::Arguable","","Gem/OptionParser/Arguable.html","","<p>Extends command line arguments array (ARGV) to parse itself.\n"],["Gem::OptionParser::CompletingHash","","Gem/OptionParser/CompletingHash.html","","<p>Hash with completion search feature. See Gem::OptionParser::Completion.\n"],["Gem::OptionParser::Completion","","Gem/OptionParser/Completion.html","","<p>Keyword completion module.  This allows partial arguments to be specified and resolved against a list …\n"],["Gem::OptionParser::InvalidArgument","","Gem/OptionParser/InvalidArgument.html","","<p>Raises when the given argument does not match required format.\n"],["Gem::OptionParser::InvalidOption","","Gem/OptionParser/InvalidOption.html","","<p>Raises when switch is undefined.\n"],["Gem::OptionParser::List","","Gem/OptionParser/List.html","","<p>Simple option list providing mapping from short and/or long option string to Gem::OptionParser::Switch …\n"],["Gem::OptionParser::MissingArgument","","Gem/OptionParser/MissingArgument.html","","<p>Raises when a switch with mandatory argument has no argument.\n"],["Gem::OptionParser::NeedlessArgument","","Gem/OptionParser/NeedlessArgument.html","","<p>Raises when there is an argument for a switch which takes no argument.\n"],["Gem::OptionParser::OptionMap","","Gem/OptionParser/OptionMap.html","","<p>Map from option/keyword string to object with completion.\n"],["Gem::OptionParser::ParseError","","Gem/OptionParser/ParseError.html","","<p>Base class of exceptions from Gem::OptionParser.\n"],["Gem::OptionParser::Switch","","Gem/OptionParser/Switch.html","","<p>Individual switch class.  Not important to the user.\n<p>Defined within Switch are several Switch-derived …\n"],["Gem::OptionParser::Switch::NoArgument","","Gem/OptionParser/Switch/NoArgument.html","","<p>Switch that takes no arguments.\n"],["Gem::OptionParser::Switch::OptionalArgument","","Gem/OptionParser/Switch/OptionalArgument.html","","<p>Switch that can omit argument.\n"],["Gem::OptionParser::Switch::PlacedArgument","","Gem/OptionParser/Switch/PlacedArgument.html","","<p>Switch that takes an argument, which does not begin with ‘-’ or is ‘-’.\n"],["Gem::OptionParser::Switch::RequiredArgument","","Gem/OptionParser/Switch/RequiredArgument.html","","<p>Switch that takes an argument.\n"],["Gem::Package","","Gem/Package.html","","<p>Example using a Gem::Package\n<p>Builds a .gem file given a Gem::Specification. A .gem file is a tarball which …\n"],["Gem::Package::DigestIO","","Gem/Package/DigestIO.html","","<p>IO wrapper that creates digests of contents written to the IO it wraps.\n"],["Gem::Package::Error","","Gem/Package/Error.html","",""],["Gem::Package::FormatError","","Gem/Package/FormatError.html","",""],["Gem::Package::NonSeekableIO","","Gem/Package/NonSeekableIO.html","",""],["Gem::Package::Old","","Gem/Package/Old.html","","<p>The format class knows the guts of the ancient .gem file format and provides the capability to read such …\n"],["Gem::Package::PathError","","Gem/Package/PathError.html","",""],["Gem::Package::SymlinkError","","Gem/Package/SymlinkError.html","",""],["Gem::Package::TarHeader","","Gem/Package/TarHeader.html","","<p>A header for a tar file\n"],["Gem::Package::TarInvalidError","","Gem/Package/TarInvalidError.html","","<p>Raised when a tar file is corrupt\n"],["Gem::Package::TarReader","","Gem/Package/TarReader.html","","<p>TarReader reads tar files and allows iteration over their items\n"],["Gem::Package::TarReader::Entry","","Gem/Package/TarReader/Entry.html","","<p>Class for reading entries out of a tar file\n"],["Gem::Package::TarReader::UnexpectedEOF","","Gem/Package/TarReader/UnexpectedEOF.html","","<p>Raised if the tar IO is not seekable\n"],["Gem::Package::TarWriter","","Gem/Package/TarWriter.html","","<p>Allows writing of tar files\n"],["Gem::Package::TarWriter::BoundedStream","","Gem/Package/TarWriter/BoundedStream.html","","<p>IO wrapper that allows writing a limited amount of data\n"],["Gem::Package::TarWriter::FileOverflow","","Gem/Package/TarWriter/FileOverflow.html","",""],["Gem::Package::TarWriter::RestrictedStream","","Gem/Package/TarWriter/RestrictedStream.html","","<p>IO wrapper that provides only #write\n"],["Gem::Package::TooLongFileName","","Gem/Package/TooLongFileName.html","",""],["Gem::PackageTask","","Gem/PackageTask.html","","<p>Create a package based upon a Gem::Specification.  Gem packages, as well as zip files and tar/gzipped …\n"],["Gem::PathSupport","","Gem/PathSupport.html","","<p>Gem::PathSupport facilitates the GEM_HOME and GEM_PATH environment settings to the rest of RubyGems. …\n"],["Gem::Platform","","Gem/Platform.html","","<p>Available list of platforms for targeting Gem installations.\n<p>See ‘gem help platform` for information on …\n"],["Gem::PlatformMismatch","","Gem/PlatformMismatch.html","","<p>Generated when trying to lookup a gem to indicate that the gem was found, but that it isn’t usable …\n"],["Gem::QueryUtils","","Gem/QueryUtils.html","",""],["Gem::RemoteError","","Gem/RemoteError.html","","<p>Signals that a remote operation cannot be conducted, probably due to not being connected (or just not …\n"],["Gem::RemoteFetcher","","Gem/RemoteFetcher.html","","<p>RemoteFetcher handles the details of fetching gems and gem information from a remote source.\n"],["Gem::RemoteFetcher::FetchError","","Gem/RemoteFetcher/FetchError.html","","<p>A FetchError exception wraps up the various possible IO and HTTP failures that could happen while downloading …\n"],["Gem::RemoteFetcher::UnknownHostError","","Gem/RemoteFetcher/UnknownHostError.html","","<p>A FetchError that indicates that the reason for not being able to fetch data was that the host could …\n"],["Gem::RemoteInstallationCancelled","","Gem/RemoteInstallationCancelled.html","",""],["Gem::RemoteInstallationSkipped","","Gem/RemoteInstallationSkipped.html","",""],["Gem::RemoteSourceException","","Gem/RemoteSourceException.html","","<p>Represents an error communicating via HTTP.\n"],["Gem::Request","","Gem/Request.html","",""],["Gem::RequestSet","","Gem/RequestSet.html","","<p>A RequestSet groups a request to activate a set of dependencies.\n\n<pre>nokogiri = Gem::Dependency.new &#39;nokogiri&#39;, ...</pre>\n"],["Gem::RequestSet::GemDependencyAPI","","Gem/RequestSet/GemDependencyAPI.html","","<p>A semi-compatible DSL for the Bundler Gemfile and Isolate gem dependencies files.\n<p>To work with both the …\n"],["Gem::RequestSet::Lockfile","","Gem/RequestSet/Lockfile.html","","<p>Parses a gem.deps.rb.lock file and constructs a LockSet containing the dependencies found inside.  If …\n"],["Gem::RequestSet::Lockfile::ParseError","","Gem/RequestSet/Lockfile/ParseError.html","","<p>Raised when a lockfile cannot be parsed\n"],["Gem::RequestSet::Lockfile::Parser","","Gem/RequestSet/Lockfile/Parser.html","",""],["Gem::RequestSet::Lockfile::Tokenizer","","Gem/RequestSet/Lockfile/Tokenizer.html","",""],["Gem::Requirement","","Gem/Requirement.html","","<p>A Requirement is a set of one or more version restrictions. It supports a few (<code>=, !=, &gt;, &lt;, &gt;=,</code> …\n"],["Gem::Requirement::BadRequirementError","","Gem/Requirement/BadRequirementError.html","","<p>Raised when a bad requirement is encountered\n"],["Gem::Resolver","","Gem/Resolver.html","","<p>Given a set of Gem::Dependency objects as <code>needed</code> and a way to query the set of available specs via <code>set</code> …\n"],["Gem::Resolver::APISet","","Gem/Resolver/APISet.html","","<p>The global rubygems pool, available via the rubygems.org API. Returns instances of APISpecification. …\n"],["Gem::Resolver::APISet::GemParser","","Gem/Resolver/APISet/GemParser.html","",""],["Gem::Resolver::APISpecification","","Gem/Resolver/APISpecification.html","","<p>Represents a specification retrieved via the rubygems.org API.\n<p>This is used to avoid loading the full …\n"],["Gem::Resolver::ActivationRequest","","Gem/Resolver/ActivationRequest.html","","<p>Specifies a Specification object that should be activated.  Also contains a dependency that was used …\n"],["Gem::Resolver::BestSet","","Gem/Resolver/BestSet.html","","<p>The BestSet chooses the best available method to query a remote index.\n<p>It combines IndexSet and APISet …\n"],["Gem::Resolver::ComposedSet","","Gem/Resolver/ComposedSet.html","","<p>A ComposedSet allows multiple sets to be queried like a single set.\n<p>To create a composed set with any …\n"],["Gem::Resolver::Conflict","","Gem/Resolver/Conflict.html","","<p>Used internally to indicate that a dependency conflicted with a spec that would be activated.\n"],["Gem::Resolver::CurrentSet","","Gem/Resolver/CurrentSet.html","","<p>A set which represents the installed gems. Respects all the normal settings that control where to look …\n"],["Gem::Resolver::DependencyRequest","","Gem/Resolver/DependencyRequest.html","","<p>Used Internally. Wraps a Dependency object to also track which spec contained the Dependency.\n"],["Gem::Resolver::GitSet","","Gem/Resolver/GitSet.html","","<p>A GitSet represents gems that are sourced from git repositories.\n<p>This is used for gem dependency file …\n"],["Gem::Resolver::GitSpecification","","Gem/Resolver/GitSpecification.html","","<p>A GitSpecification represents a gem that is sourced from a git repository and is being loaded through …\n"],["Gem::Resolver::IndexSet","","Gem/Resolver/IndexSet.html","","<p>The global rubygems pool represented via the traditional source index.\n"],["Gem::Resolver::IndexSpecification","","Gem/Resolver/IndexSpecification.html","","<p>Represents a possible Specification object returned from IndexSet.  Used to delay needed to download …\n"],["Gem::Resolver::InstalledSpecification","","Gem/Resolver/InstalledSpecification.html","","<p>An InstalledSpecification represents a gem that is already installed locally.\n"],["Gem::Resolver::InstallerSet","","Gem/Resolver/InstallerSet.html","","<p>A set of gems for installation sourced from remote sources and local .gem files\n"],["Gem::Resolver::LocalSpecification","","Gem/Resolver/LocalSpecification.html","","<p>A LocalSpecification comes from a .gem file on the local filesystem.\n"],["Gem::Resolver::LockSet","","Gem/Resolver/LockSet.html","","<p>A set of gems from a gem dependencies lockfile.\n"],["Gem::Resolver::LockSpecification","","Gem/Resolver/LockSpecification.html","","<p>The LockSpecification comes from a lockfile (Gem::RequestSet::Lockfile).\n<p>A LockSpecification’s dependency …\n"],["Gem::Resolver::Molinillo","","Gem/Resolver/Molinillo.html","","<p>Gem::Resolver::Molinillo is a generic dependency resolution algorithm.\n"],["Gem::Resolver::Molinillo::CircularDependencyError","","Gem/Resolver/Molinillo/CircularDependencyError.html","","<p>An error caused by attempting to fulfil a dependency that was circular\n<p>@note This exception will be thrown …\n"],["Gem::Resolver::Molinillo::Delegates","","Gem/Resolver/Molinillo/Delegates.html","","<p>@!visibility private\n"],["Gem::Resolver::Molinillo::Delegates::ResolutionState","","Gem/Resolver/Molinillo/Delegates/ResolutionState.html","","<p>Delegates all {Gem::Resolver::Molinillo::ResolutionState} methods to a ‘#state` property.\n"],["Gem::Resolver::Molinillo::Delegates::SpecificationProvider","","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html","","<p>Delegates all {Gem::Resolver::Molinillo::SpecificationProvider} methods to a ‘#specification_provider` …\n"],["Gem::Resolver::Molinillo::DependencyGraph","","Gem/Resolver/Molinillo/DependencyGraph.html","","<p>A directed acyclic graph that is tuned to hold named dependencies\n"],["Gem::Resolver::Molinillo::DependencyGraph::Action","","Gem/Resolver/Molinillo/DependencyGraph/Action.html","","<p>An action that modifies a {DependencyGraph} that is reversible. @abstract\n"],["Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html","","<p>@!visibility private (see DependencyGraph#add_edge_no_circular)\n"],["Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html","","<p>@!visibility private (see DependencyGraph#delete_edge)\n"],["Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html","","<p>@!visibility private @see DependencyGraph#detach_vertex_named\n"],["Gem::Resolver::Molinillo::DependencyGraph::Log","","Gem/Resolver/Molinillo/DependencyGraph/Log.html","","<p>A log for dependency graph actions\n"],["Gem::Resolver::Molinillo::DependencyGraph::Tag","","Gem/Resolver/Molinillo/DependencyGraph/Tag.html","","<p>@!visibility private @see DependencyGraph#tag\n"],["Gem::Resolver::Molinillo::DependencyGraph::Vertex","","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html","","<p>A vertex in a {DependencyGraph} that encapsulates a {#name} and a {#payload}\n"],["Gem::Resolver::Molinillo::DependencyState","","Gem/Resolver/Molinillo/DependencyState.html","","<p>A state that encapsulates a set of {#requirements} with an {Array} of possibilities\n"],["Gem::Resolver::Molinillo::NoSuchDependencyError","","Gem/Resolver/Molinillo/NoSuchDependencyError.html","","<p>An error caused by searching for a dependency that is completely unknown, i.e. has no versions available …\n"],["Gem::Resolver::Molinillo::PossibilityState","","Gem/Resolver/Molinillo/PossibilityState.html","","<p>A state that encapsulates a single possibility to fulfill the given {#requirement}\n"],["Gem::Resolver::Molinillo::ResolutionState","","Gem/Resolver/Molinillo/ResolutionState.html","",""],["Gem::Resolver::Molinillo::Resolver","","Gem/Resolver/Molinillo/Resolver.html","","<p>This class encapsulates a dependency resolver. The resolver is responsible for determining which set …\n"],["Gem::Resolver::Molinillo::Resolver::Resolution","","Gem/Resolver/Molinillo/Resolver/Resolution.html","","<p>A specific resolution from a given {Resolver}\n"],["Gem::Resolver::Molinillo::Resolver::Resolution::Conflict","","Gem/Resolver/Molinillo/Resolver/Resolution/Conflict.html","",""],["Gem::Resolver::Molinillo::Resolver::Resolution::PossibilitySet","","Gem/Resolver/Molinillo/Resolver/Resolution/PossibilitySet.html","",""],["Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails","","Gem/Resolver/Molinillo/Resolver/Resolution/UnwindDetails.html","",""],["Gem::Resolver::Molinillo::ResolverError","","Gem/Resolver/Molinillo/ResolverError.html","","<p>An error that occurred during the resolution process\n"],["Gem::Resolver::Molinillo::SpecificationProvider","","Gem/Resolver/Molinillo/SpecificationProvider.html","","<p>Provides information about specifications and dependencies to the resolver, allowing the {Resolver} class …\n"],["Gem::Resolver::Molinillo::UI","","Gem/Resolver/Molinillo/UI.html","","<p>Conveys information about the resolution process to a user.\n"],["Gem::Resolver::Molinillo::VersionConflict","","Gem/Resolver/Molinillo/VersionConflict.html","","<p>An error caused by conflicts in version\n"],["Gem::Resolver::RequirementList","","Gem/Resolver/RequirementList.html","","<p>The RequirementList is used to hold the requirements being considered while resolving a set of gems. …\n"],["Gem::Resolver::Set","","Gem/Resolver/Set.html","","<p>Resolver sets are used to look up specifications (and their dependencies) used in resolution.  This set …\n"],["Gem::Resolver::SourceSet","","Gem/Resolver/SourceSet.html","","<p>The SourceSet chooses the best available method to query a remote index.\n<p>Kind off like BestSet but filters …\n"],["Gem::Resolver::SpecSpecification","","Gem/Resolver/SpecSpecification.html","","<p>The Resolver::SpecSpecification contains common functionality for Resolver specifications that are backed …\n"],["Gem::Resolver::Specification","","Gem/Resolver/Specification.html","","<p>A Resolver::Specification contains a subset of the information contained in a Gem::Specification.  Only …\n"],["Gem::Resolver::Stats","","Gem/Resolver/Stats.html","",""],["Gem::Resolver::VendorSet","","Gem/Resolver/VendorSet.html","","<p>A VendorSet represents gems that have been unpacked into a specific directory that contains a gemspec. …\n"],["Gem::Resolver::VendorSpecification","","Gem/Resolver/VendorSpecification.html","","<p>A VendorSpecification represents a gem that has been unpacked into a project and is being loaded through …\n"],["Gem::RubyVersionMismatch","","Gem/RubyVersionMismatch.html","","<p>Raised when a gem dependencies file specifies a ruby version that does not match the current version. …\n"],["Gem::RuntimeRequirementNotMetError","","Gem/RuntimeRequirementNotMetError.html","",""],["Gem::S3URISigner","","Gem/S3URISigner.html","","<p>S3URISigner implements AWS SigV4 for S3 Source to avoid a dependency on the aws-sdk-* gems More on AWS …\n"],["Gem::S3URISigner::ConfigurationError","","Gem/S3URISigner/ConfigurationError.html","",""],["Gem::S3URISigner::InstanceProfileError","","Gem/S3URISigner/InstanceProfileError.html","",""],["Gem::SafeYAML","","Gem/SafeYAML.html","","<p>This module is used for safely loading YAML specs from a gem.  The ‘safe_load` method defined on this …\n"],["Gem::Security","","Gem/Security.html","","<p>Signing gems\n<p>The Gem::Security implements cryptographic signatures for gems.  The section below is a step-by-step …\n"],["Gem::Security::Exception","","Gem/Security/Exception.html","","<p>Gem::Security default exception type\n"],["Gem::Security::Policy","","Gem/Security/Policy.html","","<p>A Gem::Security::Policy object encapsulates the settings for verifying signed gem files.  This is the …\n"],["Gem::Security::Signer","","Gem/Security/Signer.html","",""],["Gem::Security::TrustDir","","Gem/Security/TrustDir.html","","<p>The TrustDir manages the trusted certificates for gem signature verification.\n"],["Gem::SecurityOption","","Gem/SecurityOption.html","","<p>Mixin methods for security option for Gem::Commands\n"],["Gem::SilentUI","","Gem/SilentUI.html","","<p>SilentUI is a UI choice that is absolutely silent.\n"],["Gem::SilentUI::NullIO","","Gem/SilentUI/NullIO.html","","<p>An absolutely silent IO.\n"],["Gem::Source","","Gem/Source.html","","<p>A Source knows how to list and fetch gems from a RubyGems marshal index.\n<p>There are other Source subclasses …\n"],["Gem::Source::Git","","Gem/Source/Git.html","","<p>A git gem for use in a gem dependencies file.\n<p>Example:\n\n<pre>source =\n  Gem::Source::Git.new &#39;rake&#39;, &#39;git@example:rake.git&#39;, ...</pre>\n"],["Gem::Source::Installed","","Gem/Source/Installed.html","","<p>Represents an installed gem.  This is used for dependency resolution.\n"],["Gem::Source::Local","","Gem/Source/Local.html","","<p>The local source finds gems in the current directory for fulfilling dependencies.\n"],["Gem::Source::Lock","","Gem/Source/Lock.html","","<p>A Lock source wraps an installed gem’s source and sorts before other sources during dependency resolution. …\n"],["Gem::Source::SpecificFile","","Gem/Source/SpecificFile.html","","<p>A source representing a single .gem file.  This is used for installation of local gems.\n"],["Gem::Source::Vendor","","Gem/Source/Vendor.html","","<p>This represents a vendored source that is similar to an installed gem.\n"],["Gem::SourceFetchProblem","","Gem/SourceFetchProblem.html","","<p>An error that indicates we weren’t able to fetch some data from a source\n"],["Gem::SourceList","","Gem/SourceList.html","","<p>The SourceList represents the sources rubygems has been configured to use. A source may be created from …\n"],["Gem::SpecFetcher","","Gem/SpecFetcher.html","","<p>SpecFetcher handles metadata updates from remote gem repositories.\n"],["Gem::SpecificGemNotFoundException","","Gem/SpecificGemNotFoundException.html","","<p>Raised by the DependencyInstaller when a specific gem cannot be found\n"],["Gem::Specification","","Gem/Specification.html","","<p>The Specification class contains the information for a gem.  Typically defined in a .gemspec file or …\n"],["Gem::SpecificationPolicy","","Gem/SpecificationPolicy.html","",""],["Gem::StreamUI","","Gem/StreamUI.html","","<p>Gem::StreamUI implements a simple stream based user interface.\n"],["Gem::StreamUI::SilentDownloadReporter","","Gem/StreamUI/SilentDownloadReporter.html","","<p>An absolutely silent download reporter.\n"],["Gem::StreamUI::SilentProgressReporter","","Gem/StreamUI/SilentProgressReporter.html","","<p>An absolutely silent progress reporter.\n"],["Gem::StreamUI::SimpleProgressReporter","","Gem/StreamUI/SimpleProgressReporter.html","","<p>A basic dotted progress reporter.\n"],["Gem::StreamUI::ThreadedDownloadReporter","","Gem/StreamUI/ThreadedDownloadReporter.html","","<p>A progress reporter that behaves nicely with threaded downloading.\n"],["Gem::StreamUI::VerboseProgressReporter","","Gem/StreamUI/VerboseProgressReporter.html","","<p>A progress reporter that prints out messages about the current progress.\n"],["Gem::StubSpecification","","Gem/StubSpecification.html","","<p>Gem::StubSpecification reads the stub: line from the gemspec.  This prevents us having to eval the entire …\n"],["Gem::SystemExitException","","Gem/SystemExitException.html","","<p>Raised to indicate that a system exit should occur with the specified exit_code\n"],["Gem::TSort","","Gem/TSort.html","","<p>Gem::TSort implements topological sorting using Tarjan’s algorithm for strongly connected components. …\n"],["Gem::TSort::Cyclic","","Gem/TSort/Cyclic.html","",""],["Gem::Text","","Gem/Text.html","","<p>A collection of text-wrangling methods\n"],["Gem::UninstallError","","Gem/UninstallError.html","","<p>Raised when removing a gem with the uninstall command fails\n"],["Gem::Uninstaller","","Gem/Uninstaller.html","","<p>An Uninstaller.\n<p>The uninstaller fires pre and post uninstall hooks.  Hooks can be added either through …\n"],["Gem::UnknownCommandError","","Gem/UnknownCommandError.html","",""],["Gem::UnknownCommandSpellChecker","","Gem/UnknownCommandSpellChecker.html","",""],["Gem::UnsatisfiableDependencyError","","Gem/UnsatisfiableDependencyError.html","","<p>Raised by Resolver when a dependency requests a gem for which there is no spec.\n"],["Gem::UpdateSuggestion","","Gem/UpdateSuggestion.html","","<p>Mixin methods for Gem::Command to promote available RubyGems update\n"],["Gem::Uri","","Gem/Uri.html","","<p>The Uri handles rubygems source URIs.\n"],["Gem::UriFormatter","","Gem/UriFormatter.html","","<p>The UriFormatter handles URIs from user-input and escaping.\n\n<pre>uf = Gem::UriFormatter.new &#39;example.com&#39;\n ...</pre>\n"],["Gem::UserInteraction","","Gem/UserInteraction.html","","<p>UserInteraction allows RubyGems to interact with the user through standard methods that can be replaced …\n"],["Gem::Util","","Gem/Util.html","","<p>This module contains various utility methods as module methods.\n"],["Gem::Validator","","Gem/Validator.html","","<p>Validator performs various gem file and gem database validation\n"],["Gem::VerificationError","","Gem/VerificationError.html","","<p>Raised by Gem::Validator when something is not right in a gem.\n"],["Gem::Version","","Gem/Version.html","","<p>The Version class processes string versions into comparable values. A version string should normally …\n"],["Gem::VersionOption","","Gem/VersionOption.html","","<p>Mixin methods for –version and –platform Gem::Command options.\n"],["Gem::WebauthnVerificationError","","Gem/WebauthnVerificationError.html","","<p>Raised by Gem::WebauthnListener when an error occurs during security device verification.\n"],["Kernel","","Kernel.html","",""],["<<","Gem::AvailableSet","Gem/AvailableSet.html#method-i-3C-3C","(o)",""],["<<","Gem::SourceList","Gem/SourceList.html#method-i-3C-3C","(obj)","<p>Appends <code>obj</code> to the source list which may be a Gem::Source, URI or URI String.\n"],["<=>","Gem::Dependency","Gem/Dependency.html#method-i-3C-3D-3E","(other)","<p>Dependencies are ordered by name.\n"],["<=>","Gem::NameTuple","Gem/NameTuple.html#method-i-3C-3D-3E","(other)",""],["<=>","Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails","Gem/Resolver/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-3C-3D-3E","(other)","<p>We compare UnwindDetails when choosing which state to unwind to. If two options have the same state_index …\n"],["<=>","Gem::Source","Gem/Source.html#method-i-3C-3D-3E","(other)","<p>Sources are ordered by installation preference.\n"],["<=>","Gem::Source::Git","Gem/Source/Git.html#method-i-3C-3D-3E","(other)",""],["<=>","Gem::Source::Installed","Gem/Source/Installed.html#method-i-3C-3D-3E","(other)","<p>Installed sources sort before all other sources\n"],["<=>","Gem::Source::Local","Gem/Source/Local.html#method-i-3C-3D-3E","(other)","<p>Local sorts before Gem::Source and after Gem::Source::Installed\n"],["<=>","Gem::Source::SpecificFile","Gem/Source/SpecificFile.html#method-i-3C-3D-3E","(other)","<p>Orders this source against <code>other</code>.\n<p>If <code>other</code> is a SpecificFile from a different gem name <code>nil</code> is returned. …\n"],["<=>","Gem::Source::Vendor","Gem/Source/Vendor.html#method-i-3C-3D-3E","(other)",""],["<=>","Gem::Version","Gem/Version.html#method-i-3C-3D-3E","(other)","<p>Compares this version with <code>other</code> returning -1, 0, or 1 if the other version is larger, the same, or smaller …\n"],["==","Gem::NameTuple","Gem/NameTuple.html#method-i-3D-3D","(other)","<p>Compare with <code>other</code>. Supports another NameTuple or an Array in the [name, version, platform] format.\n"],["==","Gem::Platform","Gem/Platform.html#method-i-3D-3D","(other)","<p>Is <code>other</code> equal to this platform?  Two platforms are equal if they have the same CPU, OS and version. …\n"],["==","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-i-3D-3D","(other)",""],["==","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-3D-3D","(other)","<p>@param [DependencyGraph] other @return [Boolean] whether the two dependency graphs are equal, determined …\n"],["==","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-3D-3D","(other)","<p>@return [Boolean] whether the two vertices are equal, determined\n\n<pre>by a recursive traversal of each {Vertex#successors}</pre>\n"],["===","Gem::Dependency","Gem/Dependency.html#method-i-3D-3D-3D","(other)",""],["===","Gem::Platform","Gem/Platform.html#method-i-3D-3D-3D","(other)","<p>Does <code>other</code> match this platform?  Two platforms match if they have the same CPU, or either has a CPU of …\n"],["===","Gem::Requirement","Gem/Requirement.html#method-i-3D-3D-3D","(version)",""],["=~","Gem::Dependency","Gem/Dependency.html#method-i-3D~","(other)","<p>Uses this dependency as a pattern to compare to <code>other</code>. This dependency will match if the name matches …\n"],["=~","Gem::Platform","Gem/Platform.html#method-i-3D~","(other)","<p>Does <code>other</code> match this platform?  If <code>other</code> is a String it will be converted to a Gem::Platform first. …\n"],["=~","Gem::Requirement","Gem/Requirement.html#method-i-3D~","(version)",""],["[]","Gem::CommandManager","Gem/CommandManager.html#method-i-5B-5D","(command_name)","<p>Returns a Command instance for <code>command_name</code>\n"],["[]","Gem::ConfigFile","Gem/ConfigFile.html#method-i-5B-5D","(key)","<p>Return the configuration information for <code>key</code>.\n"],["[]=","Gem::ConfigFile","Gem/ConfigFile.html#method-i-5B-5D-3D","(key, value)","<p>Set configuration option <code>key</code> to <code>value</code>.\n"],["_ac_arg_enable","Gem::OptionParser::AC","Gem/OptionParser/AC.html#method-i-_ac_arg_enable","(prefix, name, help_string, block)",""],["_check_ac_args","Gem::OptionParser::AC","Gem/OptionParser/AC.html#method-i-_check_ac_args","(name, block)",""],["_dump","Gem::Specification","Gem/Specification.html#method-i-_dump","(limit)","<p>Dump only crucial instance variables.\n"],["_gets_noecho","Gem::StreamUI","Gem/StreamUI.html#method-i-_gets_noecho","()",""],["_load","Gem::Specification","Gem/Specification.html#method-c-_load","(str)","<p>Load custom marshal format, re-initializing defaults as needed\n"],["_path_to?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-_path_to-3F","(other, visited = new_vertex_set)","<p>@param [Vertex] other the vertex to check if there’s a path to @param [Set&lt;Vertex&gt;] visited …\n"],["_recursive_predecessors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-_recursive_predecessors","(vertices = new_vertex_set)","<p>@param [Set&lt;Vertex&gt;] vertices the set to add the predecessors to @return [Set&lt;Vertex&gt;] the …\n"],["_recursive_successors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-_recursive_successors","(vertices = new_vertex_set)","<p>@param [Set&lt;Vertex&gt;] vertices the set to add the successors to @return [Set&lt;Vertex&gt;] the …\n"],["_segments","Gem::Version","Gem/Version.html#method-i-_segments","()",""],["_sorted_requirements","Gem::Requirement","Gem/Requirement.html#method-i-_sorted_requirements","()",""],["_split_segments","Gem::Version","Gem/Version.html#method-i-_split_segments","()",""],["_tilde_requirements","Gem::Requirement","Gem/Requirement.html#method-i-_tilde_requirements","()",""],["_version","Gem::Version","Gem/Version.html#method-i-_version","()",""],["abbreviate","Gem::Specification","Gem/Specification.html#method-i-abbreviate","()","<p>Abbreviate the spec for downloading.  Abbreviated specs are only used for searching, downloading and …\n"],["abort","Gem::OptionParser","Gem/OptionParser.html#method-i-abort","(mesg = $!)",""],["ac_arg_disable","Gem::OptionParser::AC","Gem/OptionParser/AC.html#method-i-ac_arg_disable","(name, help_string, &block)",""],["ac_arg_enable","Gem::OptionParser::AC","Gem/OptionParser/AC.html#method-i-ac_arg_enable","(name, help_string, &block)",""],["ac_arg_with","Gem::OptionParser::AC","Gem/OptionParser/AC.html#method-i-ac_arg_with","(name, help_string, &block)",""],["accept","Gem::OptionParser","Gem/OptionParser.html#method-i-accept","(*args, &blk)","<p>Directs to accept specified class <code>t</code>. The argument string is passed to the block in which it should be …\n"],["accept","Gem::OptionParser","Gem/OptionParser.html#method-c-accept","(*args, &blk)","<p>See #accept.\n"],["accept","Gem::OptionParser::List","Gem/OptionParser/List.html#method-i-accept","(t, pat = /.*/m, &block)","<p>See Gem::OptionParser.accept.\n"],["accept_uri_http","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-accept_uri_http","()","<p>Allows Gem::OptionParser to handle HTTP URIs.\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::Action","Gem/Resolver/Molinillo/DependencyGraph/Action.html#method-c-action_name","()","<p>@return [Symbol] The name of the action.\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-c-action_name","()","<p>(see Action.action_name)\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-c-action_name","()","<p>(see Action.action_name)\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html#method-c-action_name","()","<p>(see Action#name)\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::Tag","Gem/Resolver/Molinillo/DependencyGraph/Tag.html#method-c-action_name","()","<p>(see Action.action_name)\n"],["activate","Gem::Specification","Gem/Specification.html#method-i-activate","()","<p>Activate this spec, registering it as a loaded spec and adding it’s lib paths to $LOAD_PATH. Returns …\n"],["activate!","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-activate-21","()",""],["activate_dependencies","Gem::Specification","Gem/Specification.html#method-i-activate_dependencies","()","<p>Activate all unambiguously resolved runtime dependencies of this spec. Add any ambiguous dependencies …\n"],["activate_new_spec","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-activate_new_spec","()","<p>Add the current {#possibility} to the dependency graph of the current {#state} @return [void]\n"],["activated","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-activated","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#activated)\n"],["activated?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-activated-3F","()","<p>True when the gem has been activated\n"],["activated_gem_paths","Gem","Gem.html#method-c-activated_gem_paths","()","<p>The number of paths in the +$LOAD_PATH+ from activated gems. Used to prioritize <code>-I</code> and +ENV+ entries …\n"],["active_count","Gem::DependencyList","Gem/DependencyList.html#method-i-active_count","(specs, ignored)","<p>Count the number of gemspecs in the list <code>specs</code> that are not in <code>ignored</code>.\n"],["add","Gem::AvailableSet","Gem/AvailableSet.html#method-i-add","(spec, source)",""],["add","Gem::DependencyList","Gem/DependencyList.html#method-i-add","(*gemspecs)","<p>Adds <code>gemspecs</code> to the dependency list.\n"],["add","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-add","(req)","<p>Adds Resolver::DependencyRequest <code>req</code> to this requirements list.\n"],["add_GIT","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-add_GIT","(out, git_requests)",""],["add_access_control_headers","Gem::GemcutterUtilities::WebauthnListener::MethodNotAllowedResponse","Gem/GemcutterUtilities/WebauthnListener/MethodNotAllowedResponse.html#method-i-add_access_control_headers","()",""],["add_access_control_headers","Gem::GemcutterUtilities::WebauthnListener::Response","Gem/GemcutterUtilities/WebauthnListener/Response.html#method-i-add_access_control_headers","()",""],["add_always_install","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-add_always_install","(dependency)","<p>Looks up the latest specification for <code>dependency</code> and adds it to the always_install list.\n"],["add_bindir","Gem::Specification","Gem/Specification.html#method-i-add_bindir","(executables)","<p>Returns an array with bindir attached to each executable in the <code>executables</code> list\n"],["add_body","Gem::GemcutterUtilities::WebauthnListener::Response","Gem/GemcutterUtilities/WebauthnListener/Response.html#method-i-add_body","()",""],["add_bulk_threshold_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_bulk_threshold_option","()","<p>Add the –bulk-threshold option\n"],["add_checksums","Gem::Package","Gem/Package.html#method-i-add_checksums","(tar)","<p>Adds a checksum for each entry in the gem to checksums.yaml.gz.\n"],["add_child_vertex","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-add_child_vertex","(name, payload, parent_names, requirement)","<p>@param [String] name @param [Object] payload @param [Array&lt;String&gt;] parent_names @param [Object] …\n"],["add_clear_sources_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_clear_sources_option","()","<p>Add the –clear-sources option\n"],["add_common_option","Gem::Command","Gem/Command.html#method-c-add_common_option","(*args, &handler)",""],["add_connection_header","Gem::GemcutterUtilities::WebauthnListener::Response","Gem/GemcutterUtilities/WebauthnListener/Response.html#method-i-add_connection_header","()",""],["add_dependency","Gem::Specification","Gem/Specification.html#method-i-add_dependency","(gem, *requirements)",""],["add_dependency_with_type","Gem::Specification","Gem/Specification.html#method-i-add_dependency_with_type","(dependency, type, requirements)","<p>Adds a dependency on gem <code>dependency</code> with type <code>type</code> that requires <code>requirements</code>.  Valid types are currently …\n"],["add_development_dependency","Gem::Specification","Gem/Specification.html#method-i-add_development_dependency","(gem, *requirements)","<p>Adds a development dependency named <code>gem</code> with <code>requirements</code> to this gem.\n<p>Usage:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">add_development_dependency</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["add_edge","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-add_edge","(origin, destination, requirement)","<p>Adds a new {Edge} to the dependency graph @param [Vertex] origin @param [Vertex] destination @param [Object] …\n"],["add_edge_no_circular","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-add_edge_no_circular","(origin, destination, requirement)","<p>Adds a new {Edge} to the dependency graph without checking for circularity. @param (see #add_edge) @return …\n"],["add_edge_no_circular","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-add_edge_no_circular","(graph, origin, destination, requirement)","<p>@macro action\n"],["add_extra_args","Gem::Command","Gem/Command.html#method-i-add_extra_args","(args)","<p>Adds extra args from ~/.gemrc\n"],["add_file","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file","(name, mode)","<p>Adds file <code>name</code> with permissions <code>mode</code>, and yields an IO for writing the file to\n"],["add_file_digest","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file_digest","(name, mode, digest_algorithms)","<p>Adds <code>name</code> with permissions <code>mode</code> to the tar, yielding <code>io</code> for writing the file.  The <code>digest_algorithm</code> is …\n"],["add_file_signed","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file_signed","(name, mode, signer)","<p>Adds <code>name</code> with permissions <code>mode</code> to the tar, yielding <code>io</code> for writing the file.  The <code>signer</code> is used to …\n"],["add_file_simple","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file_simple","(name, mode, size)","<p>Add file <code>name</code> with permissions <code>mode</code> <code>size</code> bytes long.  Yields an IO to write the file to.\n"],["add_install_update_options","Gem::InstallUpdateOptions","Gem/InstallUpdateOptions.html#method-i-add_install_update_options","()","<p>Add the install/update options to the option parser.\n"],["add_key_option","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-add_key_option","()","<p>Add the –key option\n"],["add_local","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-add_local","(dep_name, spec, source)","<p>Adds a local gem requested using <code>dep_name</code> with the given <code>spec</code> that can be loaded and installed using …\n"],["add_local_remote_options","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_local_remote_options","()","<p>Add local/remote options to the command line parser.\n"],["add_option","Gem::Command","Gem/Command.html#method-i-add_option","(*opts)","<p>Add a command-line option and handler to the command.\n<p>See Gem::OptionParser#make_switch for an explanation …\n"],["add_otp_option","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-add_otp_option","()","<p>Add the –otp option\n"],["add_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-add_owners","(name, owners)",""],["add_parser_run_info","Gem::Command","Gem/Command.html#method-i-add_parser_run_info","(title, content)","<p>Adds a section with <code>title</code> and <code>content</code> to the parser help view.  Used for adding command arguments and …\n"],["add_path","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-i-add_path","(out, path)",""],["add_platform","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-i-add_platform","(platform)","<p>append a platform to the list of mismatched platforms.\n<p>Platforms are added via this instead of injected …\n"],["add_platform_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_platform_option","(task = command, *wrap)","<p>Add the –platform option to the option parser.\n"],["add_prerelease_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_prerelease_option","(*wrap)","<p>Add the –prerelease option to the option parser.\n"],["add_proxy_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_proxy_option","()","<p>Add the –http-proxy option\n"],["add_query_options","Gem::QueryUtils","Gem/QueryUtils.html#method-i-add_query_options","()",""],["add_runtime_dependency","Gem::Specification","Gem/Specification.html#method-i-add_runtime_dependency","(gem, *requirements)","<p>Adds a runtime dependency named <code>gem</code> with <code>requirements</code> to this gem.\n<p>Usage:\n\n<pre>spec.add_runtime_dependency &#39;example&#39;, ...</pre>\n"],["add_security_option","Gem::SecurityOption","Gem/SecurityOption.html#method-i-add_security_option","()",""],["add_self_to_load_path","Gem::Specification","Gem/Specification.html#method-i-add_self_to_load_path","()","<p>Adds this spec’s require paths to LOAD_PATH, in the proper location.\n"],["add_source_gem","Gem::Resolver::SourceSet","Gem/Resolver/SourceSet.html#method-i-add_source_gem","(name, source)",""],["add_source_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_source_option","()","<p>Add the –source option\n"],["add_spec","Gem::Specification","Gem/Specification.html#method-c-add_spec","(spec)","<p>Adds <code>spec</code> to the known specifications, keeping the collection properly sorted.\n"],["add_specific_extra_args","Gem::Command","Gem/Command.html#method-c-add_specific_extra_args","(cmd,args)","<p>Add a list of extra arguments for the given command.  <code>args</code> may be an array or a string to be split on …\n"],["add_symlink","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_symlink","(name, target, mode)","<p>Adds symlink <code>name</code> with permissions <code>mode</code>, linking to <code>target</code>.\n"],["add_to_load_path","Gem","Gem.html#method-c-add_to_load_path","(*paths)","<p>Add a list of paths to the $LOAD_PATH at the proper place.\n"],["add_update_sources_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_update_sources_option","()","<p>Add the –update-sources option\n"],["add_version_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_version_option","(task = command, *wrap)","<p>Add the –version option to the option parser.\n"],["add_vertex","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-add_vertex","(name, payload, root = false)","<p>Adds a vertex with the given name, or updates the existing one. @param [String] name @param [Object] …\n"],["add_vertex","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-add_vertex","(graph, name, payload, root)","<p>@macro action\n"],["additional_message","Gem::OptionParser","Gem/OptionParser.html#method-i-additional_message","(typ, opt)","<p>Returns additional info.\n"],["after_resolution","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-after_resolution","()","<p>Called after resolution ends (either successfully or with an error). By default, prints a newline.\n<p>@return …\n"],["alert","Gem::StreamUI","Gem/StreamUI.html#method-i-alert","(statement, question=nil)","<p>Display an informational alert.  Will ask <code>question</code> if it is not nil.\n"],["alert","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert","(statement, question = nil)","<p>Displays an alert <code>statement</code>.  Asks a <code>question</code> if given.\n"],["alert_error","Gem::StreamUI","Gem/StreamUI.html#method-i-alert_error","(statement, question=nil)","<p>Display an error message in a location expected to get error messages. Will ask <code>question</code> if it is not …\n"],["alert_error","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert_error","(statement, question = nil)","<p>Displays an error <code>statement</code> to the error output location.  Asks a <code>question</code> if given.\n"],["alert_warning","Gem::StreamUI","Gem/StreamUI.html#method-i-alert_warning","(statement, question=nil)","<p>Display a warning on stderr.  Will ask <code>question</code> if it is not nil.\n"],["alert_warning","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert_warning","(statement, question = nil)","<p>Displays a warning <code>statement</code> to the warning output location.  Asks a <code>question</code> if given.\n"],["alien","Gem::Validator","Gem/Validator.html#method-i-alien","(gems=[])","<p>Checks the gem directory for the following potential inconsistencies/problems:\n<p>Checksum gem itself\n<p>For …\n"],["all","Gem::Specification","Gem/Specification.html#method-c-all","()","<p>Returns all specifications. This method is discouraged from use. You probably want to use one of the …\n"],["all=","Gem::Specification","Gem/Specification.html#method-c-all-3D","(specs)","<p>Sets the known specs to <code>specs</code>. Not guaranteed to work for you in the future. Use at your own risk. Caveat …\n"],["all_names","Gem::Specification","Gem/Specification.html#method-c-all_names","()","<p>Return full names of all specs in sorted order.\n"],["all_requirements","Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails","Gem/Resolver/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-all_requirements","()","<p>@return [Array] array of all the requirements that led to the need for\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">this</span> <span class=\"ruby-identifier\">unwind</span>\n</pre>\n"],["all_specs","Gem::AvailableSet","Gem/AvailableSet.html#method-i-all_specs","()",""],["allow_missing?","Gem::Resolver","Gem/Resolver.html#method-i-allow_missing-3F","(dependency)",""],["allow_missing?","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-allow_missing-3F","(dependency)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#allow_missing?)\n"],["allow_missing?","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-allow_missing-3F","(dependency)","<p>Returns whether this dependency, which has no possible matching specifications, can safely be ignored. …\n"],["already_loaded?","Gem","Gem.html#method-c-already_loaded-3F","(file)",""],["alt_name_or_x509_entry","Gem::Security","Gem/Security.html#method-c-alt_name_or_x509_entry","(certificate, x509_entry)",""],["amount_constrained","Gem::Resolver","Gem/Resolver.html#method-i-amount_constrained","(dependency)","<p>returns an integer in (-infty, 0] a number closer to 0 means the dependency is less constraining\n<p>dependencies …\n"],["ancestor?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-ancestor-3F","(other)","<p>Is there a path from ‘other` to `self` following edges in the dependency graph? @return whether there …\n"],["announce_deletion_of","Gem::Uninstaller","Gem/Uninstaller.html#method-i-announce_deletion_of","(spec)",""],["api_key","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-api_key","()","<p>The API key from the command options or from the user’s configuration.\n"],["api_key_forbidden?","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-api_key_forbidden-3F","(response)",""],["api_keys","Gem::ConfigFile","Gem/ConfigFile.html#method-i-api_keys","()","<p>Hash of RubyGems.org and alternate API keys\n"],["app_script_text","Gem::Installer","Gem/Installer.html#method-i-app_script_text","(bin_file_name)","<p>Return the text for an application file.\n"],["append","Gem::OptionParser::List","Gem/OptionParser/List.html#method-i-append","(*args)","<p>Appends <code>switch</code> at the tail of the list, and associates short, long and negated long options. Arguments …\n"],["approximate_recommendation","Gem::Version","Gem/Version.html#method-i-approximate_recommendation","()","<p>A recommended version for use with a ~&gt; Requirement.\n"],["args","Gem::QueryUtils","Gem/QueryUtils.html#method-i-args","()",""],["arguments","Gem::Command","Gem/Command.html#method-i-arguments","()","<p>Override to provide details of the arguments a command takes.  It should return a left-justified string, …\n"],["array_attributes","Gem::Specification","Gem/Specification.html#method-c-array_attributes","()","<p>Return the list of all array-oriented instance variables.\n"],["ask","Gem::MockGemUi","Gem/MockGemUi.html#method-i-ask","(question)",""],["ask","Gem::StreamUI","Gem/StreamUI.html#method-i-ask","(question)","<p>Ask a question.  Returns an answer if connected to a tty, nil otherwise.\n"],["ask","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask","(question)","<p>Asks a <code>question</code> and returns the answer.\n"],["ask_for_password","Gem::StreamUI","Gem/StreamUI.html#method-i-ask_for_password","(question)","<p>Ask for a password. Does not echo response to terminal.\n"],["ask_for_password","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask_for_password","(prompt)","<p>Asks for a password with a <code>prompt</code>\n"],["ask_yes_no","Gem::StreamUI","Gem/StreamUI.html#method-i-ask_yes_no","(question, default=nil)","<p>Ask a question.  Returns a true for yes, false for no.  If not connected to a tty, raises an exception …\n"],["ask_yes_no","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask_yes_no","(question, default = nil)","<p>Asks a yes or no <code>question</code>.  Returns true for yes, false for no.\n"],["at","Gem::Installer","Gem/Installer.html#method-c-at","(path, options = {})","<p>Construct an installer object for the gem file located at <code>path</code>\n"],["attach_correctable","Gem::UnknownCommandError","Gem/UnknownCommandError.html#method-c-attach_correctable","()",""],["attempt_to_activate","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-attempt_to_activate","()","<p>Attempts to activate the current {#possibility} @return [void]\n"],["attempt_to_filter_existing_spec","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-attempt_to_filter_existing_spec","(vertex)","<p>Attempts to update the existing vertex’s ‘PossibilitySet` with a filtered version @return [void] …\n"],["attribute_names","Gem::Specification","Gem/Specification.html#method-c-attribute_names","()","<p>Return the list of all instance variables.\n"],["author","Gem::Specification","Gem/Specification.html#method-i-author","()","<p>Singular reader for #authors.  Returns the first author in the list\n"],["author=","Gem::Specification","Gem/Specification.html#method-i-author-3D","(o)","<p>Singular (alternative) writer for #authors\n<p>Usage:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">author</span> = <span class=\"ruby-string\">&#39;John Jones&#39;</span>\n</pre>\n"],["authors","Gem::Specification","Gem/Specification.html#method-i-authors","()","<p>The list of author names who wrote this gem.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">authors</span> = [<span class=\"ruby-string\">&#39;Chad Fowler&#39;</span>, <span class=\"ruby-string\">&#39;Jim Weirich&#39;</span>, <span class=\"ruby-string\">&#39;Rich Kilmer&#39;</span>]\n</pre>\n"],["authors=","Gem::Specification","Gem/Specification.html#method-i-authors-3D","(value)","<p>A list of authors for this gem.\n<p>Alternatively, a single author can be specified by assigning a string …\n"],["available_specs","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-available_specs","(type)","<p>Returns a list of gems available for each source in Gem::sources.\n<p><code>type</code> can be one of 3 values: :released …\n"],["backtrace","Gem::ConfigFile","Gem/ConfigFile.html#method-i-backtrace","()","<p>True if the backtrace option has been specified, or debug is on.\n"],["backtrace","Gem::StreamUI","Gem/StreamUI.html#method-i-backtrace","(exception)","<p>Prints a formatted backtrace to the errors stream if backtraces are enabled.\n"],["backtracking!","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-backtracking-21","()",""],["banner","Gem::OptionParser","Gem/OptionParser.html#method-i-banner","()","<p>Heading banner preceding summary.\n"],["base","Gem::OptionParser","Gem/OptionParser.html#method-i-base","()","<p>Subject of #on_tail.\n"],["base64_uri_escape","Gem::S3URISigner","Gem/S3URISigner.html#method-i-base64_uri_escape","(str)",""],["base_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-base_dir","()","<p>Returns the full path to the base gem directory.\n<p>eg: /usr/local/lib/ruby/gems/1.8\n"],["base_dir","Gem::Specification","Gem/Specification.html#method-i-base_dir","()",""],["bash_prolog_script","Gem::Installer","Gem/Installer.html#method-i-bash_prolog_script","()",""],["before_resolution","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-before_resolution","()","<p>Called before resolution begins.\n<p>@return [void]\n"],["begins?","Gem::Command","Gem/Command.html#method-i-begins-3F","(long, short)","<p>True if <code>long</code> begins with the characters from <code>short</code>.\n"],["bin_dir","Gem::Specification","Gem/Specification.html#method-i-bin_dir","()","<p>Returns the full path to installed gem’s bin directory.\n<p>NOTE: do not confuse this with <code>bindir</code>, which …\n"],["bin_file","Gem::Specification","Gem/Specification.html#method-i-bin_file","(name)","<p>Returns the full path to an executable named <code>name</code> in this gem.\n"],["bin_file_names","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-bin_file_names","()",""],["bin_path","Gem","Gem.html#method-c-bin_path","(name, exec_name = nil, *requirements)","<p>Find the full path to the executable for gem <code>name</code>.  If the <code>exec_name</code> is not given, an exception will …\n"],["binary_mode","Gem","Gem.html#method-c-binary_mode","()","<p>The mode needed to read a file as straight binary.\n"],["binding_requirement_in_set?","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-binding_requirement_in_set-3F","(requirement, possible_binding_requirements, possibilities)","<p>@param [Object] requirement we wish to check @param [Array] possible_binding_requirements array of requirements …\n"],["binding_requirements_for_conflict","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-binding_requirements_for_conflict","(conflict)","<p>@param [Conflict] conflict @return [Array] minimal array of requirements that would cause the passed …\n"],["bindir","Gem","Gem.html#method-c-bindir","(install_dir=Gem.dir)","<p>The path where gem executables are to be installed.\n"],["body","Gem::GemcutterUtilities::WebauthnListener::BadRequestResponse","Gem/GemcutterUtilities/WebauthnListener/BadRequestResponse.html#method-i-body","()",""],["body","Gem::GemcutterUtilities::WebauthnListener::OkResponse","Gem/GemcutterUtilities/WebauthnListener/OkResponse.html#method-i-body","()",""],["body","Gem::GemcutterUtilities::WebauthnListener::Response","Gem/GemcutterUtilities/WebauthnListener/Response.html#method-i-body","()",""],["both?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-both-3F","()","<p>Is fetching of local and remote information enabled?\n"],["build","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-build","(email)",""],["build","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-build","(extension, dest_path, results, args = [], lib_dir = nil, cargo_dir = Dir.pwd)",""],["build","Gem::Ext::CmakeBuilder","Gem/Ext/CmakeBuilder.html#method-c-build","(extension, dest_path, results, args=[], lib_dir=nil, cmake_dir=Dir.pwd)",""],["build","Gem::Ext::ConfigureBuilder","Gem/Ext/ConfigureBuilder.html#method-c-build","(extension, dest_path, results, args=[], lib_dir=nil, configure_dir=Dir.pwd)",""],["build","Gem::Ext::ExtConfBuilder","Gem/Ext/ExtConfBuilder.html#method-c-build","(extension, dest_path, results, args=[], lib_dir=nil, extension_dir=Dir.pwd)",""],["build","Gem::Ext::RakeBuilder","Gem/Ext/RakeBuilder.html#method-c-build","(extension, dest_path, results, args=[], lib_dir=nil, extension_dir=Dir.pwd)",""],["build","Gem::Package","Gem/Package.html#method-c-build","(spec, skip_validation = false, strict_validation = false, file_name = nil)",""],["build","Gem::Package","Gem/Package.html#method-i-build","(skip_validation = false, strict_validation = false)","<p>Builds this package based on the specification set by #spec=\n"],["build","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-c-build","(request_set, gem_deps_file, dependencies = nil)","<p>Creates a new Lockfile for the given <code>request_set</code> and <code>gem_deps_file</code> location.\n"],["build_args","Gem::Command","Gem/Command.html#method-c-build_args","()","<p>Arguments used when building gems\n"],["build_args","Gem::Installer","Gem/Installer.html#method-i-build_args","()",""],["build_args","Gem::Specification","Gem/Specification.html#method-i-build_args","()","<p>Returns the build_args used to install the gem\n"],["build_args=","Gem::Command","Gem/Command.html#method-c-build_args-3D","(value)",""],["build_details_for_unwind","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-build_details_for_unwind","()","<p>@return [UnwindDetails] Details of the nearest index to which we could unwind\n"],["build_env","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-build_env","()",""],["build_extensions","Gem::Ext::Builder","Gem/Ext/Builder.html#method-i-build_extensions","()","<p>Builds extensions.  Valid types of extensions are extconf.rb files, configure scripts and rakefiles or …\n"],["build_extensions","Gem::Installer","Gem/Installer.html#method-i-build_extensions","()","<p>Builds extensions.  Valid types of extensions are extconf.rb files, configure scripts and rakefiles or …\n"],["build_gem","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-build_gem","()",""],["build_http_response","Gem::GemcutterUtilities::WebauthnListener::Response","Gem/GemcutterUtilities/WebauthnListener/Response.html#method-i-build_http_response","()",""],["build_indices","Gem::Indexer","Gem/Indexer.html#method-i-build_indices","()","<p>Build various indices\n"],["build_info_dir","Gem::Specification","Gem/Specification.html#method-i-build_info_dir","()","<p>Returns the full path to the build info directory\n"],["build_info_file","Gem::Specification","Gem/Specification.html#method-i-build_info_file","()","<p>Returns the full path to the file containing the build information generated when the gem was installed …\n"],["build_marshal_gemspecs","Gem::Indexer","Gem/Indexer.html#method-i-build_marshal_gemspecs","(specs)","<p>Builds Marshal quick index gemspecs.\n"],["build_message","Gem::MissingSpecError","Gem/MissingSpecError.html#method-i-build_message","()",""],["build_message","Gem::MissingSpecVersionError","Gem/MissingSpecVersionError.html#method-i-build_message","()",""],["build_modern_index","Gem::Indexer","Gem/Indexer.html#method-i-build_modern_index","(index, file, name)","<p>Build a single index for RubyGems 1.2 and newer\n"],["build_modern_indices","Gem::Indexer","Gem/Indexer.html#method-i-build_modern_indices","(specs)","<p>Builds indices for RubyGems 1.2 and newer. Handles full, latest, prerelease\n"],["build_package","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-build_package","(gemspec)",""],["bump","Gem::Version","Gem/Version.html#method-i-bump","()","<p>Return a new version object where the next to the last revision number is one greater (e.g., 5.3.1 =&gt; …\n"],["bundle_update_bundler_version","Gem::BundlerVersionFinder","Gem/BundlerVersionFinder.html#method-c-bundle_update_bundler_version","()",""],["bundler_version","Gem::BundlerVersionFinder","Gem/BundlerVersionFinder.html#method-c-bundler_version","()",""],["bytes_read","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-bytes_read","()","<p>Number of bytes read out of the tar entry\n"],["cache_dir","Gem::Source","Gem/Source.html#method-i-cache_dir","(uri)","<p>Returns the local directory to write <code>uri</code> to.\n"],["cache_dir","Gem::Specification","Gem/Specification.html#method-i-cache_dir","()","<p>Returns the full path to the cache directory containing this spec’s cached gem.\n"],["cache_file","Gem::Specification","Gem/Specification.html#method-i-cache_file","()","<p>Returns the full path to the cached gem for this spec.\n"],["cache_home","Gem","Gem.html#method-c-cache_home","()","<p>The path to standard location of the user’s cache directory.\n"],["cache_update_path","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-cache_update_path","(uri, path = nil, update = true)","<p>Downloads <code>uri</code> to <code>path</code> if necessary. If no path is given, it just passes the data.\n"],["calculate_checksum","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-calculate_checksum","(header)",""],["candidate","Gem::OptionParser","Gem/OptionParser.html#method-i-candidate","(word)",""],["candidate","Gem::OptionParser::Completion","Gem/OptionParser/Completion.html#method-c-candidate","(key, icase = false, pat = nil, &block)",""],["candidate","Gem::OptionParser::Completion","Gem/OptionParser/Completion.html#method-i-candidate","(key, icase = false, pat = nil)",""],["canonical_segments","Gem::Version","Gem/Version.html#method-i-canonical_segments","()",""],["cargo","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-cargo","()",""],["cargo_command","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-cargo_command","(cargo_toml, dest_path, args = [], crate_name = nil)",""],["cargo_crate_name","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-cargo_crate_name","(cargo_dir, manifest_path, results)",""],["cargo_dylib_path","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-cargo_dylib_path","(dest_path, crate_name)",""],["cargo_rustc_args","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-cargo_rustc_args","(dest_dir, crate_name)",""],["cert_files","Gem::Request","Gem/Request.html#method-i-cert_files","()",""],["cert_path","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-cert_path","(certificate)","<p>Returns the path to the trusted <code>certificate</code>\n"],["certificates_matching","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-certificates_matching","(filter)",""],["check_cert","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_cert","(signer, issuer, time)","<p>Ensures that <code>signer</code> is valid for <code>time</code> and was signed by the <code>issuer</code>. If the <code>issuer</code> is <code>nil</code> no verification …\n"],["check_chain","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_chain","(chain, time)","<p>Verifies each certificate in <code>chain</code> has signed the following certificate and is valid for the given <code>time</code> …\n"],["check_closed","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-check_closed","()","<p>Raises IOError if the TarWriter is closed\n"],["check_credentials_permissions","Gem::ConfigFile","Gem/ConfigFile.html#method-i-check_credentials_permissions","()","<p>Checks the permissions of the credentials file.  If they are not 0600 an error message is displayed and …\n"],["check_data","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_data","(public_key, digest, signature, data)","<p>Verifies that <code>data</code> matches the <code>signature</code> created by <code>public_key</code> and the <code>digest</code> algorithm.\n"],["check_deprecated_options","Gem::Command","Gem/Command.html#method-i-check_deprecated_options","(options)",""],["check_executable","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-check_executable","()",""],["check_gems","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-i-check_gems","()",""],["check_installed_gems","Gem::QueryUtils","Gem/QueryUtils.html#method-i-check_installed_gems","(gem_names)",""],["check_installed_gems?","Gem::QueryUtils","Gem/QueryUtils.html#method-i-check_installed_gems-3F","()",""],["check_key","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_key","(signer, key)","<p>Ensures the public key of <code>key</code> matches the public key in <code>signer</code>\n"],["check_openssl","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-check_openssl","()",""],["check_root","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_root","(chain, time)","<p>Ensures the root certificate in <code>chain</code> is self-signed and valid for <code>time</code>.\n"],["check_ruby_version","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-check_ruby_version","()",""],["check_trust","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_trust","(chain, digester, trust_dir)","<p>Ensures the root of <code>chain</code> has a trusted certificate in <code>trust_dir</code> and the digests of the two certificates …\n"],["check_typo_squatting","Gem::Commands::SourcesCommand","Gem/Commands/SourcesCommand.html#method-i-check_typo_squatting","(source)",""],["choose_from_list","Gem::StreamUI","Gem/StreamUI.html#method-i-choose_from_list","(question, list)","<p>Choose from a list of options.  <code>question</code> is a prompt displayed above the list.  <code>list</code> is a list of option …\n"],["choose_from_list","Gem::UserInteraction","Gem/UserInteraction.html#method-i-choose_from_list","(question, list)","<p>Asks the user to answer <code>question</code> with an answer from the given <code>list</code>.\n"],["ci?","Gem::UpdateSuggestion","Gem/UpdateSuggestion.html#method-i-ci-3F","()",""],["class_name","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-class_name","()",""],["clean_gems","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-clean_gems","()",""],["clean_text","Gem::Text","Gem/Text.html#method-i-clean_text","(text)","<p>Remove any non-printable characters and make the text suitable for printing.\n"],["clear","Gem::DependencyList","Gem/DependencyList.html#method-i-clear","()",""],["clear","Gem::SourceList","Gem/SourceList.html#method-i-clear","()","<p>Removes all sources from the SourceList.\n"],["clear_default_specs","Gem","Gem.html#method-c-clear_default_specs","()","<p>Clear default gem related variables. It is for test\n"],["clear_paths","Gem","Gem.html#method-c-clear_paths","()","<p>Reset the <code>dir</code> and <code>path</code> values.  The next time <code>dir</code> or <code>path</code> is requested, the values will be calculated …\n"],["close","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-close","()","<p>Close the tar file\n"],["close","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-close","()","<p>Closes the tar entry\n"],["close","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-close","()","<p>Closes the TarWriter\n"],["close","Gem::SilentUI","Gem/SilentUI.html#method-i-close","()",""],["close","Gem::StreamUI","Gem/StreamUI.html#method-i-close","()",""],["close_all","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-close_all","()",""],["closed?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-closed-3F","()","<p>Is the tar entry closed?\n"],["closed?","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-closed-3F","()","<p>Is the TarWriter closed?\n"],["code","Gem::GemcutterUtilities::WebauthnListener::BadRequestResponse","Gem/GemcutterUtilities/WebauthnListener/BadRequestResponse.html#method-i-code","()",""],["code","Gem::GemcutterUtilities::WebauthnListener::MethodNotAllowedResponse","Gem/GemcutterUtilities/WebauthnListener/MethodNotAllowedResponse.html#method-i-code","()",""],["code","Gem::GemcutterUtilities::WebauthnListener::NoContentResponse","Gem/GemcutterUtilities/WebauthnListener/NoContentResponse.html#method-i-code","()",""],["code","Gem::GemcutterUtilities::WebauthnListener::NotFoundResponse","Gem/GemcutterUtilities/WebauthnListener/NotFoundResponse.html#method-i-code","()",""],["code","Gem::GemcutterUtilities::WebauthnListener::OkResponse","Gem/GemcutterUtilities/WebauthnListener/OkResponse.html#method-i-code","()",""],["code","Gem::GemcutterUtilities::WebauthnListener::Response","Gem/GemcutterUtilities/WebauthnListener/Response.html#method-i-code","()","<p>Must be implemented in subclasses\n"],["command_names","Gem::CommandManager","Gem/CommandManager.html#method-i-command_names","()","<p>Return a sorted list of all command names as strings.\n"],["common_options","Gem::Command","Gem/Command.html#method-c-common_options","()",""],["compact_specs","Gem::Indexer","Gem/Indexer.html#method-i-compact_specs","(specs)","<p>Compacts Marshal output for the specs index data source by using identical objects as much as possible. …\n"],["complain","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-complain","(message)",""],["complete","Gem::OptionParser::Completion","Gem/OptionParser/Completion.html#method-i-complete","(key, icase = false, pat = nil)",""],["complete","Gem::OptionParser::List","Gem/OptionParser/List.html#method-i-complete","(id, opt, icase = false, *pat, &block)","<p>Searches list <code>id</code> for <code>opt</code> and the optional patterns for completion <code>pat</code>. If <code>icase</code> is true, the search is …\n"],["compose_sets","Gem::Resolver","Gem/Resolver.html#method-c-compose_sets","(*sets)","<p>Combines <code>sets</code> into a ComposedSet that allows specification lookup in a uniform manner.  If one of the …\n"],["compress","Gem::Indexer","Gem/Indexer.html#method-i-compress","(filename, extension)","<p>Compress <code>filename</code> with <code>extension</code>.\n"],["compress_indices","Gem::Indexer","Gem/Indexer.html#method-i-compress_indices","()","<p>Compresses indices on disk\n"],["concat","Gem::Requirement","Gem/Requirement.html#method-i-concat","(new)","<p>Concatenates the <code>new</code> requirements onto this requirement.\n"],["config_file","Gem","Gem.html#method-c-config_file","()","<p>The path to standard location of the user’s .gemrc file.\n"],["config_file_name","Gem::ConfigFile","Gem/ConfigFile.html#method-i-config_file_name","()","<p>The name of the configuration file.\n"],["config_home","Gem","Gem.html#method-c-config_home","()","<p>The path to standard location of the user’s configuration directory.\n"],["configuration","Gem","Gem.html#method-c-configuration","()","<p>The standard configuration object for gems.\n"],["configuration=","Gem","Gem.html#method-c-configuration-3D","(config)","<p>Use the given configuration object (which implements the ConfigFile protocol) as the standard configuration …\n"],["configure_connection_for_https","Gem::Request","Gem/Request.html#method-c-configure_connection_for_https","(connection, cert_files)",""],["configure_options","Gem::Command","Gem/Command.html#method-i-configure_options","(header, option_list)",""],["conflict_fixing_possibilities?","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-conflict_fixing_possibilities-3F","(state, binding_requirements)","<p>@param [DependencyState] state @param [Array] binding_requirements array of requirements @return [Boolean] …\n"],["conflicting_dependencies","Gem::DependencyResolutionError","Gem/DependencyResolutionError.html#method-i-conflicting_dependencies","()",""],["conflicting_dependencies","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-conflicting_dependencies","()","<p>Return the 2 dependency objects that conflicted\n"],["conflicts","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-conflicts","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#conflicts)\n"],["conflicts","Gem::Specification","Gem/Specification.html#method-i-conflicts","()","<p>Return any possible conflicts against the currently loaded specs.\n"],["connection_for","Gem::Request","Gem/Request.html#method-i-connection_for","(uri)","<p>Creates or an HTTP connection based on <code>uri</code>, or retrieves an existing connection, using a proxy if needed. …\n"],["consider_local?","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-consider_local-3F","()","<p>Indicated, based on the requested domain, if local gems should be considered.\n"],["consider_remote?","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-consider_remote-3F","()","<p>Indicated, based on the requested domain, if remote gems should be considered.\n"],["contains_requirable_file?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-contains_requirable_file-3F","(file)","<p>Return true if this spec can require <code>file</code>.\n"],["contents","Gem::Package","Gem/Package.html#method-i-contents","()","<p>A list of file names contained in this gem\n"],["contents","Gem::Package::Old","Gem/Package/Old.html#method-i-contents","()","<p>A list of file names contained in this gem\n"],["convert","Gem::Ext::CargoBuilder::LinkFlagConverter","Gem/Ext/CargoBuilder/LinkFlagConverter.html#method-c-convert","(arg)",""],["convert","Gem::OptionParser::Completion","Gem/OptionParser/Completion.html#method-i-convert","(opt = nil, val = nil, *)",""],["copy_to","Gem::Installer::FakePackage","Gem/Installer/FakePackage.html#method-i-copy_to","(path)",""],["copy_to","Gem::Package","Gem/Package.html#method-i-copy_to","(path)","<p>Copies this package to <code>path</code> (if possible)\n"],["correct?","Gem::Version","Gem/Version.html#method-c-correct-3F","(version)","<p>True if the <code>version</code> string matches RubyGems’ requirements.\n"],["correct_for_windows_path","Gem::Util","Gem/Util.html#method-c-correct_for_windows_path","(path)","<p>Corrects <code>path</code> (usually returned by ‘URI.parse().path` on Windows), that comes with a leading slash.\n"],["corrections","Gem::UnknownCommandSpellChecker","Gem/UnknownCommandSpellChecker.html#method-i-corrections","()",""],["create","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-c-create","()",""],["create","Gem::Requirement","Gem/Requirement.html#method-c-create","(*inputs)","<p>Factory method to create a Gem::Requirement object.  Input may be a Version, a String, or nil.  Intended …\n"],["create","Gem::Version","Gem/Version.html#method-c-create","(input)","<p>Factory method to create a Version object. Input may be a Version or a String. Intended to simplify client …\n"],["create_cert","Gem::Security","Gem/Security.html#method-c-create_cert","(subject, key, age = ONE_YEAR, extensions = EXTENSIONS, serial = 1)","<p>Creates an unsigned certificate for <code>subject</code> and <code>key</code>.  The lifetime of the key is from the current time …\n"],["create_cert_email","Gem::Security","Gem/Security.html#method-c-create_cert_email","(email, key, age = ONE_YEAR, extensions = EXTENSIONS)","<p>Creates a self-signed certificate with an issuer and subject from <code>email</code>, a subject alternative name of …\n"],["create_cert_self_signed","Gem::Security","Gem/Security.html#method-c-create_cert_self_signed","(subject, key, age = ONE_YEAR, extensions = EXTENSIONS, serial = 1)","<p>Creates a self-signed certificate with an issuer and subject of <code>subject</code> and the given <code>extensions</code> for …\n"],["create_conflict","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-create_conflict","(underlying_error = nil)","<p>@param [Object] underlying_error @return [Conflict] a {Conflict} that reflects the failure to activate …\n"],["create_digest","Gem::Security","Gem/Security.html#method-c-create_digest","(algorithm = DIGEST_NAME)",""],["create_key","Gem::Security","Gem/Security.html#method-c-create_key","(algorithm)","<p>Creates a new key pair of the specified <code>algorithm</code>. RSA, DSA, and EC are supported.\n"],["create_option_parser","Gem::Command","Gem/Command.html#method-i-create_option_parser","()","<p>Creates an option parser and fills it in with the help info for the command.\n"],["create_request_pool","Gem::S3URISigner","Gem/S3URISigner.html#method-i-create_request_pool","(uri)",""],["credentials_path","Gem::ConfigFile","Gem/ConfigFile.html#method-i-credentials_path","()","<p>Location of RubyGems.org credentials\n"],["darwin_target?","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-darwin_target-3F","()",""],["data_home","Gem","Gem.html#method-c-data_home","()","<p>The path to standard location of the user’s data directory.\n"],["datadir","Gem","Gem.html#method-c-datadir","(gem_name)","<p>The path to the data directory specified by the gem name.  If the package is not available as a gem, …\n"],["datadir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-datadir","()","<p>The path to the data directory for this gem.\n"],["date","Gem::Specification","Gem/Specification.html#method-i-date","()","<p>The date this gem was created.\n<p>If SOURCE_DATE_EPOCH is set as an environment variable, use that to support …\n"],["date=","Gem::Specification","Gem/Specification.html#method-i-date-3D","(date)","<p>The date this gem was created\n<p>DO NOT set this, it is set automatically when the gem is packaged.\n"],["debug","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-debug","(depth = 0, &block)","<p>Calls the {#resolver_ui}‘s {UI#debug} method @param [Integer] depth the depth of the {#states} stack …\n"],["debug","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-debug","(depth = 0)","<p>Conveys debug information to the user.\n<p>@param [Integer] depth the current depth of the resolution process. …\n"],["debug?","Gem::Resolver","Gem/Resolver.html#method-i-debug-3F","()",""],["debug?","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-debug-3F","()","<p>Whether or not debug messages should be printed. By default, whether or not the ‘MOLINILLO_DEBUG` environment …\n"],["def_head_option","Gem::OptionParser","Gem/OptionParser.html#method-i-def_head_option","(*opts, &block)",""],["def_option","Gem::OptionParser","Gem/OptionParser.html#method-i-def_option","(*opts, &block)",""],["def_tail_option","Gem::OptionParser","Gem/OptionParser.html#method-i-def_tail_option","(*opts, &block)",""],["default","Gem::Requirement","Gem/Requirement.html#method-c-default","()",""],["default_bindir","Gem","Gem.html#method-c-default_bindir","()","<p>The default directory for binaries\n"],["default_cert_path","Gem","Gem.html#method-c-default_cert_path","()","<p>The default signing certificate chain path\n"],["default_dir","Gem","Gem.html#method-c-default_dir","()","<p>Default home directory path to be used if an alternate value is not specified in the environment\n"],["default_dir","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-default_dir","()",""],["default_exec_format","Gem","Gem.html#method-c-default_exec_format","()","<p>Deduce Ruby’s –program-prefix and –program-suffix from its install name\n"],["default_ext_dir_for","Gem","Gem.html#method-c-default_ext_dir_for","(base_dir)","<p>Returns binary extensions dir for specified RubyGems base dir or nil if such directory cannot be determined. …\n"],["default_gem?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-default_gem-3F","()",""],["default_gem_load_paths","Gem","Gem.html#method-c-default_gem_load_paths","()",""],["default_host?","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-default_host-3F","()",""],["default_key_path","Gem","Gem.html#method-c-default_key_path","()","<p>The default signing key path\n"],["default_path","Gem","Gem.html#method-c-default_path","()","<p>Default gem load path\n"],["default_path","Gem::PathSupport","Gem/PathSupport.html#method-i-default_path","()","<p>Return the default Gem path\n"],["default_prerelease","Gem::Requirement","Gem/Requirement.html#method-c-default_prerelease","()",""],["default_rubygems_dirs","Gem","Gem.html#method-c-default_rubygems_dirs","()","<p>Paths where RubyGems’ .rb files and bin files are installed\n"],["default_sources","Gem","Gem.html#method-c-default_sources","()","<p>An Array of the default sources that come with RubyGems\n"],["default_spec_cache_dir","Gem","Gem.html#method-c-default_spec_cache_dir","()","<p>Default spec directory path to be used if an alternate value is not specified in the environment\n"],["default_spec_file","Gem::Installer","Gem/Installer.html#method-i-default_spec_file","()","<p>The location of the default spec file for default gems.\n"],["default_spec_matches?","Gem::Uninstaller","Gem/Uninstaller.html#method-i-default_spec_matches-3F","(spec)","<p>@return true if the specs of any default gems are ‘==` to the given `spec`.\n"],["default_specifications_dir","Gem","Gem.html#method-c-default_specifications_dir","()","<p>Path to specification files of default gems.\n"],["default_specifications_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-c-default_specifications_dir","()",""],["default_specs_that_match","Gem::Uninstaller","Gem/Uninstaller.html#method-i-default_specs_that_match","(spec)","<p>@return [Array] specs of default gems that are ‘==` to the given `spec`.\n"],["default_stubs","Gem::Specification","Gem/Specification.html#method-c-default_stubs","(pattern = \"*.gemspec\")","<p>Returns a Gem::StubSpecification for default gems\n"],["default_value","Gem::Specification","Gem/Specification.html#method-i-default_value","(name)","<p>The default value for specification attribute <code>name</code>\n"],["defaults_str","Gem::Command","Gem/Command.html#method-i-defaults_str","()","<p>Override to display the default values of the command options. (similar to <code>arguments</code>, but displays the …\n"],["defaults_str","Gem::Commands::InfoCommand","Gem/Commands/InfoCommand.html#method-i-defaults_str","()",""],["define","Gem::OptionParser","Gem/OptionParser.html#method-i-define","(*opts, &block)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["define","Gem::PackageTask","Gem/PackageTask.html#method-i-define","()","<p>Create the Rake tasks and actions specified by this Gem::PackageTask. (<code>define</code> is automatically called …\n"],["define_by_keywords","Gem::OptionParser","Gem/OptionParser.html#method-i-define_by_keywords","(options, meth, **opts)",""],["define_head","Gem::OptionParser","Gem/OptionParser.html#method-i-define_head","(*opts, &block)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["define_tail","Gem::OptionParser","Gem/OptionParser.html#method-i-define_tail","(*opts, &block)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["deflate","Gem","Gem.html#method-c-deflate","(data)","<p>A Zlib::Deflate.deflate wrapper\n"],["delete","Gem::SourceList","Gem/SourceList.html#method-i-delete","(source)","<p>Deletes <code>source</code> from the source list which may be a Gem::Source or a URI.\n"],["delete_edge","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-delete_edge","(edge)","<p>Deletes an {Edge} from the dependency graph @param [Edge] edge @return [Void]\n"],["delete_edge","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-delete_edge","(graph, origin_name, destination_name, requirement)","<p>{include:DependencyGraph#delete_edge} @param [Graph] graph the graph to perform the action on @param …\n"],["delete_first","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-delete_first","(array, item)",""],["dependencies","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-i-dependencies","()","<p>The dependencies of the gem for this specification\n"],["dependencies","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-dependencies","()","<p>The dependencies of the gem for this specification\n"],["dependencies","Gem::Specification","Gem/Specification.html#method-i-dependencies","()","<p>A list of Gem::Dependency objects this gem depends on.\n<p>Use #add_dependency or #add_development_dependency …\n"],["dependencies_equal?","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-dependencies_equal-3F","(dependencies, other_dependencies)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#dependencies_equal?)\n"],["dependencies_equal?","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-dependencies_equal-3F","(dependencies, other_dependencies)","<p>Determines whether two arrays of dependencies are equal, and thus can be grouped.\n<p>@param [Array&lt;Object&gt;] …\n"],["dependencies_for","Gem::Resolver","Gem/Resolver.html#method-i-dependencies_for","(specification)",""],["dependencies_for","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-dependencies_for","(specification)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#dependencies_for)\n"],["dependencies_for","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-dependencies_for","(specification)","<p>Returns the dependencies of ‘specification`. @note This method should be ’pure’, i.e. the return …\n"],["dependency","Gem::ImpossibleDependenciesError","Gem/ImpossibleDependenciesError.html#method-i-dependency","()",""],["dependency_order","Gem::DependencyList","Gem/DependencyList.html#method-i-dependency_order","()","<p>Return a list of the gem specifications in the dependency list, sorted in order so that no gemspec in …\n"],["dependent_gems","Gem::Specification","Gem/Specification.html#method-i-dependent_gems","(check_dev=true)","<p>Return a list of all gems that have a dependency on this gemspec.  The list is structured with entries …\n"],["dependent_specs","Gem::Specification","Gem/Specification.html#method-i-dependent_specs","()","<p>Returns all specs that matches this spec’s runtime dependencies.\n"],["deprecate","Gem::Deprecate","Gem/Deprecate.html#method-i-deprecate","(name, repl, year, month)","<p>Simple deprecation method that deprecates <code>name</code> by wrapping it up in a dummy method. It warns on each …\n"],["deprecate_option","Gem::Command","Gem/Command.html#method-i-deprecate_option","(name, version: nil, extra_msg: nil)","<p>Mark a command-line option as deprecated, and optionally specify a deprecation horizon.\n<p>Note that with …\n"],["deprecated?","Gem::Command","Gem/Command.html#method-i-deprecated-3F","()",""],["deprecation_warning","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-deprecation_warning","()",""],["depth","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-depth","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#depth)\n"],["descendent?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-descendent-3F","(other)",""],["description","Gem::Command","Gem/Command.html#method-i-description","()","<p>Override to display a longer description of what this command does.\n"],["description","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-description","()",""],["description=","Gem::Specification","Gem/Specification.html#method-i-description-3D","(str)","<p>A detailed description of this gem.  See also #summary\n"],["detach_vertex_named","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-detach_vertex_named","(name)","<p>Detaches the {#vertex_named} ‘name` {Vertex} from the graph, recursively removing any non-root vertices …\n"],["detach_vertex_named","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-detach_vertex_named","(graph, name)","<p>@macro action\n"],["detect","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-detect","(type=:complete)","<p>Return all gem name tuples who’s names match <code>obj</code>\n"],["development?","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-development-3F","()","<p>Is this activation request for a development dependency?\n"],["development?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-development-3F","()","<p>Is this dependency a development dependency?\n"],["development_dependencies","Gem::Specification","Gem/Specification.html#method-i-development_dependencies","()","<p>List of dependencies that are used for development\n"],["dir","Gem","Gem.html#method-c-dir","()","<p>The path where gems are to be installed.\n"],["dir","Gem::Installer","Gem/Installer.html#method-i-dir","()","<p>Return the target directory where the gem is to be installed. This directory is not guaranteed to be …\n"],["directory?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-directory-3F","()","<p>Is this tar entry a directory?\n"],["dirs","Gem::Specification","Gem/Specification.html#method-c-dirs","()","<p>Return the directories that Specification uses to find specs.\n"],["dirs=","Gem::Specification","Gem/Specification.html#method-c-dirs-3D","(dirs)","<p>Set the directories that Specification uses to find specs. Setting this resets the list of known specs. …\n"],["display","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-display","()",""],["display_header","Gem::QueryUtils","Gem/QueryUtils.html#method-i-display_header","(type)",""],["do_configuration","Gem::GemRunner","Gem/GemRunner.html#method-i-do_configuration","(args)",""],["doc_dir","Gem::Specification","Gem/Specification.html#method-i-doc_dir","(type = nil)","<p>Returns the full path to this spec’s documentation directory.  If <code>type</code> is given it will be appended …\n"],["doctor","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-i-doctor","()",""],["doctor","Gem::Doctor","Gem/Doctor.html#method-i-doctor","()","<p>Cleans up uninstalled files and invalid gem specifications\n"],["done","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-done","()","<p>The silent download reporter won’t tell you when the download is done. Because it is silent.\n"],["done","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-i-done","()","<p>Does not print anything when complete as this object has taken a vow of silence.\n"],["done","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-i-done","()","<p>Prints out the terminal message.\n"],["done","Gem::StreamUI::ThreadedDownloadReporter","Gem/StreamUI/ThreadedDownloadReporter.html#method-i-done","()","<p>Indicates the download is complete.\n"],["done","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-i-done","()","<p>Prints out the terminal message.\n"],["done_installing","Gem","Gem.html#method-c-done_installing","(&hook)","<p>Adds a post-installs hook that will be passed a Gem::DependencyInstaller and a list of installed specifications …\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::Action","Gem/Resolver/Molinillo/DependencyGraph/Action.html#method-i-down","(graph)","<p>Reverses the action on the given graph. @param  [DependencyGraph] graph the graph to reverse the action …\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-down","(graph)","<p>(see Action#down)\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-i-down","(graph)","<p>(see Action#down)\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html#method-i-down","(graph)","<p>(see Action#down)\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::Tag","Gem/Resolver/Molinillo/DependencyGraph/Tag.html#method-i-down","(graph)","<p>(see Action#down)\n"],["download","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-download","(spec, source_uri, install_dir = Gem.dir)","<p>Moves the gem <code>spec</code> from <code>source_uri</code> to the cache dir unless it is already there.  If the source_uri is …\n"],["download","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-download","(path)","<p>Downloads a gem at <code>path</code> and returns the file path.\n"],["download","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-download","(options)",""],["download","Gem::Source","Gem/Source.html#method-i-download","(spec, dir=Dir.pwd)","<p>Downloads <code>spec</code> and writes it to <code>dir</code>.  See also Gem::RemoteFetcher#download.\n"],["download","Gem::Source::Installed","Gem/Source/Installed.html#method-i-download","(spec, path)","<p>We don’t need to download an installed gem\n"],["download_reporter","Gem::StreamUI","Gem/StreamUI.html#method-i-download_reporter","(*args)","<p>Return a download reporter object chosen from the current verbosity\n"],["download_to_cache","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-download_to_cache","(dependency)","<p>Given a name and requirement, downloads this gem into cache and returns the filename. Returns nil if …\n"],["each","Gem::AvailableSet","Gem/AvailableSet.html#method-i-each","()","<p>Yields each Tuple in this AvailableSet\n"],["each","Gem::ConfigFile","Gem/ConfigFile.html#method-i-each","(&block)","<p>Delegates to @hash\n"],["each","Gem::DependencyList","Gem/DependencyList.html#method-i-each","(&block)","<p>Iterator over dependency_order\n"],["each","Gem::List","Gem/List.html#method-i-each","()",""],["each","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-each","()","<p>Iterates over files in the tarball yielding each entry\n"],["each","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-each","()","<p>Enumerates through the vertices of the graph. @return [Array&lt;Vertex&gt;] The graph’s vertices. …\n"],["each","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-each","()","<p>@!visibility private Enumerates each action in the log @yield [Action]\n"],["each","Gem::SourceList","Gem/SourceList.html#method-i-each","()","<p>Yields each source URI in the list.\n"],["each","Gem::Specification","Gem/Specification.html#method-c-each","()","<p>Enumerate every known spec.  See ::dirs= and ::add_spec to set the list of specs.\n"],["each_certificate","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-each_certificate","()","<p>Enumerates trusted certificates.\n"],["each_const","Gem::OptionParser","Gem/OptionParser.html#method-c-each_const","(path, base = ::Object)",""],["each_entry","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-each_entry","()",""],["each_option","Gem::OptionParser::List","Gem/OptionParser/List.html#method-i-each_option","(&block)","<p>Iterates over each option, passing the option to the <code>block</code>.\n"],["each_source","Gem::SourceList","Gem/SourceList.html#method-i-each_source","(&b)","<p>Yields each source in the list.\n"],["each_spec","Gem::AvailableSet","Gem/AvailableSet.html#method-i-each_spec","()","<p>Yields the Gem::Specification for each Tuple in this AvailableSet\n"],["each_strongly_connected_component","Gem::TSort","Gem/TSort.html#method-i-each_strongly_connected_component","()","<p>The iterator version of the #strongly_connected_components method. <code><em>obj</em>.each_strongly_connected_component</code> …\n"],["each_strongly_connected_component","Gem::TSort","Gem/TSort.html#method-c-each_strongly_connected_component","(each_node, each_child)","<p>The iterator version of the Gem::TSort.strongly_connected_components method.\n<p>The graph is represented …\n"],["each_strongly_connected_component_from","Gem::TSort","Gem/TSort.html#method-i-each_strongly_connected_component_from","(node, id_map={}, stack=[])","<p>Iterates over strongly connected component in the subgraph reachable from <em>node</em>.\n<p>Return value is unspecified. …\n"],["each_strongly_connected_component_from","Gem::TSort","Gem/TSort.html#method-c-each_strongly_connected_component_from","(node, each_child, id_map={}, stack=[])","<p>Iterates over strongly connected components in a graph. The graph is represented by <em>node</em> and <em>each_child</em> …\n"],["ec2_metadata_credentials_json","Gem::S3URISigner","Gem/S3URISigner.html#method-i-ec2_metadata_credentials_json","()",""],["ec2_metadata_request","Gem::S3URISigner","Gem/S3URISigner.html#method-i-ec2_metadata_request","(url)",""],["eglible_for_update?","Gem::UpdateSuggestion","Gem/UpdateSuggestion.html#method-i-eglible_for_update-3F","()","<p>Determines if current environment is eglible for update suggestion.\n"],["email_to_name","Gem::Security","Gem/Security.html#method-c-email_to_name","(email_address)","<p>Turns <code>email_address</code> into an OpenSSL::X509::Name\n"],["empty","Gem::Resolver::Molinillo::ResolutionState","Gem/Resolver/Molinillo/ResolutionState.html#method-c-empty","()","<p>Returns an empty resolution state @return [ResolutionState] an empty state\n"],["empty?","Gem::AvailableSet","Gem/AvailableSet.html#method-i-empty-3F","()",""],["empty?","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-empty-3F","()","<p>Is the tar entry empty?\n"],["empty?","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-empty-3F","()",""],["empty?","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-empty-3F","()","<p>Is the list empty?\n"],["empty?","Gem::SourceList","Gem/SourceList.html#method-i-empty-3F","()","<p>Returns true if there are no sources in this SourceList.\n"],["end_resolution","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-end_resolution","()","<p>Ends the resolution process @return [void]\n"],["enforce_trailing_slash","Gem::Source","Gem/Source.html#method-i-enforce_trailing_slash","(uri)",""],["ensure_default_gem_subdirectories","Gem","Gem.html#method-c-ensure_default_gem_subdirectories","(dir = Gem.dir, mode = nil)","<p>Quietly ensure the Gem directory <code>dir</code> contains all the proper subdirectories for handling default gems. …\n"],["ensure_dependency","Gem::Installer","Gem/Installer.html#method-i-ensure_dependency","(spec, dependency)","<p>Ensure that the dependency is satisfied by the current installation of gem.  If it is not an exception …\n"],["ensure_gem_subdirectories","Gem","Gem.html#method-c-ensure_gem_subdirectories","(dir = Gem.dir, mode = nil)","<p>Quietly ensure the Gem directory <code>dir</code> contains all the proper subdirectories.  If we can’t create …\n"],["ensure_loadable_spec","Gem::Installer","Gem/Installer.html#method-i-ensure_loadable_spec","()","<p>Ensures the Gem::Specification written out for this gem is loadable upon installation.\n"],["entry_details","Gem::QueryUtils","Gem/QueryUtils.html#method-i-entry_details","(entry, detail_tuple, specs, platforms)",""],["entry_versions","Gem::QueryUtils","Gem/QueryUtils.html#method-i-entry_versions","(entry, name_tuples, platforms, specs)",""],["env_requirement","Gem","Gem.html#method-c-env_requirement","(gem_name)",""],["environment","Gem::OptionParser","Gem/OptionParser.html#method-i-environment","(env = File.basename($0, '.*'))","<p>Parses environment variable <code>env</code> or its uppercase with splitting like a shell.\n<p><code>env</code> defaults to the basename …\n"],["eof?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-eof-3F","()","<p>Are we at the end of the tar entry?\n"],["eql?","Gem::NameTuple","Gem/NameTuple.html#method-i-eql-3F","(other)",""],["eql?","Gem::Platform","Gem/Platform.html#method-i-eql-3F","(other)",""],["eql?","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-eql-3F","(other)",""],["eql?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-eql-3F","(other)",""],["eql?","Gem::Version","Gem/Version.html#method-i-eql-3F","(other)","<p>A Version is only eql? to another version if it’s specified to the same precision. Version “1.0” …\n"],["error","Gem::MockGemUi","Gem/MockGemUi.html#method-i-error","()",""],["error_message","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-error_message","()",""],["errors","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-errors","()",""],["errors","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-errors","()","<p>Errors encountered while resolving gems\n"],["escape","Gem::UriFormatter","Gem/UriFormatter.html#method-i-escape","()","<p>Escapes the #uri for use as a CGI parameter\n"],["exact?","Gem::Requirement","Gem/Requirement.html#method-i-exact-3F","()","<p>true if the requirement is for only an exact version\n"],["exec_format","Gem::Installer","Gem/Installer.html#method-c-exec_format","()","<p>Defaults to use Ruby’s program prefix and suffix.\n"],["executable","Gem::Specification","Gem/Specification.html#method-i-executable","()","<p>Singular accessor for #executables\n"],["executable=","Gem::Specification","Gem/Specification.html#method-i-executable-3D","(o)","<p>Singular accessor for #executables\n"],["executables","Gem::Specification","Gem/Specification.html#method-i-executables","()","<p>Executables included in the gem.\n<p>For example, the rake gem has rake as an executable. You don’t specify …\n"],["executables=","Gem::Specification","Gem/Specification.html#method-i-executables-3D","(value)","<p>Sets executables to <code>value</code>, ensuring it is an array.\n"],["execute","Gem::Command","Gem/Command.html#method-i-execute","()","<p>Override to provide command handling.\n<p>#options will be filled in with your parsed options, unparsed options …\n"],["execute","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-execute","()",""],["execute","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-i-execute","()",""],["execute","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-execute","()",""],["execute","Gem::Commands::FetchCommand","Gem/Commands/FetchCommand.html#method-i-execute","()",""],["execute","Gem::Commands::GenerateIndexCommand","Gem/Commands/GenerateIndexCommand.html#method-i-execute","()",""],["execute","Gem::Commands::HelpCommand","Gem/Commands/HelpCommand.html#method-i-execute","()",""],["execute","Gem::Commands::InstallCommand","Gem/Commands/InstallCommand.html#method-i-execute","()",""],["execute","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-execute","()",""],["execute","Gem::Commands::MirrorCommand","Gem/Commands/MirrorCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OutdatedCommand","Gem/Commands/OutdatedCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-execute","()",""],["execute","Gem::Commands::PristineCommand","Gem/Commands/PristineCommand.html#method-i-execute","()",""],["execute","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-execute","()",""],["execute","Gem::Commands::RdocCommand","Gem/Commands/RdocCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ServerCommand","Gem/Commands/ServerCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SigninCommand","Gem/Commands/SigninCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SignoutCommand","Gem/Commands/SignoutCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SourcesCommand","Gem/Commands/SourcesCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SpecificationCommand","Gem/Commands/SpecificationCommand.html#method-i-execute","()",""],["execute","Gem::Commands::StaleCommand","Gem/Commands/StaleCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-execute","()",""],["execute","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-i-execute","()",""],["execute","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-execute","()",""],["execute","Gem::QueryUtils","Gem/QueryUtils.html#method-i-execute","()",""],["expand","Gem::PathSupport","Gem/PathSupport.html#method-i-expand","(path)",""],["explain","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-explain","()","<p>A string explanation of the conflict.\n"],["explanation","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-explanation","()","<p>Explanation of the conflict used by exceptions to print useful messages\n"],["explicit?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-explicit-3F","()","<p>Indicate that the request is for a gem explicitly requested by the user\n"],["explicit_version_requirement","Gem::Installer","Gem/Installer.html#method-i-explicit_version_requirement","(name)",""],["extend_object","Gem::OptionParser::Arguable","Gem/OptionParser/Arguable.html#method-c-extend_object","(obj)","<p>Initializes instance variable.\n"],["extension_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-extension_dir","()","<p>Returns full path to the directory where gem’s extensions are installed.\n"],["extension_nesting","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-extension_nesting","(extension)","<p>returns the directory nesting of the extension, ignoring the first part, so “ext/foo/bar/Cargo.toml” …\n"],["extensions","Gem::Specification","Gem/Specification.html#method-i-extensions","()","<p>Extensions to build when installing the gem, specifically the paths to extconf.rb-style files used to …\n"],["extensions=","Gem::Specification","Gem/Specification.html#method-i-extensions-3D","(extensions)","<p>Sets extensions to <code>extensions</code>, ensuring it is an array.\n"],["extensions_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-extensions_dir","()","<p>Returns path to the extensions directory.\n"],["extra_args","Gem::Command","Gem/Command.html#method-c-extra_args","()",""],["extra_args=","Gem::Command","Gem/Command.html#method-c-extra_args-3D","(value)",""],["extra_rdoc_files","Gem::Specification","Gem/Specification.html#method-i-extra_rdoc_files","()","<p>Extra files to add to RDoc such as README or doc/examples.txt\n<p>When the user elects to generate the RDoc …\n"],["extra_rdoc_files=","Gem::Specification","Gem/Specification.html#method-i-extra_rdoc_files-3D","(files)","<p>Sets extra_rdoc_files to <code>files</code>, ensuring it is an array.\n"],["extract_bin","Gem::Installer","Gem/Installer.html#method-i-extract_bin","()","<p>Extracts only the bin/ files from the gem into the gem directory. This is used by default gems to allow …\n"],["extract_files","Gem::Installer","Gem/Installer.html#method-i-extract_files","()","<p>Reads the file index and extracts each file into the gem directory.\n<p>Ensures that files can’t be installed …\n"],["extract_files","Gem::Installer::FakePackage","Gem/Installer/FakePackage.html#method-i-extract_files","(destination_dir, pattern = \"*\")",""],["extract_files","Gem::Package","Gem/Package.html#method-i-extract_files","(destination_dir, pattern = \"*\")","<p>Extracts the files in this package into <code>destination_dir</code>\n<p>If <code>pattern</code> is specified, only entries matching …\n"],["extract_files","Gem::Package::Old","Gem/Package/Old.html#method-i-extract_files","(destination_dir)","<p>Extracts the files in this package into <code>destination_dir</code>\n"],["fetch","Gem::Request","Gem/Request.html#method-i-fetch","()",""],["fetch","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-fetch","(filename, filesize)","<p>The silent download reporter does not display <code>filename</code> or care about <code>filesize</code> because it is silent.\n"],["fetch","Gem::StreamUI::ThreadedDownloadReporter","Gem/StreamUI/ThreadedDownloadReporter.html#method-i-fetch","(file_name, *args)","<p>Tells the download reporter that the <code>file_name</code> is being fetched. The other arguments are ignored.\n"],["fetch_file","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_file","(uri, *_)","<p>File Fetcher. Dispatched by <code>fetch_path</code>. Use it instead.\n"],["fetch_http","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_http","(uri, last_modified = nil, head = false, depth = 0)","<p>HTTP Fetcher. Dispatched by <code>fetch_path</code>. Use it instead.\n"],["fetch_https","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_https","(uri, last_modified = nil, head = false, depth = 0)",""],["fetch_otp","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-fetch_otp","(credentials)",""],["fetch_path","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_path","(uri, mtime = nil, head = false)","<p>Downloads <code>uri</code> and returns it as a String.\n"],["fetch_s3","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_s3","(uri, mtime = nil, head = false)",""],["fetch_s3_config","Gem::S3URISigner","Gem/S3URISigner.html#method-i-fetch_s3_config","()","<p>Extracts S3 configuration for S3 bucket\n"],["fetch_spec","Gem::Source","Gem/Source.html#method-i-fetch_spec","(name_tuple)","<p>Fetches a specification for the given <code>name_tuple</code>.\n"],["fetch_spec","Gem::Source::Lock","Gem/Source/Lock.html#method-i-fetch_spec","(name_tuple)","<p>Delegates to the wrapped source’s fetch_spec method.\n"],["fetcher","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-c-fetcher","()","<p>Cached RemoteFetcher instance.\n"],["fetcher","Gem::SpecFetcher","Gem/SpecFetcher.html#method-c-fetcher","()","<p>Default fetcher instance.  Use this instead of ::new to reduce object allocation.\n"],["file?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-file-3F","()","<p>Is this tar entry a file?\n"],["file_name","Gem::Specification","Gem/Specification.html#method-i-file_name","()","<p>The default (generated) file name of the gem.  See also #spec_name.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">file_name</span> <span class=\"ruby-comment\"># =&gt; &quot;example-1.0.gem&quot;</span>\n</pre>\n"],["files","Gem::Specification","Gem/Specification.html#method-i-files","()","<p>Files included in this gem.  You cannot append to this accessor, you must assign to it.\n<p>Only add files …\n"],["files=","Gem::Specification","Gem/Specification.html#method-i-files-3D","(files)","<p>Sets files to <code>files</code>, ensuring it is an array.\n"],["files_in","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-files_in","(spec)",""],["files_in","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-files_in","(dir)",""],["files_in_default_gem","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-files_in_default_gem","(spec)",""],["files_in_gem","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-files_in_gem","(spec)",""],["filter_backtrace","Gem::OptionParser::ParseError","Gem/OptionParser/ParseError.html#method-c-filter_backtrace","(array)",""],["filter_possibilities_after_unwind","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-filter_possibilities_after_unwind","(unwind_details)","<p>Filter’s a state’s possibilities to remove any that would not fix the conflict we’ve just …\n"],["filter_possibilities_for_parent_unwind","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-filter_possibilities_for_parent_unwind","(unwind_details)","<p>Filter’s a state’s possibilities to remove any that would (eventually) create a requirement in …\n"],["filter_possibilities_for_primary_unwind","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-filter_possibilities_for_primary_unwind","(unwind_details)","<p>Filter’s a state’s possibilities to remove any that would not satisfy the requirements in the …\n"],["filtered_possibility_set","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-filtered_possibility_set","(vertex)","<p>Generates a filtered version of the existing vertex’s ‘PossibilitySet` using the current state’s …\n"],["find_active_stub_by_path","Gem::Specification","Gem/Specification.html#method-c-find_active_stub_by_path","(path)",""],["find_alias_command","Gem::CommandManager","Gem/CommandManager.html#method-i-find_alias_command","(cmd_name)",""],["find_all","Gem::AvailableSet","Gem/AvailableSet.html#method-i-find_all","(req)","<p>Used by the Resolver, the protocol to use a AvailableSet as a search Set.\n"],["find_all","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-i-find_all","(req)","<p>Return an array of APISpecification objects matching DependencyRequest <code>req</code>.\n"],["find_all","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-find_all","(req)","<p>Finds all specs matching <code>req</code> in all sets.\n"],["find_all","Gem::Resolver::CurrentSet","Gem/Resolver/CurrentSet.html#method-i-find_all","(req)",""],["find_all","Gem::Resolver::GitSet","Gem/Resolver/GitSet.html#method-i-find_all","(req)","<p>Finds all git gems matching <code>req</code>\n"],["find_all","Gem::Resolver::IndexSet","Gem/Resolver/IndexSet.html#method-i-find_all","(req)","<p>Return an array of IndexSpecification objects matching DependencyRequest <code>req</code>.\n"],["find_all","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-find_all","(req)","<p>Returns an array of IndexSpecification objects matching DependencyRequest <code>req</code>.\n"],["find_all","Gem::Resolver::LockSet","Gem/Resolver/LockSet.html#method-i-find_all","(req)","<p>Returns an Array of IndexSpecification objects matching the DependencyRequest <code>req</code>.\n"],["find_all","Gem::Resolver::Set","Gem/Resolver/Set.html#method-i-find_all","(req)","<p>The find_all method must be implemented.  It returns all Resolver Specification objects matching the …\n"],["find_all","Gem::Resolver::VendorSet","Gem/Resolver/VendorSet.html#method-i-find_all","(req)","<p>Returns an Array of VendorSpecification objects matching the DependencyRequest <code>req</code>.\n"],["find_all_by_full_name","Gem::Specification","Gem/Specification.html#method-c-find_all_by_full_name","(full_name)","<p>Returns every spec that has the given <code>full_name</code>\n"],["find_all_by_name","Gem::Specification","Gem/Specification.html#method-c-find_all_by_name","(name, *requirements)","<p>Returns every spec that matches <code>name</code> and optional <code>requirements</code>.\n"],["find_all_satisfiers","Gem::Specification","Gem/Specification.html#method-i-find_all_satisfiers","(dep)","<p>Finds all gems that satisfy <code>dep</code>\n"],["find_by_full_name","Gem::Specification","Gem/Specification.html#method-c-find_by_full_name","(full_name)","<p>Find the best specification matching a <code>full_name</code>.\n"],["find_by_name","Gem::Specification","Gem/Specification.html#method-c-find_by_name","(name, *requirements)","<p>Find the best specification matching a <code>name</code> and <code>requirements</code>. Raises if the dependency doesn’t resolve …\n"],["find_by_path","Gem::Specification","Gem/Specification.html#method-c-find_by_path","(path)","<p>Return the best specification that contains the file matching <code>path</code>.\n"],["find_command","Gem::CommandManager","Gem/CommandManager.html#method-i-find_command","(cmd_name)",""],["find_command_possibilities","Gem::CommandManager","Gem/CommandManager.html#method-i-find_command_possibilities","(cmd_name)",""],["find_config_file","Gem","Gem.html#method-c-find_config_file","()","<p>Finds the user’s config file\n"],["find_files","Gem","Gem.html#method-c-find_files","(glob, check_load_path=true)","<p>Returns a list of paths matching <code>glob</code> that can be used by a gem to pick up features from other gems. …\n"],["find_files_for_gem","Gem::Validator","Gem/Validator.html#method-i-find_files_for_gem","(gem_directory)",""],["find_gem","Gem::Source::Local","Gem/Source/Local.html#method-i-find_gem","(gem_name, version = Gem::Requirement.default, prerelease = false)",""],["find_gemspec","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-find_gemspec","(glob = \"*.gemspec\")",""],["find_home","Gem","Gem.html#method-c-find_home","()","<p>Finds the user’s home directory.\n"],["find_in_cache","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-find_in_cache","(filename)","<p>Find cached filename in Gem.path. Returns nil if the file cannot be found.\n"],["find_in_unresolved","Gem::Specification","Gem/Specification.html#method-c-find_in_unresolved","(path)","<p>Return currently unresolved specs that contain the file matching <code>path</code>.\n"],["find_in_unresolved_tree","Gem::Specification","Gem/Specification.html#method-c-find_in_unresolved_tree","(path)","<p>Search through all unresolved deps and sub-dependencies and return specs that contain the file matching …\n"],["find_inactive_by_path","Gem::Specification","Gem/Specification.html#method-c-find_inactive_by_path","(path)","<p>Return the best specification that contains the file matching <code>path</code> amongst the specs that are not activated. …\n"],["find_latest_files","Gem","Gem.html#method-c-find_latest_files","(glob, check_load_path=true)","<p>Returns a list of paths matching <code>glob</code> from the latest gems that can be used by a gem to pick up features …\n"],["find_name","Gem::DependencyList","Gem/DependencyList.html#method-i-find_name","(full_name)",""],["find_paths","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-i-find_paths","(package_name, dirs)",""],["find_spec_for_exe","Gem","Gem.html#method-c-find_spec_for_exe","(name, exec_name, requirements)",""],["find_state_for","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-find_state_for","(requirement)","<p>@param [Object] requirement @return [ResolutionState] the state whose ‘requirement` is the given\n\n<pre>`requirement`.</pre>\n"],["find_unresolved_default_spec","Gem","Gem.html#method-c-find_unresolved_default_spec","(path)","<p>Find a Gem::Specification of default gem from <code>path</code>\n"],["finish_resolve","Gem","Gem.html#method-c-finish_resolve","(request_set=Gem::RequestSet.new)",""],["first","Gem::SourceList","Gem/SourceList.html#method-i-first","()","<p>Returns the first source in the list.\n"],["flush","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-flush","()","<p>Flushes the TarWriter’s IO\n"],["flush","Gem::SilentUI::NullIO","Gem/SilentUI/NullIO.html#method-i-flush","()",""],["for","Gem::GemcutterUtilities::WebauthnListener::Response","Gem/GemcutterUtilities/WebauthnListener/Response.html#method-c-for","(host)",""],["for_cache","Gem::Specification","Gem/Specification.html#method-i-for_cache","()","<p>Creates a duplicate spec without large blobs that aren’t used at runtime.\n"],["for_current_gems","Gem::Resolver","Gem/Resolver.html#method-c-for_current_gems","(needed)","<p>Creates a Resolver that queries only against the already installed gems for the <code>needed</code> dependencies. …\n"],["for_spec","Gem::Installer","Gem/Installer.html#method-c-for_spec","(spec, options = {})","<p>Construct an installer object for an ephemeral gem (one where we don’t actually have a .gem file, …\n"],["for_spec?","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-for_spec-3F","(spec)","<p>Returns true if the conflicting dependency’s name matches <code>spec</code>.\n"],["format_text","Gem::Text","Gem/Text.html#method-i-format_text","(text, wrap, indent=0)","<p>Wraps <code>text</code> to <code>wrap</code> characters and optionally indents by <code>indent</code> characters\n"],["format_time","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-i-format_time","(time)","<p>This is ported over from the yaml_tree in 1.9.3\n"],["formatted_program_filename","Gem::Installer","Gem/Installer.html#method-i-formatted_program_filename","(filename)","<p>Prefix and suffix the program filename the same as ruby.\n"],["freeze","Gem::Version","Gem/Version.html#method-i-freeze","()",""],["from","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-from","(stream)","<p>Creates a tar header from IO <code>stream</code>\n"],["from","Gem::SourceList","Gem/SourceList.html#method-c-from","(ary)","<p>Creates a new SourceList from an array of sources.\n"],["from_file","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-c-from_file","(file)",""],["from_list","Gem::NameTuple","Gem/NameTuple.html#method-c-from_list","(list)","<p>Turn an array of [name, version, platform] into an array of NameTuple objects.\n"],["from_specs","Gem::DependencyList","Gem/DependencyList.html#method-c-from_specs","()","<p>Creates a DependencyList from the current specs.\n"],["from_yaml","Gem::Specification","Gem/Specification.html#method-c-from_yaml","(input)","<p>Special loader for YAML files.  When a Specification object is loaded from a YAML file, it bypasses the …\n"],["full_gem_path","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-full_gem_path","()","<p>The full path to the gem (install path + full name).\n"],["full_name","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-full_name","()","<p>Returns the full name (name-version) of this Gem.  Platform information is included (name-version-platform) …\n"],["full_name","Gem::NameTuple","Gem/NameTuple.html#method-i-full_name","()","<p>Returns the full name (name-version) of this Gem.  Platform information is included if it is not the …\n"],["full_name","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-full_name","()","<p>Full name of the tar entry\n"],["full_name","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-full_name","()","<p>The full name of the specification to be activated.\n"],["full_name","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-full_name","()","<p>The name and version of the specification.\n<p>Unlike Gem::Specification#full_name, the platform is not included. …\n"],["full_name","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-full_name","()","<p>The name and version of the specification.\n<p>Unlike Gem::Specification#full_name, the platform is not included. …\n"],["full_name","Gem::Specification","Gem/Specification.html#method-i-full_name","()",""],["full_require_paths","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-full_require_paths","()","<p>Full paths in the gem to add to <code>$LOAD_PATH</code> when this gem is activated.\n"],["full_spec","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-full_spec","()","<p>The Gem::Specification for this activation request.\n"],["gem","Gem::Installer","Gem/Installer.html#method-i-gem","()","<p>Filename of the gem being installed.\n"],["gem","Gem::RequestSet","Gem/RequestSet.html#method-i-gem","(name, *reqs)","<p>Declare that a gem of name <code>name</code> with <code>reqs</code> requirements is needed.\n"],["gem","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-gem","(name, *requirements)","<p>Specifies a gem dependency with the given <code>name</code> and <code>requirements</code>.  You may also supply <code>options</code> following …\n"],["gem","Kernel","Kernel.html#method-i-gem","(gem_name, *requirements)","<p>Use Kernel#gem to activate a specific version of <code>gem_name</code>.\n<p><code>requirements</code> is a list of version requirements …\n"],["gem_contents","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-gem_contents","(name)",""],["gem_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-gem_dir","()","<p>Returns the full path to this spec’s gem directory. eg: /usr/local/lib/ruby/1.8/gems/mygem-1.0\n"],["gem_dir","Gem::Installer","Gem/Installer.html#method-i-gem_dir","()","<p>Lazy accessor for the spec’s gem directory.\n"],["gem_file_list","Gem::Indexer","Gem/Indexer.html#method-i-gem_file_list","()","<p>List of gem file names to index.\n"],["gem_install_dir","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-gem_install_dir","(name)",""],["gem_name","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-gem_name","()",""],["gem_name?","Gem::QueryUtils","Gem/QueryUtils.html#method-i-gem_name-3F","()",""],["gem_repository?","Gem::Doctor","Gem/Doctor.html#method-i-gem_repository-3F","()","<p>Are we doctoring a gem repository?\n"],["gemdeps_load","Gem::Installer","Gem/Installer.html#method-i-gemdeps_load","(name)",""],["gems_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-gems_dir","()","<p>Returns the full path to the gems directory containing this spec’s gem directory. eg: /usr/local/lib/ruby/1.8/gems …\n"],["gems_dir","Gem::Specification","Gem/Specification.html#method-i-gems_dir","()",""],["gemspec","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-gemspec","(options = {})","<p>Loads dependencies from a gemspec file.\n<p><code>options</code> include:\n<p>name:  &mdash; The name portion of the gemspec file.  …\n"],["gemspec_stubs_in","Gem::Specification","Gem/Specification.html#method-c-gemspec_stubs_in","(dir, pattern)",""],["generate_bin_script","Gem::Installer","Gem/Installer.html#method-i-generate_bin_script","(filename, bindir)","<p>Creates the scripts to run the applications in the gem.\n"],["generate_bin_symlink","Gem::Installer","Gem/Installer.html#method-i-generate_bin_symlink","(filename, bindir)","<p>Creates the symlinks to run the applications in the gem.  Moves the symlink if the gem being installed …\n"],["generate_canonical_query_params","Gem::S3URISigner","Gem/S3URISigner.html#method-i-generate_canonical_query_params","(s3_config, date_time, credential_info, expiration)",""],["generate_canonical_request","Gem::S3URISigner","Gem/S3URISigner.html#method-i-generate_canonical_request","(canonical_host, query_params)",""],["generate_default_dirs","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-generate_default_dirs","()",""],["generate_default_man_dir","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-generate_default_man_dir","()",""],["generate_index","Gem::Indexer","Gem/Indexer.html#method-i-generate_index","()","<p>Builds and installs indices.\n"],["generate_signature","Gem::S3URISigner","Gem/S3URISigner.html#method-i-generate_signature","(s3_config, date, string_to_sign)",""],["generate_string_to_sign","Gem::S3URISigner","Gem/S3URISigner.html#method-i-generate_string_to_sign","(date_time, credential_info, canonical_request)",""],["generate_windows_script","Gem::Installer","Gem/Installer.html#method-i-generate_windows_script","(filename, bindir)","<p>Creates windows .bat files for easy running of commands\n"],["get_all_gem_names","Gem::Command","Gem/Command.html#method-i-get_all_gem_names","()","<p>Get all gem names from the command line.\n"],["get_all_gem_names_and_versions","Gem::Command","Gem/Command.html#method-i-get_all_gem_names_and_versions","()","<p>Get all [gem, version] from the command line.\n<p>An argument in the form gem:ver is pull apart into the gen …\n"],["get_candidate_gems","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-get_candidate_gems","()",""],["get_candidates","Gem::OptionParser::List","Gem/OptionParser/List.html#method-i-get_candidates","(id)",""],["get_cert_files","Gem::Request","Gem/Request.html#method-c-get_cert_files","()",""],["get_env_editor","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-get_env_editor","()",""],["get_gems_to_cleanup","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-get_gems_to_cleanup","()",""],["get_hosts_for","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-get_hosts_for","(name)",""],["get_key_name","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-get_key_name","(scope)",""],["get_mfa_params","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-get_mfa_params","(profile)",""],["get_one_gem_name","Gem::Command","Gem/Command.html#method-i-get_one_gem_name","()","<p>Get a single gem name from the command line.  Fail if there is no gem name or if there is more than one …\n"],["get_one_optional_argument","Gem::Command","Gem/Command.html#method-i-get_one_optional_argument","()","<p>Get a single optional argument from the command line.  If more than one argument is given, return only …\n"],["get_owner_scope","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-get_owner_scope","(method: nil)",""],["get_path","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-get_path","(dependency)","<p>Return the full path to the cached gem file matching the given name and version requirement.  Returns …\n"],["get_platform_from_requirements","Gem::VersionOption","Gem/VersionOption.html#method-i-get_platform_from_requirements","(requirements)","<p>Extract platform given on the command line\n"],["get_primary_gems","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-get_primary_gems","()",""],["get_proxy_from_env","Gem::Request","Gem/Request.html#method-c-get_proxy_from_env","(scheme = \"http\")","<p>Returns a proxy URI for the given <code>scheme</code> if one is set in the environment variables.\n"],["get_public_key","Gem::Security","Gem/Security.html#method-c-get_public_key","(key)","<p>Gets the right public key from a PKey instance\n"],["get_push_scope","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-get_push_scope","()",""],["get_relative_path","Gem::Ext::ExtConfBuilder","Gem/Ext/ExtConfBuilder.html#method-c-get_relative_path","(path, base)",""],["get_scope_params","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-get_scope_params","(scope)",""],["get_set","Gem::Resolver::SourceSet","Gem/Resolver/SourceSet.html#method-i-get_set","(name)",""],["get_user_profile","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-get_user_profile","(email, password)",""],["get_version_from_requirements","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-get_version_from_requirements","(requirements)",""],["get_yank_scope","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-get_yank_scope","()",""],["getc","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-getc","()","<p>Read one byte from the tar entry\n"],["getopts","Gem::OptionParser","Gem/OptionParser.html#method-i-getopts","(*args)","<p>Wrapper method for getopts.rb.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">params</span> = <span class=\"ruby-constant\">ARGV</span>.<span class=\"ruby-identifier\">getopts</span>(<span class=\"ruby-string\">&quot;ab:&quot;</span>, <span class=\"ruby-string\">&quot;foo&quot;</span>, <span class=\"ruby-string\">&quot;bar:&quot;</span>, <span class=\"ruby-string\">&quot;zot:Z;zot option&quot;</span>)\n<span class=\"ruby-comment\"># params[&quot;a&quot;] ...</span>\n</pre>\n"],["getopts","Gem::OptionParser","Gem/OptionParser.html#method-c-getopts","(*args)","<p>See #getopts.\n"],["getopts","Gem::OptionParser::Arguable","Gem/OptionParser/Arguable.html#method-i-getopts","(*args)","<p>Substitution of getopts is possible as follows. Also see Gem::OptionParser#getopts.\n\n<pre>def getopts(*args) ...</pre>\n"],["gets","Gem::SilentUI::NullIO","Gem/SilentUI/NullIO.html#method-i-gets","(*args)",""],["git","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-git","(repository)","<p>Block form for specifying gems from a git <code>repository</code>.\n\n<pre>git &#39;https://github.com/rails/rails.git&#39; do\n  gem ...</pre>\n"],["git_path","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-i-git_path","()","<p>Git binary path\n"],["git_source","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-git_source","(name, &callback)","<p>Defines a custom git source that uses <code>name</code> to expand git repositories for use in gems built from git …\n"],["glob_files_in_dir","Gem::Util","Gem/Util.html#method-c-glob_files_in_dir","(glob, base_path)","<p>Globs for files matching <code>pattern</code> inside of <code>directory</code>, returning absolute paths to the matching files. …\n"],["group","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-group","(*groups)","<p>Block form for placing a dependency in the given <code>groups</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">group</span> <span class=\"ruby-value\">:development</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-identifier\">gem</span> <span class=\"ruby-string\">&#39;debugger&#39;</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">group</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["group_possibilities","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-group_possibilities","(possibilities)","<p>Build an array of PossibilitySets, with each element representing a group of dependency versions that …\n"],["guess","Gem::OptionParser::Switch","Gem/OptionParser/Switch.html#method-c-guess","(arg)","<p>Guesses argument style from <code>arg</code>.  Returns corresponding Gem::OptionParser::Switch class (OptionalArgument …\n"],["gunzip","Gem::Util","Gem/Util.html#method-c-gunzip","(data)","<p>Zlib::GzipReader wrapper that unzips <code>data</code>.\n"],["gzip","Gem::Indexer","Gem/Indexer.html#method-i-gzip","(filename)","<p>Zlib::GzipWriter wrapper that gzips <code>filename</code> on disk.\n"],["gzip","Gem::Util","Gem/Util.html#method-c-gzip","(data)","<p>Zlib::GzipWriter wrapper that zips <code>data</code>.\n"],["gzip_to","Gem::Package","Gem/Package.html#method-i-gzip_to","(io)","<p>Gzips content written to <code>gz_io</code> to <code>io</code>.\n"],["handle_arguments","Gem::ConfigFile","Gem/ConfigFile.html#method-i-handle_arguments","(arg_list)","<p>Handle the command arguments.\n"],["handle_missing_or_push_dependency_state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-handle_missing_or_push_dependency_state","(state)","<p>Pushes a new {DependencyState}. If the {#specification_provider} says to {SpecificationProvider#allow_missing?} …\n"],["handle_options","Gem::Command","Gem/Command.html#method-i-handle_options","(args)","<p>Handle the given list of arguments by parsing them and recording the results.\n"],["handle_options","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-handle_options","(args)",""],["handles?","Gem::Command","Gem/Command.html#method-i-handles-3F","(args)","<p>True if the command handles the given argument list.\n"],["has_conflicts?","Gem::Specification","Gem/Specification.html#method-i-has_conflicts-3F","()","<p>Return true if there are possible conflicts against the currently loaded specs.\n"],["hash","Gem::NameTuple","Gem/NameTuple.html#method-i-hash","()",""],["hash","Gem::Resolver::APISpecification","Gem/Resolver/APISpecification.html#method-i-hash","()",""],["hash","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-hash","()",""],["hash","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-i-hash","()",""],["hash","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-hash","()","<p>@return [Fixnum] a hash for the vertex based upon its {#name}\n"],["have_extensions?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-have_extensions-3F","()",""],["have_file?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-have_file-3F","(file, suffixes)",""],["header","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-header","(checksum = @checksum)",""],["help","Gem::OptionParser","Gem/OptionParser.html#method-i-help","()","<p>Returns option summary string.\n"],["host","Gem","Gem.html#method-c-host","()","<p>Get the default RubyGems API host. This is normally <code>https://rubygems.org</code>.\n"],["host","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-host","()","<p>The host to connect to either from the RUBYGEMS_HOST environment variable or from the user’s configuration …\n"],["host=","Gem","Gem.html#method-c-host-3D","(host)","<p>Set the default RubyGems API host.\n"],["https?","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-https-3F","(uri)",""],["identity","Gem::Dependency","Gem/Dependency.html#method-i-identity","()",""],["implicit?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-implicit-3F","()","<p>Indicate that the request is for a gem requested as a dependency of another gem\n"],["import","Gem::RequestSet","Gem/RequestSet.html#method-i-import","(deps)","<p>Add <code>deps</code> Gem::Dependency objects to the set.\n"],["inc","Gem::OptionParser","Gem/OptionParser.html#method-c-inc","(arg, default = nil)","<p>Returns an incremented value of <code>default</code> according to <code>arg</code>.\n"],["inc","Gem::OptionParser","Gem/OptionParser.html#method-i-inc","(*args)",""],["include?","Gem::SourceList","Gem/SourceList.html#method-i-include-3F","(other)","<p>Returns true if this source list includes <code>other</code> which may be a Gem::Source or a source URI.\n"],["incompatible_argument_styles","Gem::OptionParser::Switch","Gem/OptionParser/Switch.html#method-c-incompatible_argument_styles","(arg, t)",""],["incompatible_argument_styles","Gem::OptionParser::Switch::NoArgument","Gem/OptionParser/Switch/NoArgument.html#method-c-incompatible_argument_styles","(*)",""],["indicate_progress","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-indicate_progress","()","<p>Indicates progress roughly once every second @return [void]\n"],["indicate_progress","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-indicate_progress","()","<p>Called roughly every {#progress_rate}, this method should convey progress to the user.\n<p>@return [void] …\n"],["inflate","Gem::Util","Gem/Util.html#method-c-inflate","(data)","<p>A Zlib::Inflate#inflate wrapper\n"],["inherited","Gem::Installer","Gem/Installer.html#method-c-inherited","(klass)","<p>Changes in rubygems to lazily loading ‘rubygems/command` (in order to lazily load `optparse` as a side …\n"],["init","Gem::PackageTask","Gem/PackageTask.html#method-i-init","(gem)","<p>Initialization tasks without the “yield self” or define operations.\n"],["initialize","Gem::Package","Gem/Package.html#method-i-initialize","(gem, security_policy)","<p>Creates a new package that will read or write to the file <code>gem</code>.\n"],["initialize_copy","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-initialize_copy","(other)","<p>Initializes a copy of a {DependencyGraph}, ensuring that all {#vertices} are properly copied. @param …\n"],["initialize_copy","Gem::Specification","Gem/Specification.html#method-i-initialize_copy","(other_spec)","<p>Duplicates array_attributes from <code>other_spec</code> so state isn’t shared.\n"],["initialize_copy","Gem::Uri","Gem/Uri.html#method-i-initialize_copy","(original)",""],["inject_into_list","Gem::AvailableSet","Gem/AvailableSet.html#method-i-inject_into_list","(dep_list)",""],["input","Gem::MockGemUi","Gem/MockGemUi.html#method-i-input","()",""],["inspect","Gem::OptionParser::ParseError","Gem/OptionParser/ParseError.html#method-i-inspect","()",""],["inspect","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-inspect","()","<p>@return [String] a string suitable for debugging\n"],["inspect","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-inspect","()","<p>@return [String] a string suitable for debugging\n"],["install","Gem","Gem.html#method-c-install","(name, version = Gem::Requirement.default, *options)","<p>Top level install helper method. Allows you to install gems interactively:\n\n<pre>% irb\n&gt;&gt; Gem.install &quot;minitest&quot; ...</pre>\n"],["install","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-install","()",""],["install","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-install","(dep_or_name, version = Gem::Requirement.default)","<p>Installs the gem <code>dep_or_name</code> and all its dependencies.  Returns an Array of installed gem specifications. …\n"],["install","Gem::Installer","Gem/Installer.html#method-i-install","()","<p>Installs the gem and returns a loaded Gem::Specification for the installed gem.\n<p>The gem will be installed …\n"],["install","Gem::RequestSet","Gem/RequestSet.html#method-i-install","(options)","<p>Installs gems for this RequestSet using the Gem::Installer <code>options</code>.\n<p>If a <code>block</code> is given an activation …\n"],["install","Gem::Resolver::GitSpecification","Gem/Resolver/GitSpecification.html#method-i-install","(options = {})","<p>Installing a git gem only involves building the extensions and generating the executables.\n"],["install","Gem::Resolver::InstalledSpecification","Gem/Resolver/InstalledSpecification.html#method-i-install","(options = {})","<p>This is a null install as this specification is already installed. <code>options</code> are ignored.\n"],["install","Gem::Resolver::LockSpecification","Gem/Resolver/LockSpecification.html#method-i-install","(options = {})","<p>This is a null install as a locked specification is considered installed. <code>options</code> are ignored.\n"],["install","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-install","(options = {})","<p>Installs this specification using the Gem::Installer <code>options</code>.  The install method yields a Gem::Installer …\n"],["install","Gem::Resolver::VendorSpecification","Gem/Resolver/VendorSpecification.html#method-i-install","(options = {})","<p>This is a null install as this gem was unpacked into a directory. <code>options</code> are ignored.\n"],["install_default_bundler_gem","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_default_bundler_gem","(bin_dir)",""],["install_executables","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_executables","(bin_dir)",""],["install_file","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_file","(file, dest_dir)",""],["install_file_list","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_file_list","(files, dest_dir)",""],["install_from_gemdeps","Gem::RequestSet","Gem/RequestSet.html#method-i-install_from_gemdeps","(options, &block)","<p>Installs from the gem dependencies files in the <code>:gemdeps</code> option in <code>options</code>, yielding to the <code>block</code> as …\n"],["install_hooks","Gem::RequestSet","Gem/RequestSet.html#method-i-install_hooks","(requests, options)","<p>Call hooks on installed gems\n"],["install_if_needed","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-install_if_needed","()",""],["install_indices","Gem::Indexer","Gem/Indexer.html#method-i-install_indices","()","<p>Install generated indices into the destination directory.\n"],["install_into","Gem::RequestSet","Gem/RequestSet.html#method-i-install_into","(dir, force = true, options = {})",""],["install_lib","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_lib","(lib_dir)",""],["install_rdoc","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_rdoc","()",""],["install_update_defaults_str","Gem::InstallUpdateOptions","Gem/InstallUpdateOptions.html#method-i-install_update_defaults_str","()","<p>Default description for the gem install and update commands.\n"],["install_update_options","Gem::InstallUpdateOptions","Gem/InstallUpdateOptions.html#method-i-install_update_options","()","<p>Default options for the gem install and update commands.\n"],["installable?","Gem::Platform","Gem/Platform.html#method-c-installable-3F","(spec)",""],["installable_platform?","Gem::Resolver::InstalledSpecification","Gem/Resolver/InstalledSpecification.html#method-i-installable_platform-3F","()","<p>Returns <code>true</code> if this gem is installable for the current platform.\n"],["installable_platform?","Gem::Resolver::LocalSpecification","Gem/Resolver/LocalSpecification.html#method-i-installable_platform-3F","()","<p>Returns <code>true</code> if this gem is installable for the current platform.\n"],["installable_platform?","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-installable_platform-3F","()","<p>Returns true if this specification is installable on this platform.\n"],["installation_satisfies_dependency?","Gem::Installer","Gem/Installer.html#method-i-installation_satisfies_dependency-3F","(dependency)","<p>True if the gems in the system satisfy <code>dependency</code>.\n"],["installed?","Gem::QueryUtils","Gem/QueryUtils.html#method-i-installed-3F","(name, req = Gem::Requirement.default)","<p>Check if gem <code>name</code> version <code>version</code> is installed.\n"],["installed?","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-installed-3F","()","<p>True if the requested gem has already been installed.\n"],["installed_specs","Gem::Installer","Gem/Installer.html#method-i-installed_specs","()","<p>Return an Array of Specifications contained within the gem_home we’ll be installing into.\n"],["installed_stubs","Gem::Specification","Gem/Specification.html#method-c-installed_stubs","(dirs, pattern)",""],["instance","Gem::CommandManager","Gem/CommandManager.html#method-c-instance","()","<p>Return the authoritative instance of the command manager.\n"],["instance","Gem::CommandManager","Gem/CommandManager.html#method-i-instance","()","<p>Returns self. Allows a CommandManager instance to stand in for the class itself.\n"],["invalidate_memoized_attributes","Gem::Specification","Gem/Specification.html#method-i-invalidate_memoized_attributes","()","<p>Expire memoized instance variables that can incorrectly generate, replace or miss files due changes in …\n"],["invoke","Gem::Command","Gem/Command.html#method-i-invoke","(*args)","<p>Invoke the command with the given list of arguments.\n"],["invoke_command","Gem::CommandManager","Gem/CommandManager.html#method-i-invoke_command","(args, build_args)",""],["invoke_with_build_args","Gem::Command","Gem/Command.html#method-i-invoke_with_build_args","(args, build_args)","<p>Invoke the command with the given list of normal arguments and additional build arguments.\n"],["is_reachable_from?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-is_reachable_from-3F","(other)",""],["issuer_of","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-issuer_of","(certificate)","<p>Returns the issuer certificate of the given <code>certificate</code> if it exists in the trust directory.\n"],["iteration!","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-iteration-21","()",""],["java_platform?","Gem","Gem.html#method-c-java_platform-3F","()","<p>Is this a java platform?\n"],["keep_only_files_and_directories","Gem::Specification","Gem/Specification.html#method-i-keep_only_files_and_directories","()",""],["last_update_check","Gem::ConfigFile","Gem/ConfigFile.html#method-i-last_update_check","()","<p>Reads time of last update check from state file\n"],["last_update_check=","Gem::ConfigFile","Gem/ConfigFile.html#method-i-last_update_check-3D","(timestamp)","<p>Writes time of last update check to state file\n"],["latest_rubygems_version","Gem","Gem.html#method-c-latest_rubygems_version","()","<p>Returns the latest release version of RubyGems.\n"],["latest_spec_for","Gem","Gem.html#method-c-latest_spec_for","(name)","<p>Returns the latest release-version specification for the gem <code>name</code>.\n"],["latest_spec_for","Gem::Specification","Gem/Specification.html#method-c-latest_spec_for","(name)","<p>Return the latest installed spec for gem <code>name</code>.\n"],["latest_specs","Gem::Specification","Gem/Specification.html#method-c-latest_specs","(prerelease = false)","<p>Return the latest specs, optionally including prerelease specs if <code>prerelease</code> is true.\n"],["latest_version","Gem::Resolver::Molinillo::Resolver::Resolution::PossibilitySet","Gem/Resolver/Molinillo/Resolver/Resolution/PossibilitySet.html#method-i-latest_version","()","<p>@return [Object] most up-to-date dependency in the possibility set\n"],["latest_version?","Gem::Dependency","Gem/Dependency.html#method-i-latest_version-3F","()","<p>Is this dependency simply asking for the latest version of a gem?\n"],["latest_version_for","Gem","Gem.html#method-c-latest_version_for","(name)","<p>Returns the version of the latest release-version of gem <code>name</code>\n"],["ldflag_to_link_modifier","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-ldflag_to_link_modifier","(arg)",""],["length","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-length","()",""],["levenshtein_distance","Gem::Text","Gem/Text.html#method-i-levenshtein_distance","(str1, str2)","<p>Returns a value representing the “cost” of transforming str1 into str2 Vendored version of …\n"],["lib_dirs_glob","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-lib_dirs_glob","()","<p>Returns a string usable in Dir.glob to match all requirable paths for this spec.\n"],["lib_files","Gem::Specification","Gem/Specification.html#method-i-lib_files","()","<p>Files in the Gem under one of the require_paths\n"],["libruby_args","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-libruby_args","(dest_dir)",""],["license","Gem::Specification","Gem/Specification.html#method-i-license","()","<p>Singular accessor for #licenses\n"],["license=","Gem::Specification","Gem/Specification.html#method-i-license-3D","(o)","<p>The license for this gem.\n<p>The license must be no more than 64 characters.\n<p>This should just be the name …\n"],["licenses","Gem::Specification","Gem/Specification.html#method-i-licenses","()","<p>Plural accessor for setting licenses\n<p>See #license= for details\n"],["licenses=","Gem::Specification","Gem/Specification.html#method-i-licenses-3D","(licenses)","<p>The license(s) for the library.\n<p>Each license must be a short name, no more than 64 characters.\n<p>This should …\n"],["lines","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-i-lines","(str)",""],["linker_args","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-linker_args","()","<p>We want to use the same linker that Ruby uses, so that the linker flags from mkmf work properly.\n"],["listener_thread","Gem::GemcutterUtilities::WebauthnListener","Gem/GemcutterUtilities/WebauthnListener.html#method-c-listener_thread","(host, server)",""],["load","Gem::OptionParser","Gem/OptionParser.html#method-i-load","(filename = nil, into: nil)","<p>Loads options from file names as <code>filename</code>. Does nothing when the file is not present. Returns whether …\n"],["load","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-load","()","<p>Loads the gem dependency file and returns self.\n"],["load","Gem::SafeYAML","Gem/SafeYAML.html#method-c-load","(input)",""],["load","Gem::Specification","Gem/Specification.html#method-c-load","(file)","<p>Loads Ruby format gemspec from <code>file</code>.\n"],["load!","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-load-21","()",""],["load_and_instantiate","Gem::CommandManager","Gem/CommandManager.html#method-i-load_and_instantiate","(command_name)",""],["load_api_keys","Gem::ConfigFile","Gem/ConfigFile.html#method-i-load_api_keys","()",""],["load_certificate","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-load_certificate","(certificate_file)","<p>Loads the given <code>certificate_file</code>\n"],["load_default_cert","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-load_default_cert","()",""],["load_default_key","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-load_default_key","()",""],["load_defaults","Gem::Specification","Gem/Specification.html#method-c-load_defaults","()","<p>Loads the default specifications. It should be called only once.\n"],["load_env_plugins","Gem","Gem.html#method-c-load_env_plugins","()","<p>Find all ‘rubygems_plugin’ files in $LOAD_PATH and load them\n"],["load_file","Gem::ConfigFile","Gem/ConfigFile.html#method-i-load_file","(filename)",""],["load_gemdeps","Gem::RequestSet","Gem/RequestSet.html#method-i-load_gemdeps","(path, without_groups = [], installing = false)","<p>Load a dependency management file.\n"],["load_path_insert_index","Gem","Gem.html#method-c-load_path_insert_index","()","<p>The index to insert activated gem paths into the $LOAD_PATH. The activated gem’s paths are inserted …\n"],["load_plugin","Gem::Installer","Gem/Installer.html#method-i-load_plugin","()",""],["load_plugins","Gem","Gem.html#method-c-load_plugins","()","<p>Find rubygems plugin files in the standard location and load them\n"],["load_relative_enabled?","Gem::Installer","Gem/Installer.html#method-i-load_relative_enabled-3F","()",""],["load_specs","Gem::Source","Gem/Source.html#method-i-load_specs","(type)","<p>Loads <code>type</code> kind of specs fetching from +@uri+ if the on-disk cache is out of date.\n<p><code>type</code> is one of the …\n"],["load_yaml","Gem","Gem.html#method-c-load_yaml","()","<p>Loads YAML, preferring Psych\n"],["local","Gem::Platform","Gem/Platform.html#method-c-local","()",""],["local?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-local-3F","()","<p>Is local fetching enabled?\n"],["location_of_caller","Gem","Gem.html#method-c-location_of_caller","(depth = 1)","<p>The file name and line number of the caller of the caller of this method.\n<p><code>depth</code> is how many layers up …\n"],["locked_puts","Gem::StreamUI::ThreadedDownloadReporter","Gem/StreamUI/ThreadedDownloadReporter.html#method-i-locked_puts","(message)",""],["locked_requirement_named","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-locked_requirement_named","(requirement_name)","<p>@param [String] requirement_name the spec name to search for @return [Object] the locked spec named ‘requirement_name`, …\n"],["locked_requirement_possibility_set","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-locked_requirement_possibility_set","(requirement, activated = self.activated)","<p>@param [Object] requirement the proposed requirement @param [Object] activated @return [Array] possibility …\n"],["lockfile_contents","Gem::BundlerVersionFinder","Gem/BundlerVersionFinder.html#method-c-lockfile_contents","()",""],["lockfile_version","Gem::BundlerVersionFinder","Gem/BundlerVersionFinder.html#method-c-lockfile_version","()",""],["make","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-make","(dest_path, results, make_dir = Dir.pwd, sitedir = nil, targets = [\"clean\", \"\", \"install\"])",""],["make_destination_dirs","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-make_destination_dirs","()",""],["make_edge","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-make_edge","(graph)","<p>@param  [DependencyGraph] graph the graph to find vertices from @return [Edge] The edge this action adds …\n"],["make_edge","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-i-make_edge","(graph)","<p>@param  [DependencyGraph] graph the graph to find vertices from @return [Edge] The edge this action adds …\n"],["make_entry","Gem::QueryUtils","Gem/QueryUtils.html#method-i-make_entry","(entry_tuples, platforms)",""],["make_parser","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-make_parser","(set, platforms)",""],["make_switch","Gem::OptionParser","Gem/OptionParser.html#method-i-make_switch","(opts, block = nil)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["make_temp_directories","Gem::Indexer","Gem/Indexer.html#method-i-make_temp_directories","()","<p>Make directories for index generation\n"],["makefile_config","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-makefile_config","(var_name)",""],["manage_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-manage_owners","(method, name, owners)",""],["map_gems_to_specs","Gem::Indexer","Gem/Indexer.html#method-i-map_gems_to_specs","(gems)",""],["mark_version","Gem::Specification","Gem/Specification.html#method-i-mark_version","()","<p>Sets the rubygems_version to the current RubyGems version.\n"],["marshal_dump","Gem::Version","Gem/Version.html#method-i-marshal_dump","()","<p>Dump only the raw version string, not the complete object. It’s a string for backwards (RubyGems …\n"],["marshal_load","Gem::Version","Gem/Version.html#method-i-marshal_load","(array)","<p>Load custom marshal format. It’s a string for backwards (RubyGems 1.3.5 and earlier) compatibility. …\n"],["marshal_version","Gem","Gem.html#method-c-marshal_version","()","<p>The version of the Marshal format for your Ruby.\n"],["match","Gem::OptionParser::CompletingHash","Gem/OptionParser/CompletingHash.html#method-i-match","(key)","<p>Completion for hash key.\n"],["match","Gem::Platform","Gem/Platform.html#method-c-match","(platform)",""],["match?","Gem::Dependency","Gem/Dependency.html#method-i-match-3F","(obj, version=nil, allow_prerelease=false)","<p>Does this dependency match the specification described by <code>name</code> and <code>version</code> or match <code>spec</code>?\n<p>NOTE:  Unlike …\n"],["match?","Gem::Licenses","Gem/Licenses.html#method-c-match-3F","(license)",""],["match?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-match-3F","(spec, allow_prerelease = false)","<p>Does this dependency request match <code>spec</code>?\n<p>NOTE:  #match? only matches prerelease versions when #dependency …\n"],["match_gem?","Gem::Platform","Gem/Platform.html#method-c-match_gem-3F","(platform, gem_name)",""],["match_platform!","Gem::AvailableSet","Gem/AvailableSet.html#method-i-match_platform-21","()",""],["match_platform?","Gem::NameTuple","Gem/NameTuple.html#method-i-match_platform-3F","()","<p>Indicate if this NameTuple matches the current platform.\n"],["match_platforms?","Gem::Platform","Gem/Platform.html#method-c-match_platforms-3F","(platform, platforms)",""],["match_spec?","Gem::Platform","Gem/Platform.html#method-c-match_spec-3F","(spec)",""],["matches_for_glob","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-matches_for_glob","(glob)","<p>Return all files in this gem that match for <code>glob</code>.\n"],["matches_spec?","Gem::Dependency","Gem/Dependency.html#method-i-matches_spec-3F","(spec)","<p>Does this dependency match <code>spec</code>?\n<p>NOTE:  This is not a convenience method.  Unlike #match? this method …\n"],["matches_spec?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-matches_spec-3F","(spec)","<p>Does this dependency request match <code>spec</code>?\n<p>NOTE:  #matches_spec? matches prerelease versions.  See also …\n"],["matching_specs","Gem::Dependency","Gem/Dependency.html#method-i-matching_specs","(platform_only = false)",""],["maybe_resolve_ldflag_variable","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-maybe_resolve_ldflag_variable","(input_arg, dest_dir, crate_name)","<p>Interpolate substitution vars in the arg (i.e. $(DEFFILE))\n"],["merge","Gem::Dependency","Gem/Dependency.html#method-i-merge","(other)","<p>Merges the requirements of <code>other</code> into this dependency\n"],["merge_options","Gem::Command","Gem/Command.html#method-i-merge_options","(new_options)","<p>Merge a set of command options with the set of default options (without modifying the default option …\n"],["message","Gem::OptionParser::ParseError","Gem/OptionParser/ParseError.html#method-i-message","()","<p>Default stringizing method to emit standard error message.\n"],["message","Gem::Resolver::Molinillo::NoSuchDependencyError","Gem/Resolver/Molinillo/NoSuchDependencyError.html#method-i-message","()","<p>The error message for the missing dependency, including the specifications that had this dependency. …\n"],["message","Gem::RuntimeRequirementNotMetError","Gem/RuntimeRequirementNotMetError.html#method-i-message","()",""],["message_with_trees","Gem::Resolver::Molinillo::VersionConflict","Gem/Resolver/Molinillo/VersionConflict.html#method-i-message_with_trees","(opts = {})","<p>@return [String] An error message that includes requirement trees,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">which</span> <span class=\"ruby-identifier\">is</span> <span class=\"ruby-identifier\">much</span> <span class=\"ruby-identifier\">more</span> <span class=\"ruby-identifier\">detailed</span> <span class=\"ruby-operator\">&amp;</span> <span class=\"ruby-identifier\">customizable</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["metadata_satisfied?","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-metadata_satisfied-3F","(spec)",""],["method_missing","Gem::Uri","Gem/Uri.html#method-i-method_missing","(method_name, *args, &blk)",""],["mfa_unauthorized?","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-mfa_unauthorized-3F","(response)",""],["mingw_target?","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-mingw_target-3F","()",""],["missing_extensions?","Gem::Specification","Gem/Specification.html#method-i-missing_extensions-3F","()","<p>Is this specification missing its extensions?  When this returns true you probably want to build_extensions …\n"],["mkdir","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-mkdir","(name, mode)","<p>Creates a new directory in the tar file <code>name</code> with <code>mode</code>\n"],["mkdir_p","Gem::Commands::SetupCommand::MakeDirs","Gem/Commands/SetupCommand/MakeDirs.html#method-i-mkdir_p","(path, **opts)",""],["mkmf_libpath","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-mkmf_libpath","()","<p>Corresponds to $(LIBPATH) in mkmf\n"],["msvc_target?","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-msvc_target-3F","()",""],["mswin_link_args","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-mswin_link_args","()",""],["name","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-name","()","<p>Name of the gem\n"],["name","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-name","()","<p>The name of this activation request’s specification\n"],["name","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-name","()","<p>The name of the gem this dependency request is requesting.\n"],["name","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-name","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#name)\n"],["name","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-name","()","<p>The name of the gem for this specification\n"],["name","Gem::UnsatisfiableDependencyError","Gem/UnsatisfiableDependencyError.html#method-i-name","()","<p>The name of the unresolved dependency\n"],["name_for","Gem::Resolver","Gem/Resolver.html#method-i-name_for","(dependency)",""],["name_for","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-name_for","(dependency)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#name_for)\n"],["name_for","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-name_for","(dependency)","<p>Returns the name for the given ‘dependency`. @note This method should be ’pure’, i.e. the return …\n"],["name_for_explicit_dependency_source","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-name_for_explicit_dependency_source","()","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#name_for_explicit_dependency_source)\n"],["name_for_explicit_dependency_source","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-name_for_explicit_dependency_source","()","<p>@return [String] the name of the source of explicit dependencies, i.e.\n\n<pre>those passed to {Resolver#resolve} ...</pre>\n"],["name_for_locking_dependency_source","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-name_for_locking_dependency_source","()","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#name_for_locking_dependency_source)\n"],["name_for_locking_dependency_source","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-name_for_locking_dependency_source","()","<p>@return [String] the name of the source of ‘locked’ dependencies, i.e.\n\n<pre>those passed to {Resolver#resolve} ...</pre>\n"],["name_path","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-name_path","(name)","<p>Returns the path to the trusted certificate with the given ASN.1 <code>name</code>\n"],["name_pattern","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-i-name_pattern","(args)",""],["name_tuple","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-name_tuple","()",""],["name_tuple","Gem::Specification","Gem/Specification.html#method-i-name_tuple","()","<p>Return a NameTuple that represents this Specification\n"],["needs","Gem","Gem.html#method-c-needs","()",""],["new","CoreExtensions::TCPSocketExt::Initializer","CoreExtensions/TCPSocketExt/Initializer.html#method-c-new","(host, serv, *rest)",""],["new","Gem::AvailableSet","Gem/AvailableSet.html#method-c-new","()",""],["new","Gem::BasicSpecification","Gem/BasicSpecification.html#method-c-new","()",""],["new","Gem::Command","Gem/Command.html#method-c-new","(command, summary=nil, defaults={})","<p>Initializes a generic gem command named <code>command</code>.  <code>summary</code> is a short description displayed in ‘gem help …\n"],["new","Gem::CommandManager","Gem/CommandManager.html#method-c-new","()","<p>Register all the subcommands supported by the gem command.\n"],["new","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-c-new","()",""],["new","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-c-new","()",""],["new","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-c-new","()",""],["new","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-c-new","()",""],["new","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-c-new","()",""],["new","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-c-new","()",""],["new","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-c-new","()",""],["new","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-c-new","()",""],["new","Gem::Commands::FetchCommand","Gem/Commands/FetchCommand.html#method-c-new","()",""],["new","Gem::Commands::GenerateIndexCommand","Gem/Commands/GenerateIndexCommand.html#method-c-new","()",""],["new","Gem::Commands::HelpCommand","Gem/Commands/HelpCommand.html#method-c-new","()",""],["new","Gem::Commands::InfoCommand","Gem/Commands/InfoCommand.html#method-c-new","()",""],["new","Gem::Commands::InstallCommand","Gem/Commands/InstallCommand.html#method-c-new","()",""],["new","Gem::Commands::ListCommand","Gem/Commands/ListCommand.html#method-c-new","()",""],["new","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-c-new","()",""],["new","Gem::Commands::MirrorCommand","Gem/Commands/MirrorCommand.html#method-c-new","()",""],["new","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-c-new","()",""],["new","Gem::Commands::OutdatedCommand","Gem/Commands/OutdatedCommand.html#method-c-new","()",""],["new","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-c-new","()",""],["new","Gem::Commands::PristineCommand","Gem/Commands/PristineCommand.html#method-c-new","()",""],["new","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-c-new","()",""],["new","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-c-new","(name = \"query\", summary = \"Query gem information in local or remote repositories\")",""],["new","Gem::Commands::RdocCommand","Gem/Commands/RdocCommand.html#method-c-new","()",""],["new","Gem::Commands::SearchCommand","Gem/Commands/SearchCommand.html#method-c-new","()",""],["new","Gem::Commands::ServerCommand","Gem/Commands/ServerCommand.html#method-c-new","()",""],["new","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-c-new","()",""],["new","Gem::Commands::SigninCommand","Gem/Commands/SigninCommand.html#method-c-new","()",""],["new","Gem::Commands::SignoutCommand","Gem/Commands/SignoutCommand.html#method-c-new","()",""],["new","Gem::Commands::SourcesCommand","Gem/Commands/SourcesCommand.html#method-c-new","()",""],["new","Gem::Commands::SpecificationCommand","Gem/Commands/SpecificationCommand.html#method-c-new","()",""],["new","Gem::Commands::StaleCommand","Gem/Commands/StaleCommand.html#method-c-new","()",""],["new","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-c-new","()",""],["new","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-c-new","()",""],["new","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-c-new","()",""],["new","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-c-new","()",""],["new","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-c-new","()",""],["new","Gem::ConfigFile","Gem/ConfigFile.html#method-c-new","(args)","<p>Create the config file object.  <code>args</code> is the list of arguments from the command line.\n<p>The following command …\n"],["new","Gem::ConflictError","Gem/ConflictError.html#method-c-new","(target, conflicts)",""],["new","Gem::ConsoleUI","Gem/ConsoleUI.html#method-c-new","()","<p>The Console UI has no arguments as it defaults to reading input from stdin, output to stdout and warnings …\n"],["new","Gem::Dependency","Gem/Dependency.html#method-c-new","(name, *requirements)","<p>Constructs a dependency with <code>name</code> and <code>requirements</code>. The last argument can optionally be the dependency …\n"],["new","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-c-new","(options = {})","<p>Creates a new installer instance.\n<p>Options are:\n<p>:cache_dir &mdash; Alternate repository path to store .gem files …\n"],["new","Gem::DependencyList","Gem/DependencyList.html#method-c-new","(development = false)","<p>Creates a new DependencyList.  If <code>development</code> is true, development dependencies will be included.\n"],["new","Gem::DependencyResolutionError","Gem/DependencyResolutionError.html#method-c-new","(conflict)",""],["new","Gem::Doctor","Gem/Doctor.html#method-c-new","(gem_repository, dry_run = false)","<p>Creates a new Gem::Doctor that will clean up <code>gem_repository</code>.  Only one gem repository may be cleaned …\n"],["new","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-new","(spec, build_args = spec.build_args)","<p>Creates a new extension builder for <code>spec</code>.  If the <code>spec</code> does not yet have build arguments, saved, set …\n"],["new","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-c-new","()",""],["new","Gem::Ext::CargoBuilder::DylibNotFoundError","Gem/Ext/CargoBuilder/DylibNotFoundError.html#method-c-new","(dir)",""],["new","Gem::FilePermissionError","Gem/FilePermissionError.html#method-c-new","(directory)",""],["new","Gem::GemRunner","Gem/GemRunner.html#method-c-new","()",""],["new","Gem::GemcutterUtilities::WebauthnListener","Gem/GemcutterUtilities/WebauthnListener.html#method-c-new","(host)",""],["new","Gem::GemcutterUtilities::WebauthnListener::Response","Gem/GemcutterUtilities/WebauthnListener/Response.html#method-c-new","(host)",""],["new","Gem::GemcutterUtilities::WebauthnListener::SocketResponder","Gem/GemcutterUtilities/WebauthnListener/SocketResponder.html#method-c-new","(socket)",""],["new","Gem::GemcutterUtilities::WebauthnPoller","Gem/GemcutterUtilities/WebauthnPoller.html#method-c-new","(options, host)",""],["new","Gem::ImpossibleDependenciesError","Gem/ImpossibleDependenciesError.html#method-c-new","(request, conflicts)",""],["new","Gem::Indexer","Gem/Indexer.html#method-c-new","(directory, options = {})","<p>Create an indexer that will index the gems in <code>directory</code>.\n"],["new","Gem::Installer","Gem/Installer.html#method-c-new","(package, options={})","<p>Constructs an Installer instance that will install the gem at <code>package</code> which can either be a path or an …\n"],["new","Gem::Installer::FakePackage","Gem/Installer/FakePackage.html#method-c-new","(spec)",""],["new","Gem::List","Gem/List.html#method-c-new","(value = nil, tail = nil)",""],["new","Gem::MissingSpecError","Gem/MissingSpecError.html#method-c-new","(name, requirement, extra_message=nil)",""],["new","Gem::MissingSpecVersionError","Gem/MissingSpecVersionError.html#method-c-new","(name, requirement, specs)",""],["new","Gem::MockGemUi","Gem/MockGemUi.html#method-c-new","(input = \"\")",""],["new","Gem::MockGemUi::InputEOFError","Gem/MockGemUi/InputEOFError.html#method-c-new","(question)",""],["new","Gem::MockGemUi::TermError","Gem/MockGemUi/TermError.html#method-c-new","(exit_code)",""],["new","Gem::NameTuple","Gem/NameTuple.html#method-c-new","(name, version, platform=\"ruby\")",""],["new","Gem::OptionParser","Gem/OptionParser.html#method-c-new","(banner = nil, width = 32, indent = ' ' * 4)","<p>Initializes the instance and yields itself if called with a block.\n<p><code>banner</code> &mdash; Banner message.\n<p><code>width</code> &mdash; Summary …\n"],["new","Gem::OptionParser","Gem/OptionParser.html#method-i-new","()","<p>Pushes a new List.\n"],["new","Gem::OptionParser::Arguable","Gem/OptionParser/Arguable.html#method-c-new","(*args)",""],["new","Gem::OptionParser::List","Gem/OptionParser/List.html#method-c-new","()","<p>Just initializes all instance variables.\n"],["new","Gem::OptionParser::ParseError","Gem/OptionParser/ParseError.html#method-c-new","(*args, additional: nil)",""],["new","Gem::OptionParser::Switch","Gem/OptionParser/Switch.html#method-c-new","(pattern = nil, conv = nil, short = nil, long = nil, arg = nil, desc = ([] if short or long), block = nil, &_block)",""],["new","Gem::Package","Gem/Package.html#method-c-new","(gem, security_policy = nil)","<p>Creates a new Gem::Package for the file at <code>gem</code>. <code>gem</code> can also be provided as an IO object.\n<p>If <code>gem</code> is an …\n"],["new","Gem::Package::DigestIO","Gem/Package/DigestIO.html#method-c-new","(io, digests)","<p>Creates a new DigestIO instance.  Using ::wrap is recommended, see the ::wrap documentation for documentation …\n"],["new","Gem::Package::FormatError","Gem/Package/FormatError.html#method-c-new","(message, source = nil)",""],["new","Gem::Package::Old","Gem/Package/Old.html#method-c-new","(gem, security_policy)","<p>Creates a new old-format package reader for <code>gem</code>.  Old-format packages cannot be written.\n"],["new","Gem::Package::PathError","Gem/Package/PathError.html#method-c-new","(destination, destination_dir)",""],["new","Gem::Package::SymlinkError","Gem/Package/SymlinkError.html#method-c-new","(name, destination, destination_dir)",""],["new","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-new","(vals)","<p>Creates a new TarHeader using <code>vals</code>\n"],["new","Gem::Package::TarReader","Gem/Package/TarReader.html#method-c-new","(io)","<p>Creates a new TarReader on <code>io</code> and yields it to the block, if given.\n"],["new","Gem::Package::TarReader","Gem/Package/TarReader.html#method-c-new","(io)","<p>Creates a new tar file reader on <code>io</code> which needs to respond to #pos, #eof?, #read, #getc and #pos=\n"],["new","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-c-new","(header, io)","<p>Creates a new tar entry for <code>header</code> that will be read from <code>io</code>\n"],["new","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-c-new","(io)","<p>Creates a new TarWriter, yielding it if a block is given\n"],["new","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-c-new","(io)","<p>Creates a new TarWriter that will write to <code>io</code>\n"],["new","Gem::Package::TarWriter::BoundedStream","Gem/Package/TarWriter/BoundedStream.html#method-c-new","(io, limit)","<p>Wraps <code>io</code> and allows up to <code>limit</code> bytes to be written\n"],["new","Gem::Package::TarWriter::RestrictedStream","Gem/Package/TarWriter/RestrictedStream.html#method-c-new","(io)","<p>Creates a new RestrictedStream wrapping <code>io</code>\n"],["new","Gem::PackageTask","Gem/PackageTask.html#method-c-new","(gem_spec)","<p>Create a Gem Package task library.  Automatically define the gem if a block is given.  If no block is …\n"],["new","Gem::PathSupport","Gem/PathSupport.html#method-c-new","(env)","<p>Constructor. Takes a single argument which is to be treated like a hashtable, or defaults to ENV, the …\n"],["new","Gem::Platform","Gem/Platform.html#method-c-new","(arch)",""],["new","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-c-new","(name, version)",""],["new","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-c-new","(proxy=nil, dns=nil, headers={})","<p>Initialize a remote fetcher using the source URI and possible proxy information.\n<p><code>proxy</code>\n<p>[String]: explicit …\n"],["new","Gem::RemoteFetcher::FetchError","Gem/RemoteFetcher/FetchError.html#method-c-new","(message, uri)",""],["new","Gem::Request","Gem/Request.html#method-c-new","(uri, request_class, last_modified, pool)",""],["new","Gem::RequestSet","Gem/RequestSet.html#method-c-new","(*deps)","<p>Creates a RequestSet for a list of Gem::Dependency objects, <code>deps</code>.  You can then #resolve and #install …\n"],["new","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-c-new","(set, path)","<p>Creates a new GemDependencyAPI that will add dependencies to the Gem::RequestSet <code>set</code> based on the dependency …\n"],["new","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-c-new","(request_set, gem_deps_file, dependencies)",""],["new","Gem::RequestSet::Lockfile::ParseError","Gem/RequestSet/Lockfile/ParseError.html#method-c-new","(message, column, line, path)","<p>Raises a ParseError with the given <code>message</code> which was encountered at a <code>line</code> and <code>column</code> while parsing. …\n"],["new","Gem::RequestSet::Lockfile::Parser","Gem/RequestSet/Lockfile/Parser.html#method-c-new","(tokenizer, set, platforms, filename = nil)","<p>Parses lockfiles\n"],["new","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-c-new","(input, filename = nil, line = 0, pos = 0)",""],["new","Gem::Requirement","Gem/Requirement.html#method-c-new","(*requirements)","<p>Constructs a requirement from <code>requirements</code>. Requirements can be Strings, Gem::Versions, or Arrays of …\n"],["new","Gem::Resolver","Gem/Resolver.html#method-c-new","(needed, set = nil)","<p>Create Resolver object which will resolve the tree starting with <code>needed</code> Dependency objects.\n<p><code>set</code> is an …\n"],["new","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-c-new","(dep_uri = \"https://index.rubygems.org/info/\")","<p>Creates a new APISet that will retrieve gems from <code>uri</code> using the RubyGems API URL <code>dep_uri</code> which is described …\n"],["new","Gem::Resolver::APISpecification","Gem/Resolver/APISpecification.html#method-c-new","(set, api_data)",""],["new","Gem::Resolver::APISpecification","Gem/Resolver/APISpecification.html#method-c-new","(set, api_data)","<p>Creates an APISpecification for the given <code>set</code> from the rubygems.org <code>api_data</code>.\n<p>See guides.rubygems.org/rubygems-org-api/#misc_methods …\n"],["new","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-c-new","(spec, request)","<p>Creates a new ActivationRequest that will activate <code>spec</code>.  The parent <code>request</code> is used to provide diagnostics …\n"],["new","Gem::Resolver::BestSet","Gem/Resolver/BestSet.html#method-c-new","(sources = Gem.sources)","<p>Creates a BestSet for the given <code>sources</code> or Gem::sources if none are specified.  <code>sources</code> must be a Gem::SourceList …\n"],["new","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-c-new","(*sets)","<p>Creates a new ComposedSet containing <code>sets</code>.  Use Gem::Resolver::compose_sets instead.\n"],["new","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-c-new","(dependency, activated, failed_dep=dependency)","<p>Creates a new resolver conflict when <code>dependency</code> is in conflict with an already <code>activated</code> specification. …\n"],["new","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-c-new","(dependency, requester)","<p>Creates a new DependencyRequest for <code>dependency</code> from <code>requester</code>. +requester may be nil if the request came …\n"],["new","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-c-new","(set, name, version, source, platform)","<p>An IndexSpecification is created from the index format described in ‘gem help generate_index`.\n<p>The <code>set</code> …\n"],["new","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-c-new","(domain)","<p>Creates a new InstallerSet that will look for gems in <code>domain</code>.\n"],["new","Gem::Resolver::LockSet","Gem/Resolver/LockSet.html#method-c-new","(sources)","<p>Creates a new LockSet from the given <code>sources</code>\n"],["new","Gem::Resolver::LockSpecification","Gem/Resolver/LockSpecification.html#method-c-new","(set, name, version, sources, platform)",""],["new","Gem::Resolver::Molinillo::CircularDependencyError","Gem/Resolver/Molinillo/CircularDependencyError.html#method-c-new","(vertices)","<p>Initializes a new error with the given circular vertices. @param [Array&lt;DependencyGraph::Vertex&gt;] …\n"],["new","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-c-new","()","<p>Initializes an empty dependency graph\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-c-new","(origin, destination, requirement)","<p>Initialize an action to add an edge to a dependency graph @param [String] origin the name of the origin …\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-c-new","(origin_name, destination_name, requirement)","<p>Initialize an action to add an edge to a dependency graph @param [String] origin_name the name of the …\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html#method-c-new","(name)","<p>Initialize an action to detach a vertex from a dependency graph @param [String] name the name of the …\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-c-new","()","<p>Initializes an empty log\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::Tag","Gem/Resolver/Molinillo/DependencyGraph/Tag.html#method-c-new","(tag)","<p>Initialize an action to tag a state of a dependency graph @param [Object] tag an opaque tag\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-c-new","(name, payload)","<p>Initializes a vertex with the given name and payload. @param [String] name see {#name} @param [Object] …\n"],["new","Gem::Resolver::Molinillo::NoSuchDependencyError","Gem/Resolver/Molinillo/NoSuchDependencyError.html#method-c-new","(dependency, required_by = [])","<p>Initializes a new error with the given missing dependency. @param [Object] dependency @see {#dependency} …\n"],["new","Gem::Resolver::Molinillo::Resolver","Gem/Resolver/Molinillo/Resolver.html#method-c-new","(specification_provider, resolver_ui)","<p>Initializes a new resolver. @param  [SpecificationProvider] specification_provider\n\n<pre>see {#specification_provider}</pre>\n"],["new","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-c-new","(specification_provider, resolver_ui, requested, base)","<p>Initializes a new resolution. @param [SpecificationProvider] specification_provider\n\n<pre>see {#specification_provider}</pre>\n"],["new","Gem::Resolver::Molinillo::VersionConflict","Gem/Resolver/Molinillo/VersionConflict.html#method-c-new","(conflicts, specification_provider)","<p>Initializes a new error with the given version conflicts. @param [{String =&gt; Resolution::Conflict …\n"],["new","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-c-new","()","<p>Creates a new RequirementList.\n"],["new","Gem::Resolver::SourceSet","Gem/Resolver/SourceSet.html#method-c-new","()","<p>Creates a SourceSet for the given <code>sources</code> or Gem::sources if none are specified.  <code>sources</code> must be a  …\n"],["new","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-c-new","(set, spec, source = nil)","<p>A SpecSpecification is created for a <code>set</code> for a Gem::Specification in <code>spec</code>.  The <code>source</code> is either where …\n"],["new","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-c-new","()","<p>Sets default instance variables for the specification.\n"],["new","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-c-new","()",""],["new","Gem::S3URISigner","Gem/S3URISigner.html#method-c-new","(uri)",""],["new","Gem::S3URISigner::ConfigurationError","Gem/S3URISigner/ConfigurationError.html#method-c-new","(message)",""],["new","Gem::S3URISigner::InstanceProfileError","Gem/S3URISigner/InstanceProfileError.html#method-c-new","(message)",""],["new","Gem::Security::Policy","Gem/Security/Policy.html#method-c-new","(name, policy = {}, opt = {})","<p>Create a new Gem::Security::Policy object with the given mode and options.\n"],["new","Gem::Security::Signer","Gem/Security/Signer.html#method-c-new","(key, cert_chain, passphrase = nil, options = {})","<p>Creates a new signer with an RSA <code>key</code> or path to a key, and a certificate <code>chain</code> containing X509 certificates, …\n"],["new","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-c-new","(dir, permissions = DEFAULT_PERMISSIONS)","<p>Creates a new TrustDir using <code>dir</code> where the directory and file permissions will be checked according to …\n"],["new","Gem::SilentUI","Gem/SilentUI.html#method-c-new","()","<p>The SilentUI has no arguments as it does not use any stream.\n"],["new","Gem::Source","Gem/Source.html#method-c-new","(uri)","<p>Creates a new Source which will use the index located at <code>uri</code>.\n"],["new","Gem::Source::Git","Gem/Source/Git.html#method-c-new","(name, repository, reference, submodules = false)","<p>Creates a new git gem source for a gems from loaded from <code>repository</code> at the given <code>reference</code>.  The <code>name</code> …\n"],["new","Gem::Source::Lock","Gem/Source/Lock.html#method-c-new","(source)","<p>Creates a new Lock source that wraps <code>source</code> and moves it earlier in the sort list.\n"],["new","Gem::Source::SpecificFile","Gem/Source/SpecificFile.html#method-c-new","(file)","<p>Creates a new SpecificFile for the gem in <code>file</code>\n"],["new","Gem::Source::Vendor","Gem/Source/Vendor.html#method-c-new","(path)","<p>Creates a new Vendor source for a gem that was unpacked at <code>path</code>.\n"],["new","Gem::SourceFetchProblem","Gem/SourceFetchProblem.html#method-c-new","(source, error)","<p>Creates a new SourceFetchProblem for the given <code>source</code> and <code>error</code>.\n"],["new","Gem::SourceList","Gem/SourceList.html#method-c-new","()","<p>Creates a new SourceList\n"],["new","Gem::SpecFetcher","Gem/SpecFetcher.html#method-c-new","(sources = nil)","<p>Creates a new SpecFetcher.  Ordinarily you want to use the default fetcher from Gem::SpecFetcher::fetcher …\n"],["new","Gem::SpecificGemNotFoundException","Gem/SpecificGemNotFoundException.html#method-c-new","(name, version, errors=nil)","<p>Creates a new SpecificGemNotFoundException for a gem with the given <code>name</code> and <code>version</code>.  Any <code>errors</code> encountered …\n"],["new","Gem::Specification","Gem/Specification.html#method-c-new","(name = nil, version = nil)","<p>Specification constructor. Assigns the default values to the attributes and yields itself for further …\n"],["new","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-c-new","(specification)",""],["new","Gem::StreamUI","Gem/StreamUI.html#method-c-new","(in_stream, out_stream, err_stream=STDERR, usetty=true)","<p>Creates a new StreamUI wrapping <code>in_stream</code> for user input, <code>out_stream</code> for standard output, <code>err_stream</code> …\n"],["new","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-c-new","(out_stream, *args)","<p>The silent download reporter ignores all arguments\n"],["new","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = nil)","<p>Creates a silent progress reporter that ignores all input arguments.\n"],["new","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = \"complete\")","<p>Creates a new progress reporter that will write to <code>out_stream</code> for <code>size</code> items.  Shows the given <code>initial_message</code> …\n"],["new","Gem::StreamUI::ThreadedDownloadReporter","Gem/StreamUI/ThreadedDownloadReporter.html#method-c-new","(out_stream, *args)","<p>Creates a new threaded download reporter that will display on <code>out_stream</code>.  The other arguments are ignored. …\n"],["new","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = \"complete\")","<p>Creates a new progress reporter that will write to <code>out_stream</code> for <code>size</code> items.  Shows the given <code>initial_message</code> …\n"],["new","Gem::SystemExitException","Gem/SystemExitException.html#method-c-new","(exit_code)","<p>Creates a new SystemExitException with the given <code>exit_code</code>\n"],["new","Gem::Uninstaller","Gem/Uninstaller.html#method-c-new","(gem, options = {})","<p>Constructs an uninstaller that will uninstall <code>gem</code>\n"],["new","Gem::UnknownCommandError","Gem/UnknownCommandError.html#method-c-new","(unknown_command)",""],["new","Gem::UnknownCommandSpellChecker","Gem/UnknownCommandSpellChecker.html#method-c-new","(error)",""],["new","Gem::UnsatisfiableDependencyError","Gem/UnsatisfiableDependencyError.html#method-c-new","(dep, platform_mismatch=nil)","<p>Creates a new UnsatisfiableDependencyError for the unsatisfiable Gem::Resolver::DependencyRequest <code>dep</code> …\n"],["new","Gem::Uri","Gem/Uri.html#method-c-new","(source_uri)",""],["new","Gem::UriFormatter","Gem/UriFormatter.html#method-c-new","(uri)","<p>Creates a new URI formatter for <code>uri</code>.\n"],["new","Gem::Version","Gem/Version.html#method-c-new","(version)","<p>Constructs a Version from the <code>version</code> string.  A version string is a series of digits or ASCII letters …\n"],["new","Gem::WebauthnVerificationError","Gem/WebauthnVerificationError.html#method-c-new","(message)",""],["new_vertex_set","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-new_vertex_set","()",""],["next5","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-next5","()","<p>Returns the oldest five entries from the list.\n"],["next_token","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-next_token","()",""],["nil_versions_are_discouraged!","Gem::Version","Gem/Version.html#method-c-nil_versions_are_discouraged-21","()",""],["noecho","Gem::MockGemUi::TTY","Gem/MockGemUi/TTY.html#method-i-noecho","()",""],["non_nil_attributes","Gem::Specification","Gem/Specification.html#method-c-non_nil_attributes","()","<p>Specification attributes that must be non-nil\n"],["none?","Gem::Requirement","Gem/Requirement.html#method-i-none-3F","()","<p>true if this gem has no requirements.\n"],["normalize","Gem::Specification","Gem/Specification.html#method-i-normalize","()","<p>Normalize the list of files so that:\n<p>All file lists have redundancies removed.\n<p>Files referenced in the …\n"],["normalize","Gem::UriFormatter","Gem/UriFormatter.html#method-i-normalize","()","<p>Normalize the URI by adding “http://” if it is missing.\n"],["normalize_path","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-normalize_path","(path)",""],["normalize_path","Gem::Package","Gem/Package.html#method-i-normalize_path","(pathname)",""],["normalize_yaml_input","Gem::Specification","Gem/Specification.html#method-c-normalize_yaml_input","(input)","<p>Make sure the YAML specification is properly formatted with dashes\n"],["normalized_linux_version","Gem::Platform","Gem/Platform.html#method-i-normalized_linux_version","()",""],["null","Gem::NameTuple","Gem/NameTuple.html#method-c-null","()","<p>A null NameTuple, ie name=nil, version=0\n"],["oauth_basic?","Gem::Uri","Gem/Uri.html#method-i-oauth_basic-3F","()",""],["oct","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-oct","(num, len)",""],["oct_or_256based","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-oct_or_256based","(str)",""],["ok?","Gem::DependencyList","Gem/DependencyList.html#method-i-ok-3F","()","<p>Are all the dependencies in the list satisfied?\n"],["ok_to_remove?","Gem::DependencyList","Gem/DependencyList.html#method-i-ok_to_remove-3F","(full_name, check_dev=true)","<p>It is ok to remove a gemspec from the dependency list?\n<p>If removing the gemspec creates breaks a currently …\n"],["oldest_supported_version","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-oldest_supported_version","()","<p>Oldest version we support downgrading to. This is the version that originally ships with the first patch …\n"],["on","Gem::OptionParser","Gem/OptionParser.html#method-i-on","(*opts, &block)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["on_head","Gem::OptionParser","Gem/OptionParser.html#method-i-on_head","(*opts, &block)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["on_tail","Gem::OptionParser","Gem/OptionParser.html#method-i-on_tail","(*opts, &block)","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["open","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-c-open","(header, io, &block)","<p>Creates a new tar entry for <code>header</code> that will be read from <code>io</code> If a block is given, the entry is yielded …\n"],["open_cert","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-open_cert","(certificate_file)",""],["open_editor","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-open_editor","(path)",""],["open_file","Gem","Gem.html#method-c-open_file","(path, flags, &block)","<p>Open a file with given flags, and on Windows protect access with flock\n"],["open_gem","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-open_gem","(name)",""],["open_private_key","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-open_private_key","(key_file)",""],["operating_system_defaults","Gem","Gem.html#method-c-operating_system_defaults","()","<p>Default options for gem commands for Ruby packagers.\n<p>The options here should be structured as an array …\n"],["option_is_deprecated?","Gem::Command","Gem/Command.html#method-i-option_is_deprecated-3F","(option)",""],["options","Gem::OptionParser::Arguable","Gem/OptionParser/Arguable.html#method-i-options","()","<p>Actual Gem::OptionParser object, automatically created if nonexistent.\n<p>If called with a block, yields …\n"],["options=","Gem::OptionParser::Arguable","Gem/OptionParser/Arguable.html#method-i-options-3D","(opt)","<p>Sets Gem::OptionParser object, when <code>opt</code> is <code>false</code> or <code>nil</code>, methods Gem::OptionParser::Arguable#options …\n"],["order","Gem::OptionParser","Gem/OptionParser.html#method-i-order","(*argv, into: nil, &nonopt)","<p>Parses command line arguments <code>argv</code> in order. When a block is given, each non-option argument is yielded. …\n"],["order!","Gem::OptionParser","Gem/OptionParser.html#method-i-order-21","(argv = default_argv, into: nil, &nonopt)","<p>Same as #order, but removes switches destructively. Non-option arguments remain in <code>argv</code>.\n"],["order!","Gem::OptionParser::Arguable","Gem/OptionParser/Arguable.html#method-i-order-21","(&blk)","<p>Parses <code>self</code> destructively in order and returns <code>self</code> containing the rest arguments left unparsed.\n"],["otp","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-otp","()","<p>The OTP code from the command options or from the user’s configuration.\n"],["outdated","Gem::Specification","Gem/Specification.html#method-c-outdated","()","<p>Return a list of all outdated local gem names.  This method is HEAVY as it must go fetch specifications …\n"],["outdated_and_latest_version","Gem::Specification","Gem/Specification.html#method-c-outdated_and_latest_version","()","<p>Enumerates the outdated local gems yielding the local specification and the latest remote version.\n<p>This …\n"],["output","Gem::MockGemUi","Gem/MockGemUi.html#method-i-output","()",""],["output","Gem::Resolver","Gem/Resolver.html#method-i-output","()",""],["output","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-output","()","<p>The {IO} object that should be used to print output. ‘STDOUT`, by default.\n<p>@return [IO]\n"],["output_query_results","Gem::QueryUtils","Gem/QueryUtils.html#method-i-output_query_results","(spec_tuples)",""],["output_versions","Gem::QueryUtils","Gem/QueryUtils.html#method-i-output_versions","(output, versions)",""],["paranoid","Gem::Indexer","Gem/Indexer.html#method-i-paranoid","(path, extension)","<p>Ensure <code>path</code> and path with <code>extension</code> are identical.\n"],["parent","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-parent","()","<p>Return the ActivationRequest that contained the dependency that we were activated for.\n"],["parent_of","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-parent_of","(requirement)","<p>@param [Object] requirement @return [Object] the requirement that led to ‘requirement` being added\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">to</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parse","Gem::OptionParser","Gem/OptionParser.html#method-i-parse","(*argv, into: nil)","<p>Parses command line arguments <code>argv</code> in order when environment variable POSIXLY_CORRECT is set, and in …\n"],["parse","Gem::OptionParser::Switch::NoArgument","Gem/OptionParser/Switch/NoArgument.html#method-i-parse","(arg, argv)","<p>Raises an exception if any arguments given.\n"],["parse","Gem::OptionParser::Switch::OptionalArgument","Gem/OptionParser/Switch/OptionalArgument.html#method-i-parse","(arg, argv, &error)","<p>Parses argument if given, or uses default value.\n"],["parse","Gem::OptionParser::Switch::PlacedArgument","Gem/OptionParser/Switch/PlacedArgument.html#method-i-parse","(arg, argv, &error)","<p>Returns nil if argument is not present or begins with ‘-’ and is not ‘-’.\n"],["parse","Gem::OptionParser::Switch::RequiredArgument","Gem/OptionParser/Switch/RequiredArgument.html#method-i-parse","(arg, argv)","<p>Raises an exception if argument is not present.\n"],["parse","Gem::RequestSet::Lockfile::Parser","Gem/RequestSet/Lockfile/Parser.html#method-i-parse","()",""],["parse","Gem::Requirement","Gem/Requirement.html#method-c-parse","(obj)","<p>Parse <code>obj</code>, returning an <code>[op, version]</code> pair. <code>obj</code> can be a String or a Gem::Version.\n<p>If <code>obj</code> is a String …\n"],["parse","Gem::Resolver::APISet::GemParser","Gem/Resolver/APISet/GemParser.html#method-i-parse","(line)",""],["parse","Gem::Uri","Gem/Uri.html#method-c-parse","(uri)","<p>Parses uri, returning the original uri if it’s invalid\n"],["parse","Gem::Uri","Gem/Uri.html#method-i-parse","(uri)",""],["parse!","Gem::OptionParser","Gem/OptionParser.html#method-i-parse-21","(argv = default_argv, into: nil)","<p>Same as #parse, but removes switches destructively. Non-option arguments remain in <code>argv</code>.\n"],["parse!","Gem::OptionParser::Arguable","Gem/OptionParser/Arguable.html#method-i-parse-21","()","<p>Parses <code>self</code> destructively and returns <code>self</code> containing the rest arguments left unparsed.\n"],["parse!","Gem::Uri","Gem/Uri.html#method-c-parse-21","(uri)","<p>Parses uri, raising if it’s invalid\n"],["parse!","Gem::Uri","Gem/Uri.html#method-i-parse-21","(uri)",""],["parse_dependency","Gem::Resolver::APISet::GemParser","Gem/Resolver/APISet/GemParser.html#method-i-parse_dependency","(string)",""],["parse_gem","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-i-parse_gem","(string)",""],["parse_otp_from_uri","Gem::GemcutterUtilities::WebauthnListener","Gem/GemcutterUtilities/WebauthnListener.html#method-i-parse_otp_from_uri","(uri)",""],["parser","Gem::Command","Gem/Command.html#method-i-parser","()","<p>Create on demand parser.\n"],["password?","Gem::Uri","Gem/Uri.html#method-i-password-3F","()",""],["path","Gem","Gem.html#method-c-path","()",""],["path","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-path","(from, to)","<p>Returns the path between two vertices @raise [ArgumentError] if there is no path between the vertices …\n"],["path_ok?","Gem::Uninstaller","Gem/Uninstaller.html#method-i-path_ok-3F","(gem_dir, spec)","<p>Is <code>spec</code> in <code>gem_dir</code>?\n"],["path_separator","Gem","Gem.html#method-c-path_separator","()","<p>How String Gem paths should be split.  Overridable for esoteric platforms.\n"],["path_to?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-path_to-3F","(other)","<p>Is there a path from ‘self` to `other` following edges in the dependency graph? @return whether there …\n"],["paths","Gem","Gem.html#method-c-paths","()","<p>Retrieve the PathSupport object that RubyGems uses to lookup files.\n"],["paths=","Gem","Gem.html#method-c-paths-3D","(env)","<p>Initialize the filesystem paths to use from <code>env</code>. <code>env</code> is a hash-like object (typically ENV) that is queried …\n"],["pattern","Gem::OptionParser::Switch","Gem/OptionParser/Switch.html#method-c-pattern","()",""],["pattern","Gem::OptionParser::Switch::NoArgument","Gem/OptionParser/Switch/NoArgument.html#method-c-pattern","()",""],["peek","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-peek","()",""],["permute","Gem::OptionParser","Gem/OptionParser.html#method-i-permute","(*argv, into: nil)","<p>Parses command line arguments <code>argv</code> in permutation mode and returns list of non-option arguments. When …\n"],["permute!","Gem::OptionParser","Gem/OptionParser.html#method-i-permute-21","(argv = default_argv, into: nil)","<p>Same as #permute, but removes switches destructively. Non-option arguments remain in <code>argv</code>.\n"],["permute!","Gem::OptionParser::Arguable","Gem/OptionParser/Arguable.html#method-i-permute-21","()","<p>Parses <code>self</code> destructively in permutation mode and returns <code>self</code> containing the rest arguments left unparsed. …\n"],["pick_best!","Gem::AvailableSet","Gem/AvailableSet.html#method-i-pick_best-21","()",""],["pin_gem_source","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-pin_gem_source","(name, type = :default, source = nil)","<p>Pins the gem <code>name</code> to the given <code>source</code>.  Adding a gem with the same name from a different <code>source</code> will …\n"],["platform","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-platform","()","<p>Platform of the gem\n"],["platform","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-platform","(*platforms)","<p>Block form for restricting gems to a set of platforms.\n<p>The gem dependencies platform is different from …\n"],["platform","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-platform","()","<p>The platform of this activation request’s specification\n"],["platform","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-platform","()","<p>The platform this gem works on.\n"],["platform","Gem::Specification","Gem/Specification.html#method-i-platform","()","<p>The platform this gem runs on.  See Gem::Platform for details.\n"],["platform=","Gem::Specification","Gem/Specification.html#method-i-platform-3D","(platform)","<p>The platform this gem runs on.\n<p>This is usually Gem::Platform::RUBY or Gem::Platform::CURRENT.\n<p>Most gems …\n"],["platform_defaults","Gem","Gem.html#method-c-platform_defaults","()","<p>Default options for gem commands for Ruby implementers.\n<p>The options here should be structured as an array …\n"],["platform_specific_rustc_args","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-platform_specific_rustc_args","(dest_dir, flags = [])",""],["platforms","Gem","Gem.html#method-c-platforms","()","<p>Array of platforms this RubyGems supports.\n"],["platforms","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-platforms","(*platforms)","<p>Block form for restricting gems to a particular set of platforms.  See #platform.\n"],["platforms=","Gem","Gem.html#method-c-platforms-3D","(platforms)","<p>Set array of platforms this RubyGems supports (primarily for testing).\n"],["plugin_suffix_pattern","Gem","Gem.html#method-c-plugin_suffix_pattern","()","<p>Glob pattern for require-able plugin suffixes.\n"],["plugin_suffix_regexp","Gem","Gem.html#method-c-plugin_suffix_regexp","()","<p>Regexp for require-able plugin suffixes.\n"],["plugindir","Gem","Gem.html#method-c-plugindir","(install_dir=Gem.dir)","<p>The path were rubygems plugins are to be installed.\n"],["plugins","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-plugins","()","<p>Returns the list of plugins in this spec.\n"],["poll_for_otp","Gem::GemcutterUtilities::WebauthnPoller","Gem/GemcutterUtilities/WebauthnPoller.html#method-i-poll_for_otp","(webauthn_url, credentials)",""],["poll_thread","Gem::GemcutterUtilities::WebauthnPoller","Gem/GemcutterUtilities/WebauthnPoller.html#method-c-poll_thread","(options, host, webauthn_url, credentials)",""],["pools_for","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-pools_for","(proxy)",""],["pop!","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-pop-21","(graph)","<p>Pops the most recent action from the log and undoes the action @param [DependencyGraph] graph @return …\n"],["pop_possibility_state","Gem::Resolver::Molinillo::DependencyState","Gem/Resolver/Molinillo/DependencyState.html#method-i-pop_possibility_state","()","<p>Removes a possibility from ‘self` @return [PossibilityState] a state with a single possibility,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">possibility</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["popen","Gem::Util","Gem/Util.html#method-c-popen","(*command)","<p>This calls IO.popen and reads the result\n"],["pos","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-pos","()","<p>The position in the tar entry\n"],["pos=","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-pos-3D","(new_pos)","<p>Seek to the position in the tar entry\n"],["possibilities","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-possibilities","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#possibilities)\n"],["possibilities_for_requirement","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-possibilities_for_requirement","(requirement, activated = self.activated)","<p>Checks a proposed requirement with any existing locked requirement before generating an array of possibilities …\n"],["possibility","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-possibility","()","<p>@return [Object] the current possibility that the resolution is trying\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">activate</span>\n</pre>\n"],["possibility","Gem::Resolver::Molinillo::Resolver::Resolution::Conflict","Gem/Resolver/Molinillo/Resolver/Resolution/Conflict.html#method-i-possibility","()","<p>@return [Object] a spec that was unable to be activated due to a conflict\n"],["possibility_satisfies_requirements?","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-possibility_satisfies_requirements-3F","(possibility, requirements)","<p>@param [Object] possibility a single possibility @param [Array] requirements an array of requirements …\n"],["post_build","Gem","Gem.html#method-c-post_build","(&hook)","<p>Adds a post-build hook that will be passed an Gem::Installer instance when Gem::Installer#install is …\n"],["post_install","Gem","Gem.html#method-c-post_install","(&hook)","<p>Adds a post-install hook that will be passed an Gem::Installer instance when Gem::Installer#install is …\n"],["post_reset","Gem","Gem.html#method-c-post_reset","(&hook)","<p>Adds a hook that will get run after Gem::Specification.reset is run.\n"],["post_uninstall","Gem","Gem.html#method-c-post_uninstall","(&hook)","<p>Adds a post-uninstall hook that will be passed a Gem::Uninstaller instance and the spec that was uninstalled …\n"],["pre_install","Gem","Gem.html#method-c-pre_install","(&hook)","<p>Adds a pre-install hook that will be passed an Gem::Installer instance when Gem::Installer#install is …\n"],["pre_install_checks","Gem::Installer","Gem/Installer.html#method-i-pre_install_checks","()","<p>Performs various checks before installing the gem such as the install repository is writable and its …\n"],["pre_reset","Gem","Gem.html#method-c-pre_reset","(&hook)","<p>Adds a hook that will get run before Gem::Specification.reset is run.\n"],["pre_uninstall","Gem","Gem.html#method-c-pre_uninstall","(&hook)","<p>Adds a pre-uninstall hook that will be passed an Gem::Uninstaller instance and the spec that will be …\n"],["predecessors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-predecessors","()","<p>@return [Array&lt;Vertex&gt;] the vertices of {#graph} that have an edge with\n\n<pre>`self` as their {Edge#destination}</pre>\n"],["prefetch","Gem::AvailableSet","Gem/AvailableSet.html#method-i-prefetch","(reqs)",""],["prefetch","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-i-prefetch","(reqs)","<p>A hint run by the resolver to allow the Set to fetch data for DependencyRequests <code>reqs</code>.\n"],["prefetch","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-prefetch","(reqs)","<p>Prefetches <code>reqs</code> in all sets.\n"],["prefetch","Gem::Resolver::GitSet","Gem/Resolver/GitSet.html#method-i-prefetch","(reqs)","<p>Prefetches specifications from the git repositories in this set.\n"],["prefetch","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-prefetch","(reqs)",""],["prefetch","Gem::Resolver::Set","Gem/Resolver/Set.html#method-i-prefetch","(reqs)","<p>The #prefetch method may be overridden, but this is not necessary.  This default implementation does …\n"],["prefix","Gem","Gem.html#method-c-prefix","()","<p>The directory prefix this RubyGems was installed at. If your prefix is in a standard location (ie, rubygems …\n"],["preparing_gem_layout_for","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-preparing_gem_layout_for","(version)",""],["prepend","Gem::List","Gem/List.html#method-i-prepend","(value)",""],["prepend","Gem::List","Gem/List.html#method-c-prepend","(list, value)",""],["prepend","Gem::OptionParser::List","Gem/OptionParser/List.html#method-i-prepend","(*args)","<p>Inserts <code>switch</code> at the head of the list, and associates short, long and negated long options. Arguments …\n"],["prepend_destdir_if_present","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-prepend_destdir_if_present","(path)",""],["prepended","CoreExtensions::TCPSocketExt","CoreExtensions/TCPSocketExt.html#method-c-prepended","(base)",""],["prerelease","Gem::QueryUtils","Gem/QueryUtils.html#method-i-prerelease","()",""],["prerelease=","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-prerelease-3D","(allow_prerelease)","<p>When <code>allow_prerelease</code> is set to <code>true</code> prereleases gems are allowed to match dependencies.\n"],["prerelease=","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-prerelease-3D","(allow_prerelease)",""],["prerelease?","Gem::Dependency","Gem/Dependency.html#method-i-prerelease-3F","()","<p>Does this dependency require a prerelease?\n"],["prerelease?","Gem::NameTuple","Gem/NameTuple.html#method-i-prerelease-3F","()","<p>Indicate if this NameTuple is for a prerelease version.\n"],["prerelease?","Gem::Requirement","Gem/Requirement.html#method-i-prerelease-3F","()","<p>A requirement is a prerelease if any of the versions inside of it are prereleases\n"],["prerelease?","Gem::Version","Gem/Version.html#method-i-prerelease-3F","()","<p>A version is considered a prerelease if it contains a letter.\n"],["pretty_host","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-pretty_host","(host)",""],["print","Gem::SilentUI::NullIO","Gem/SilentUI/NullIO.html#method-i-print","(*args)",""],["print_command","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-print_command","()",""],["prioritize!","Gem::BundlerVersionFinder","Gem/BundlerVersionFinder.html#method-c-prioritize-21","(specs)",""],["prioritizes_bundler?","Gem::Dependency","Gem/Dependency.html#method-i-prioritizes_bundler-3F","()",""],["process_args","Gem::CommandManager","Gem/CommandManager.html#method-i-process_args","(args, build_args=nil)",""],["process_topmost_state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-process_topmost_state","()","<p>Processes the topmost available {RequirementState} on the stack @return [void]\n"],["program_name","Gem::OptionParser","Gem/OptionParser.html#method-i-program_name","()","<p>Program name to be emitted in error message and default banner, defaults to $0.\n"],["progress_rate","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-progress_rate","()","<p>How often progress should be conveyed to the user via {#indicate_progress}, in seconds. A third of a …\n"],["progress_reporter","Gem::StreamUI","Gem/StreamUI.html#method-i-progress_reporter","(*args)","<p>Return a progress reporter object chosen from the current verbosity.\n"],["proxy_for","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-proxy_for","(proxy, uri)",""],["proxy_uri","Gem::Request","Gem/Request.html#method-i-proxy_uri","()",""],["push_action","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-push_action","(graph, action)","<p>Adds the given action to the log, running the action @param [DependencyGraph] graph @param [Action] action …\n"],["push_initial_state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-push_initial_state","()","<p>Creates and pushes the initial state for the resolution, based upon the {#requested} dependencies @return …\n"],["push_state_for_requirements","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-push_state_for_requirements","(new_requirements, requires_sort = true, new_activated = activated)","<p>Pushes a new {DependencyState} that encapsulates both existing and new requirements @param [Array] new_requirements …\n"],["puts","Gem::SilentUI::NullIO","Gem/SilentUI/NullIO.html#method-i-puts","(*args)",""],["raise_error_unless_state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-raise_error_unless_state","(conflicts)","<p>Raises a VersionConflict error, or any underlying error, if there is no current state @return [void] …\n"],["raw_spec","Gem::Package","Gem/Package.html#method-c-raw_spec","(path, security_policy = nil)","<p>Extracts the Gem::Specification and raw metadata from the .gem file at <code>path</code>.\n"],["rb_config","Gem::Installer","Gem/Installer.html#method-i-rb_config","()",""],["rb_config_env","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-rb_config_env","()",""],["rdoc_options","Gem::Specification","Gem/Specification.html#method-i-rdoc_options","()","<p>Specifies the rdoc options to be used when generating API documentation.\n<p>Usage:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">rdoc_options</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-string\">&#39;--title&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rdoc_options=","Gem::Specification","Gem/Specification.html#method-i-rdoc_options-3D","(options)","<p>Sets rdoc_options to <code>value</code>, ensuring it is an array.\n"],["re_sign","Gem::Security","Gem/Security.html#method-c-re_sign","(expired_certificate, private_key, age = ONE_YEAR, extensions = EXTENSIONS)","<p>Signs <code>expired_certificate</code> with <code>private_key</code> if the keys match and the expired certificate was self-signed. …\n"],["re_sign_cert","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-re_sign_cert","(cert, cert_path, private_key)",""],["re_sign_cert","Gem::Security::Signer","Gem/Security/Signer.html#method-c-re_sign_cert","(expired_cert, expired_cert_path, private_key)","<p>Attempts to re-sign an expired cert with a given private key\n"],["read","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-read","(len = nil)","<p>Reads <code>len</code> bytes from the tar file entry, or the rest of the entry if nil\n"],["read_binary","Gem","Gem.html#method-c-read_binary","(path)","<p>Safely read a file in binary mode on all platforms.\n"],["read_checksums","Gem::Package","Gem/Package.html#method-i-read_checksums","(gem)","<p>Reads and loads checksums.yaml.gz from the tar file <code>gem</code>\n"],["readpartial","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-readpartial","(maxlen = nil, outbuf = \"\".b)",""],["really_verbose","Gem::ConfigFile","Gem/ConfigFile.html#method-i-really_verbose","()","<p>Really verbose mode gives you extra output.\n"],["reason","Gem::OptionParser::ParseError","Gem/OptionParser/ParseError.html#method-i-reason","()","<p>Returns error reason. Override this for I18N.\n"],["reason_phrase","Gem::GemcutterUtilities::WebauthnListener::BadRequestResponse","Gem/GemcutterUtilities/WebauthnListener/BadRequestResponse.html#method-i-reason_phrase","()",""],["reason_phrase","Gem::GemcutterUtilities::WebauthnListener::MethodNotAllowedResponse","Gem/GemcutterUtilities/WebauthnListener/MethodNotAllowedResponse.html#method-i-reason_phrase","()",""],["reason_phrase","Gem::GemcutterUtilities::WebauthnListener::NoContentResponse","Gem/GemcutterUtilities/WebauthnListener/NoContentResponse.html#method-i-reason_phrase","()",""],["reason_phrase","Gem::GemcutterUtilities::WebauthnListener::NotFoundResponse","Gem/GemcutterUtilities/WebauthnListener/NotFoundResponse.html#method-i-reason_phrase","()",""],["reason_phrase","Gem::GemcutterUtilities::WebauthnListener::OkResponse","Gem/GemcutterUtilities/WebauthnListener/OkResponse.html#method-i-reason_phrase","()",""],["reason_phrase","Gem::GemcutterUtilities::WebauthnListener::Response","Gem/GemcutterUtilities/WebauthnListener/Response.html#method-i-reason_phrase","()",""],["record_depth","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-record_depth","(stack)",""],["record_requirements","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-record_requirements","(reqs)",""],["recover","Gem::OptionParser::ParseError","Gem/OptionParser/ParseError.html#method-i-recover","(argv)","<p>Pushes back erred argument(s) to <code>argv</code>.\n"],["recursive_predecessors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-recursive_predecessors","()","<p>@return [Set&lt;Vertex&gt;] the vertices of {#graph} where ‘self` is a\n\n<pre>{#descendent?}</pre>\n"],["recursive_successors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-recursive_successors","()","<p>@return [Set&lt;Vertex&gt;] the vertices of {#graph} where ‘self` is an\n\n<pre>{#ancestor?}</pre>\n"],["redact","Gem::Uri","Gem/Uri.html#method-c-redact","(uri)","<p>Parses and redacts uri\n"],["redact_credentials_from","Gem::Uri","Gem/Uri.html#method-i-redact_credentials_from","(text)",""],["redacted","Gem::Uri","Gem/Uri.html#method-i-redacted","()",""],["refresh","Gem","Gem.html#method-c-refresh","()","<p>Refresh available gems from disk.\n"],["regenerate_binstubs","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-regenerate_binstubs","(bindir)",""],["regenerate_plugins","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-regenerate_plugins","(bindir)",""],["regenerate_plugins","Gem::Uninstaller","Gem/Uninstaller.html#method-i-regenerate_plugins","()","<p>Regenerates plugin wrappers after removal.\n"],["regenerate_plugins_for","Gem::InstallerUninstallerUtils","Gem/InstallerUninstallerUtils.html#method-i-regenerate_plugins_for","(spec, plugins_dir)",""],["regexp","Gem::OptionParser::Completion","Gem/OptionParser/Completion.html#method-c-regexp","(key, icase)",""],["register","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-i-register","(target, obj)","<p>Noop this out so there are no anchors\n"],["register_command","Gem::CommandManager","Gem/CommandManager.html#method-i-register_command","(command, obj=false)","<p>Register the Symbol <code>command</code> as a gem command.\n"],["register_default_spec","Gem","Gem.html#method-c-register_default_spec","(spec)","<p>Register a Gem::Specification for default gem.\n<p>Two formats for the specification are supported:\n<p>MRI 2.0 …\n"],["reject","Gem::OptionParser","Gem/OptionParser.html#method-i-reject","(*args, &blk)","<p>Directs to reject specified class argument.\n<p><code>t</code> &mdash; Argument class specifier, any object including Class.\n\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reject</span>(<span class=\"ruby-identifier\">t</span>)\n</pre>\n"],["reject","Gem::OptionParser","Gem/OptionParser.html#method-c-reject","(*args, &blk)","<p>See #reject.\n"],["reject","Gem::OptionParser::List","Gem/OptionParser/List.html#method-i-reject","(t)","<p>See Gem::OptionParser.reject.\n"],["release","Gem::OptionParser","Gem/OptionParser.html#method-i-release","()","<p>Release code\n"],["release","Gem::Version","Gem/Version.html#method-i-release","()","<p>The release for this version (e.g. 1.2.0.a -&gt; 1.2.0). Non-prerelease versions return themselves.\n"],["remote=","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-remote-3D","(remote)","<p>Sets the remote network access for all composed sets.\n"],["remote?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-remote-3F","()","<p>Is remote fetching enabled?\n"],["remove","Gem::OptionParser","Gem/OptionParser.html#method-i-remove","()","<p>Removes the last List.\n"],["remove","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-remove","()","<p>Remove the oldest DependencyRequest from the list.\n"],["remove","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove","(spec)","<p>spec &mdash; the spec of the gem to be uninstalled\n\n"],["remove_all","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove_all","(list)","<p>Removes all gems in <code>list</code>.\n<p>NOTE: removes uninstalled gems from <code>list</code>.\n"],["remove_by_name","Gem::DependencyList","Gem/DependencyList.html#method-i-remove_by_name","(full_name)","<p>Removes the gemspec matching <code>full_name</code> from the dependency list\n"],["remove_executables","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove_executables","(spec)","<p>Removes installed executables and batch files (windows only) for <code>spec</code>.\n"],["remove_file_list","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-remove_file_list","(files, dir)",""],["remove_installed!","Gem::AvailableSet","Gem/AvailableSet.html#method-i-remove_installed-21","(dep)",""],["remove_old_bin_files","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-remove_old_bin_files","(bin_dir)",""],["remove_old_lib_files","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-remove_old_lib_files","(lib_dir)",""],["remove_old_man_files","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-remove_old_man_files","(old_man_dir)",""],["remove_option","Gem::Command","Gem/Command.html#method-i-remove_option","(name)","<p>Remove previously defined command-line argument <code>name</code>.\n"],["remove_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-remove_owners","(name, owners)",""],["remove_plugins_for","Gem::InstallerUninstallerUtils","Gem/InstallerUninstallerUtils.html#method-i-remove_plugins_for","(spec, plugins_dir)",""],["remove_spec","Gem::Specification","Gem/Specification.html#method-c-remove_spec","(spec)","<p>Removes <code>spec</code> from the known specs.\n"],["remove_specs_unsatisfied_by","Gem::DependencyList","Gem/DependencyList.html#method-i-remove_specs_unsatisfied_by","(dependencies)","<p>Remove everything in the DependencyList that matches but doesn’t satisfy items in <code>dependencies</code> (a …\n"],["removed_method_calls","Gem::Specification","Gem/Specification.html#method-i-removed_method_calls","()",""],["replace","Gem::SourceList","Gem/SourceList.html#method-i-replace","(other)","<p>Replaces this SourceList with the sources in <code>other</code>  See #<< for acceptable items in <code>other</code>.\n"],["request","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-request","(uri, request_class, last_modified = nil)","<p>Performs a Net::HTTP request of type <code>request_class</code> on <code>uri</code> returning a Net::HTTP response object.  request …\n"],["request_context","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-request_context","()","<p>Return a String indicating who caused this request to be added (only valid for implicit requests)\n"],["request_path","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-request_path","(current)","<p>Path of activations from the <code>current</code> list.\n"],["request_with_otp","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-request_with_otp","(method, uri, &block)",""],["requester","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-requester","()","<p>Return the Specification that listed the dependency\n"],["requests","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-requests","()",""],["require","Kernel","Kernel.html#method-i-require","(path)","<p>When RubyGems is required, Kernel#require is replaced with our own which is capable of loading gems on …\n"],["require_io_console","Gem::StreamUI","Gem/StreamUI.html#method-i-require_io_console","()",""],["require_nested_dependencies_for","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-require_nested_dependencies_for","(possibility_set)","<p>Requires the dependencies that the recently activated spec has @param [Object] possibility_set the PossibilitySet …\n"],["require_path","Gem::Specification","Gem/Specification.html#method-i-require_path","()","<p>Singular accessor for #require_paths\n"],["require_path=","Gem::Specification","Gem/Specification.html#method-i-require_path-3D","(path)","<p>Singular accessor for #require_paths\n"],["require_paths","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-require_paths","()","<p>Paths in the gem to add to <code>$LOAD_PATH</code> when this gem is activated.\n<p>See also #require_paths=\n<p>If you have …\n"],["require_paths=","Gem::Specification","Gem/Specification.html#method-i-require_paths-3D","(val)","<p>Paths in the gem to add to <code>$LOAD_PATH</code> when this gem is activated. If you have an extension you do not …\n"],["required_attribute?","Gem::Specification","Gem/Specification.html#method-c-required_attribute-3F","(name)","<p>Is <code>name</code> a required attribute?\n"],["required_attributes","Gem::Specification","Gem/Specification.html#method-c-required_attributes","()","<p>Required specification attributes\n"],["required_ruby_version","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-i-required_ruby_version","()","<p>The required_ruby_version constraint for this specification\n<p>A fallback is included because when generated, …\n"],["required_ruby_version","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-required_ruby_version","()","<p>The required_ruby_version constraint for this specification\n"],["required_ruby_version=","Gem::Specification","Gem/Specification.html#method-i-required_ruby_version-3D","(req)","<p>The version of Ruby required by this gem.  The ruby version can be specified to the patch-level:\n\n<pre>$ ruby ...</pre>\n"],["required_rubygems_version","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-i-required_rubygems_version","()","<p>The required_rubygems_version constraint for this specification\n<p>A fallback is included because the original …\n"],["required_rubygems_version","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-required_rubygems_version","()","<p>The required_rubygems_version constraint for this specification\n"],["required_rubygems_version=","Gem::Specification","Gem/Specification.html#method-i-required_rubygems_version-3D","(req)","<p>The RubyGems version required by this gem\n"],["requirement","Gem::Dependency","Gem/Dependency.html#method-i-requirement","()","<p>What does this dependency require?\n"],["requirement","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-requirement","()","<p>The version requirement for this dependency request\n"],["requirement","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-requirement","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#requirement)\n"],["requirement!","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-requirement-21","()",""],["requirement_for_existing_name","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-requirement_for_existing_name","(name)","<p>@param [String] name @return [Object] the requirement that led to a version of a possibility\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">with</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["requirement_satisfied_by?","Gem::Resolver","Gem/Resolver.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)",""],["requirement_satisfied_by?","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#requirement_satisfied_by?)\n"],["requirement_satisfied_by?","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)","<p>Determines whether the given ‘requirement` is satisfied by the given `spec`, in the context of the current …\n"],["requirement_tree_for","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-requirement_tree_for","(requirement)","<p>@param [Object] requirement @return [Array&lt;Object&gt;] the list of requirements that led to\n\n<pre class=\"ruby\"><span class=\"ruby-string\">`requirement`</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["requirement_trees","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-requirement_trees","()","<p>@return [Array&lt;Array&lt;Object&gt;&gt;] The different requirement\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">trees</span> <span class=\"ruby-identifier\">that</span> <span class=\"ruby-identifier\">led</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">every</span> <span class=\"ruby-identifier\">requirement</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["requirements","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-requirements","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#requirements)\n"],["requirements","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-requirements","()","<p>@return [Array&lt;Object&gt;] all of the requirements that required\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">this</span> <span class=\"ruby-identifier\">vertex</span>\n</pre>\n"],["requirements","Gem::Specification","Gem/Specification.html#method-i-requirements","()","<p>Lists the external (to RubyGems) requirements that must be met for this gem to work.  It’s simply …\n"],["requirements=","Gem::Specification","Gem/Specification.html#method-i-requirements-3D","(req)","<p>Set requirements to <code>req</code>, ensuring it is an array.\n"],["requirements_list","Gem::Dependency","Gem/Dependency.html#method-i-requirements_list","()",""],["reset","Gem::CommandManager","Gem/CommandManager.html#method-c-reset","()","<p>Reset the authoritative instance of the command manager.\n"],["reset","Gem::Request","Gem/Request.html#method-i-reset","(connection)","<p>Resets HTTP connection <code>connection</code>.\n"],["reset","Gem::Security","Gem/Security.html#method-c-reset","()","<p>Resets the trust directory for verifying gems.\n"],["reset","Gem::Specification","Gem/Specification.html#method-c-reset","()","<p>Reset the list of known specs, running pre and post reset hooks registered in Gem.\n"],["reset_nil_attributes_to_default","Gem::Specification","Gem/Specification.html#method-i-reset_nil_attributes_to_default","()","<p>Reset nil attributes to their default values to make the spec valid\n"],["resolve","Gem::RequestSet","Gem/RequestSet.html#method-i-resolve","(set = Gem::Resolver::BestSet.new)","<p>Resolve the requested dependencies and return an Array of Specification objects to be activated.\n"],["resolve","Gem::Resolver","Gem/Resolver.html#method-i-resolve","()","<p>Proceed with resolution! Returns an array of ActivationRequest objects.\n"],["resolve","Gem::Resolver::Molinillo::Resolver","Gem/Resolver/Molinillo/Resolver.html#method-i-resolve","(requested, base = DependencyGraph.new)","<p>Resolves the requested dependencies into a {DependencyGraph}, locking to the base dependency graph (if …\n"],["resolve","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-resolve","()","<p>Resolves the {#original_requested} dependencies into a full dependency\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">graph</span>\n</pre>\n<p>@raise [ResolverError] if …\n"],["resolve_activated_specs","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-resolve_activated_specs","()",""],["resolve_current","Gem::RequestSet","Gem/RequestSet.html#method-i-resolve_current","()","<p>Resolve the requested dependencies against the gems available via Gem.path and return an Array of Specification …\n"],["resolve_gem_name","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-resolve_gem_name","()",""],["respond_to_missing?","Gem::Uri","Gem/Uri.html#method-i-respond_to_missing-3F","(method_name, include_private = false)",""],["reverse_each","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-reverse_each","()","<p>@!visibility private Enumerates each action in the log in reverse order @yield [Action]\n"],["reversed_requirement_tree_index","Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails","Gem/Resolver/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-reversed_requirement_tree_index","()","<p>@return [Integer] index of state requirement in reversed requirement tree\n\n<pre>(the conflicting requirement ...</pre>\n"],["rewind","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-rewind","()","<p>NOTE: Do not call #rewind during #each\n"],["rewind","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-rewind","()","<p>Rewinds to the beginning of the tar file entry\n"],["rewind_to","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-rewind_to","(tag)","<p>Rewinds the graph to the state tagged as ‘tag` @param  [Object] tag the tag to rewind to @return [Void] …\n"],["rewind_to","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-rewind_to","(graph, tag)","<p>@macro action\n"],["ri_dir","Gem::Specification","Gem/Specification.html#method-i-ri_dir","()","<p>Returns the full path to this spec’s ri directory.\n"],["root_path?","Gem::GemcutterUtilities::WebauthnListener","Gem/GemcutterUtilities/WebauthnListener.html#method-i-root_path-3F","(uri)",""],["root_vertex_named","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-root_vertex_named","(name)","<p>@param [String] name @return [Vertex,nil] the root vertex with the given name\n"],["ruby","Gem","Gem.html#method-c-ruby","()","<p>The path to the running Ruby interpreter.\n"],["ruby","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-ruby","()",""],["ruby","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-ruby","(version, options = {})","<p>Restricts this gem dependencies file to the given ruby <code>version</code>.\n<p>You may also provide <code>engine:</code> and <code>engine_version:</code> …\n"],["ruby_api_version","Gem","Gem.html#method-c-ruby_api_version","()","<p>Returns a String containing the API compatibility version of Ruby\n"],["ruby_code","Gem::Specification","Gem/Specification.html#method-i-ruby_code","(obj)","<p>Return a string containing a Ruby code representation of the given object.\n"],["ruby_engine","Gem","Gem.html#method-c-ruby_engine","()",""],["ruby_install_name","Gem::Installer","Gem/Installer.html#method-i-ruby_install_name","()",""],["ruby_static?","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-ruby_static-3F","()",""],["ruby_version","Gem","Gem.html#method-c-ruby_version","()","<p>A Gem::Version for the currently running Ruby.\n"],["rubygems_api_key","Gem::ConfigFile","Gem/ConfigFile.html#method-i-rubygems_api_key","()","<p>Returns the RubyGems.org API key\n"],["rubygems_api_key=","Gem::ConfigFile","Gem/ConfigFile.html#method-i-rubygems_api_key-3D","(api_key)","<p>Sets the RubyGems.org API key to <code>api_key</code>\n"],["rubygems_api_request","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-rubygems_api_request","(method, path, host = nil, allowed_push_host = nil, scope: nil, credentials: {}, &block)","<p>Creates an RubyGems API to <code>host</code> and <code>path</code> with the given HTTP <code>method</code>.\n<p>If <code>allowed_push_host</code> metadata is …\n"],["rubygems_deprecate","Gem::Deprecate","Gem/Deprecate.html#method-i-rubygems_deprecate","(name, replacement=:none)","<p>Simple deprecation method that deprecates <code>name</code> by wrapping it up in a dummy method. It warns on each …\n"],["rubygems_deprecate","Gem::Deprecate","Gem/Deprecate.html#method-c-rubygems_deprecate","(name, replacement=:none)","<p>Simple deprecation method that deprecates <code>name</code> by wrapping it up in a dummy method. It warns on each …\n"],["rubygems_deprecate_command","Gem::Deprecate","Gem/Deprecate.html#method-i-rubygems_deprecate_command","(version = Gem::Deprecate.next_rubygems_major_version)","<p>Deprecation method to deprecate Rubygems commands\n"],["rubygems_deprecate_command","Gem::Deprecate","Gem/Deprecate.html#method-c-rubygems_deprecate_command","(version = Gem::Deprecate.next_rubygems_major_version)","<p>Deprecation method to deprecate Rubygems commands\n"],["rubygems_target_version","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-rubygems_target_version","()",""],["rubygems_version","Gem","Gem.html#method-c-rubygems_version","()","<p>A Gem::Version for the currently running RubyGems\n"],["run","Gem::CommandManager","Gem/CommandManager.html#method-i-run","(args, build_args=nil)","<p>Run the command specified by <code>args</code>.\n"],["run","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-run","(command, results, command_name = nil, dir = Dir.pwd, env = {})",""],["run","Gem::GemRunner","Gem/GemRunner.html#method-i-run","(args)","<p>Run the gem command with the following arguments.\n"],["runtime?","Gem::Dependency","Gem/Dependency.html#method-i-runtime-3F","()",""],["runtime_dependencies","Gem::Specification","Gem/Specification.html#method-i-runtime_dependencies","()","<p>List of dependencies that will automatically be activated at runtime.\n"],["rustc_dynamic_linker_flags","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-rustc_dynamic_linker_flags","(dest_dir, crate_name)",""],["rustc_lib_flags","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-rustc_lib_flags","(dest_dir)",""],["s3_uri_signer","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-s3_uri_signer","(uri)","<p>we have our own signing code here to avoid a dependency on the aws-sdk gem\n"],["safe_delete","Gem::Uninstaller","Gem/Uninstaller.html#method-i-safe_delete","(&block)",""],["safe_load","Gem::SafeYAML","Gem/SafeYAML.html#method-c-safe_load","(input)",""],["same_attributes?","Gem::Specification","Gem/Specification.html#method-i-same_attributes-3F","(spec)","<p>True if this gem has the same attributes as <code>other</code>.\n"],["sanitize","Gem::Specification","Gem/Specification.html#method-i-sanitize","()","<p>Sanitize the descriptive fields in the spec.  Sometimes non-ASCII characters will garble the site index. …\n"],["sanitize_string","Gem::Specification","Gem/Specification.html#method-i-sanitize_string","(string)","<p>Sanitize a single string.\n"],["satisfied_by?","Gem::Requirement","Gem/Requirement.html#method-i-satisfied_by-3F","(version)","<p>True if <code>version</code> satisfies this Requirement.\n"],["satisfies_requirement?","Gem::Specification","Gem/Specification.html#method-i-satisfies_requirement-3F","(dependency)","<p>Checks if this specification meets the requirement of <code>dependency</code>.\n"],["say","Gem::StreamUI","Gem/StreamUI.html#method-i-say","(statement=\"\")","<p>Display a statement.\n"],["say","Gem::UserInteraction","Gem/UserInteraction.html#method-i-say","(statement = \"\")","<p>Displays the given <code>statement</code> on the standard output (or equivalent).\n"],["search","Gem::OptionParser::List","Gem/OptionParser/List.html#method-i-search","(id, key)","<p>Searches <code>key</code> in <code>id</code> list. The result is returned or yielded if a block is given. If it isn’t found, …\n"],["search_const","Gem::OptionParser","Gem/OptionParser.html#method-c-search_const","(klass, name)",""],["search_for","Gem::Resolver","Gem/Resolver.html#method-i-search_for","(dependency)",""],["search_for","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-search_for","(dependency)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#search_for)\n"],["search_for","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-search_for","(dependency)","<p>Search for the specifications that match the given dependency. The specifications in the returned array …\n"],["search_for_dependency","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-search_for_dependency","(dependency, matching_platform=true)","<p>Find and fetch gem name tuples that match <code>dependency</code>.\n<p>If <code>matching_platform</code> is false, gems for all platforms …\n"],["seek","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-seek","(name)","<p>Seeks through the tar file until it finds the <code>entry</code> with <code>name</code> and yields it.  Rewinds the tar file to …\n"],["seek","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-seek","(offset, whence = IO::SEEK_SET)","<p>Seeks to <code>offset</code> bytes into the tar file entry <code>whence</code> can be IO::SEEK_SET, IO::SEEK_CUR, or IO::SEEK_END …\n"],["send","Gem::GemcutterUtilities::WebauthnListener::SocketResponder","Gem/GemcutterUtilities/WebauthnListener/SocketResponder.html#method-i-send","(response)",""],["send_gem","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-send_gem","(name)",""],["send_owner_request","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-send_owner_request","(method, name, owner)",""],["send_push_request","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-send_push_request","(name, args)",""],["separator","Gem::OptionParser","Gem/OptionParser.html#method-i-separator","(string)","<p>Add separator in summary.\n"],["set_api_key","Gem::ConfigFile","Gem/ConfigFile.html#method-i-set_api_key","(host, api_key)","<p>Set a specific host’s API key to <code>api_key</code>\n"],["set_api_key","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-set_api_key","(host, key)","<p>Returns true when the user has enabled multifactor authentication from <code>response</code> text and no otp provided …\n"],["set_backtrace","Gem::OptionParser::ParseError","Gem/OptionParser/ParseError.html#method-i-set_backtrace","(array)",""],["set_config_file_name","Gem::ConfigFile","Gem/ConfigFile.html#method-i-set_config_file_name","(args)",""],["set_gem_exec_install_paths","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-set_gem_exec_install_paths","()",""],["set_option","Gem::OptionParser::ParseError","Gem/OptionParser/ParseError.html#method-i-set_option","(opt, eq)",""],["set_payload","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-set_payload","(name, payload)","<p>Sets the payload of the vertex with the given name @param [String] name the name of the vertex @param …\n"],["set_payload","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-set_payload","(graph, name, payload)","<p>@macro action\n"],["setup_signer","Gem::Package","Gem/Package.html#method-i-setup_signer","(signer_options: {})","<p>Prepares the gem for signing and checksum generation.  If a signing certificate and key are not present …\n"],["shallow_eql?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-shallow_eql-3F","(other)","<p>@param  [Vertex] other the other vertex to compare to @return [Boolean] whether the two vertices are …\n"],["shebang","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-shebang","()",""],["shebang","Gem::Installer","Gem/Installer.html#method-i-shebang","(bin_file_name)","<p>Generates a #! line for <code>bin_file_name</code>‘s wrapper copying arguments if necessary.\n<p>If the :custom_shebang …\n"],["shift","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-shift","()",""],["show_files","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-show_files","(files)",""],["show_gems","Gem::QueryUtils","Gem/QueryUtils.html#method-i-show_gems","(name)","<p>Guts of original execute\n"],["show_help","Gem::Command","Gem/Command.html#method-i-show_help","()","<p>Display the help message for the command.\n"],["show_local_gems","Gem::QueryUtils","Gem/QueryUtils.html#method-i-show_local_gems","(name, req = Gem::Requirement.default)",""],["show_lookup_failure","Gem::Command","Gem/Command.html#method-i-show_lookup_failure","(gem_name, version, errors, suppress_suggestions = false, required_by = nil)","<p>Display to the user that a gem couldn’t be found and reasons why\n"],["show_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-show_owners","(name)",""],["show_prereleases?","Gem::QueryUtils","Gem/QueryUtils.html#method-i-show_prereleases-3F","()",""],["show_release_notes","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-show_release_notes","()",""],["show_remote_gems","Gem::QueryUtils","Gem/QueryUtils.html#method-i-show_remote_gems","(name)",""],["show_version","Gem::OptionParser","Gem/OptionParser.html#method-c-show_version","(*pkgs)",""],["sign","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-sign","(cert_file)",""],["sign","Gem::S3URISigner","Gem/S3URISigner.html#method-i-sign","(expiration = 86400)","<p>Signs S3 URI using query-params according to the reference: docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html …\n"],["sign","Gem::Security","Gem/Security.html#method-c-sign","(certificate, signing_key, signing_cert, age = ONE_YEAR, extensions = EXTENSIONS, serial = 1)","<p>Sign the public key from <code>certificate</code> with the <code>signing_key</code> and <code>signing_cert</code>, using the Gem::Security::DIGEST_NAME …\n"],["sign","Gem::Security::Signer","Gem/Security/Signer.html#method-i-sign","(data)","<p>Sign data with given digest algorithm\n"],["sign_in","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-sign_in","(sign_in_host = nil, scope: nil)","<p>Signs in with the RubyGems API at <code>sign_in_host</code> and sets the rubygems API key.\n"],["silent_system","Gem::Util","Gem/Util.html#method-c-silent_system","(*command)","<p>Invokes system, but silences all output.\n"],["size","Gem::AvailableSet","Gem/AvailableSet.html#method-i-size","()",""],["size","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-size","()",""],["size","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-size","()","<p>How many elements are in the list\n"],["skip","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-skip","(type)",""],["skip_during","Gem::Deprecate","Gem/Deprecate.html#method-i-skip_during","()","<p>Temporarily turn off warnings. Intended for tests only.\n"],["skip_during","Gem::Deprecate","Gem/Deprecate.html#method-c-skip_during","()","<p>Temporarily turn off warnings. Intended for tests only.\n"],["so_ext","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-so_ext","()","<p>We have to basically reimplement RbConfig::CONFIG here to support Ruby &lt; 2.5\n<p>@see github.com/ruby/ruby/blob/c87c027f18c005460746a74c07cd80ee355b16e4/configure.ac#L3185 …\n"],["solaris_platform?","Gem","Gem.html#method-c-solaris_platform-3F","()","<p>Is this platform Solaris?\n"],["sort_dependencies","Gem::Resolver","Gem/Resolver.html#method-i-sort_dependencies","(dependencies, activated, conflicts)",""],["sort_dependencies","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-sort_dependencies","(dependencies, activated, conflicts)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#sort_dependencies)\n"],["sort_dependencies","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-sort_dependencies","(dependencies, activated, conflicts)","<p>Sort dependencies so that the ones that are easiest to resolve are first. Easiest to resolve is (usually) …\n"],["sort_obj","Gem::Specification","Gem/Specification.html#method-i-sort_obj","()","<p>Returns an object you can use to sort specifications in #sort_by.\n"],["sort_priority","Gem::Platform","Gem/Platform.html#method-c-sort_priority","(platform)",""],["sorted","Gem::AvailableSet","Gem/AvailableSet.html#method-i-sorted","()",""],["sorted_requests","Gem::RequestSet","Gem/RequestSet.html#method-i-sorted_requests","()",""],["source","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-source","(url)","<p>Sets <code>url</code> as a source for gems for this dependency API.  RubyGems uses the default configured sources …\n"],["source","Gem::Resolver::InstalledSpecification","Gem/Resolver/InstalledSpecification.html#method-i-source","()","<p>The source for this specification\n"],["source_date_epoch","Gem","Gem.html#method-c-source_date_epoch","()","<p>Returns the value of Gem.source_date_epoch_string, as a Time object.\n<p>This is used throughout RubyGems …\n"],["source_date_epoch_string","Gem","Gem.html#method-c-source_date_epoch_string","()","<p>If the SOURCE_DATE_EPOCH environment variable is set, returns it’s value. Otherwise, returns the …\n"],["source_for","Gem::AvailableSet","Gem/AvailableSet.html#method-i-source_for","(spec)",""],["source_paths","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-source_paths","()","<p>Returns the paths to the source files for use with analysis and documentation tools.  These paths are …\n"],["sources","Gem","Gem.html#method-c-sources","()","<p>Returns an Array of sources to fetch remote gems from. Uses default_sources if the sources list is empty. …\n"],["sources=","Gem","Gem.html#method-c-sources-3D","(new_sources)","<p>Need to be able to set the sources without calling Gem.sources.replace since that would cause an infinite …\n"],["spec","Gem::Installer","Gem/Installer.html#method-i-spec","()","<p>Lazy accessor for the installer’s spec.\n"],["spec","Gem::Package","Gem/Package.html#method-i-spec","()","<p>The spec for this gem.\n<p>If this is a package for a built gem the spec is loaded from the gem and returned. …\n"],["spec","Gem::Package::Old","Gem/Package/Old.html#method-i-spec","()","<p>The specification for this gem\n"],["spec","Gem::Resolver::LockSpecification","Gem/Resolver/LockSpecification.html#method-i-spec","()","<p>A specification constructed from the lockfile is returned\n"],["spec_authors","Gem::QueryUtils","Gem/QueryUtils.html#method-i-spec_authors","(entry, spec)",""],["spec_cache_dir","Gem","Gem.html#method-c-spec_cache_dir","()",""],["spec_dir","Gem::Specification","Gem/Specification.html#method-i-spec_dir","()","<p>Returns the full path to the directory containing this spec’s gemspec file. eg: /usr/local/lib/ruby/gems/1.8/specifications …\n"],["spec_file","Gem::Installer","Gem/Installer.html#method-i-spec_file","()","<p>The location of the spec file that is installed.\n"],["spec_file","Gem::Specification","Gem/Specification.html#method-i-spec_file","()","<p>Returns the full path to this spec’s gemspec file. eg: /usr/local/lib/ruby/gems/1.8/specifications/mygem-1.0.gemspec …\n"],["spec_for","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-spec_for","(name)",""],["spec_for","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-spec_for","(name)",""],["spec_for_dependency","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-spec_for_dependency","(dependency, matching_platform=true)","<p>Find and fetch specs that match <code>dependency</code>.\n<p>If <code>matching_platform</code> is false, gems for all platforms are …\n"],["spec_groups","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-spec_groups","()",""],["spec_homepage","Gem::QueryUtils","Gem/QueryUtils.html#method-i-spec_homepage","(entry, spec)",""],["spec_license","Gem::QueryUtils","Gem/QueryUtils.html#method-i-spec_license","(entry, spec)",""],["spec_loaded_from","Gem::QueryUtils","Gem/QueryUtils.html#method-i-spec_loaded_from","(entry, spec, specs)",""],["spec_name","Gem::NameTuple","Gem/NameTuple.html#method-i-spec_name","()","<p>Return the name that the gemspec file would be\n"],["spec_name","Gem::Specification","Gem/Specification.html#method-i-spec_name","()","<p>The default name of the gemspec.  See also #file_name\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">spec_name</span> <span class=\"ruby-comment\"># =&gt; &quot;example-1.0.gemspec&quot;</span>\n</pre>\n"],["spec_path","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-spec_path","(gem_full_name)",""],["spec_platforms","Gem::QueryUtils","Gem/QueryUtils.html#method-i-spec_platforms","(entry, platforms)",""],["spec_predecessors","Gem::DependencyList","Gem/DependencyList.html#method-i-spec_predecessors","()","<p>Return a hash of predecessors.  <code>result[spec]</code> is an Array of gemspecs that have a dependency satisfied …\n"],["spec_summary","Gem::QueryUtils","Gem/QueryUtils.html#method-i-spec_summary","(entry, spec)",""],["specific?","Gem::Dependency","Gem/Dependency.html#method-i-specific-3F","()","<p>True if the dependency will not always match the latest version.\n"],["specific?","Gem::Requirement","Gem/Requirement.html#method-i-specific-3F","()","<p>True if the requirement will not always match the latest version.\n"],["specific_extra_args","Gem::Command","Gem/Command.html#method-c-specific_extra_args","(cmd)","<p>Return an array of extra arguments for the command.  The extra arguments come from the gem configuration …\n"],["specific_extra_args_hash","Gem::Command","Gem/Command.html#method-c-specific_extra_args_hash","()","<p>Accessor for the specific extra args hash (self initializing).\n"],["specs","Gem::RequestSet","Gem/RequestSet.html#method-i-specs","()",""],["specs","Gem::Source::Git","Gem/Source/Git.html#method-i-specs","()","<p>Loads all gemspecs in the repository\n"],["specs_in","Gem::RequestSet","Gem/RequestSet.html#method-i-specs_in","(dir)",""],["specs_type","Gem::QueryUtils","Gem/QueryUtils.html#method-i-specs_type","()",""],["spell_checker","Gem::UnknownCommandSpellChecker","Gem/UnknownCommandSpellChecker.html#method-i-spell_checker","()",""],["split_flags","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-split_flags","(var)",""],["split_gem_path","Gem::PathSupport","Gem/PathSupport.html#method-i-split_gem_path","(gpaths, home)","<p>Split the Gem search path (as reported by Gem.path).\n"],["start_resolution","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-start_resolution","()","<p>Sets up the resolution process @return [void]\n"],["state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-state","()","<p>@return [RequirementState] the current state the resolution is\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">operating</span> <span class=\"ruby-identifier\">upon</span>\n</pre>\n"],["state_file","Gem","Gem.html#method-c-state_file","()","<p>The path to standard location of the user’s state file.\n"],["state_file_name","Gem::ConfigFile","Gem/ConfigFile.html#method-i-state_file_name","()","<p>The name of the state file.\n"],["state_file_writable?","Gem::ConfigFile","Gem/ConfigFile.html#method-i-state_file_writable-3F","()","<p>Check state file is writable. Creates empty file if not present to ensure we can write to it.\n"],["state_home","Gem","Gem.html#method-c-state_home","()","<p>The path to standard location of the user’s state directory.\n"],["strict_oct","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-strict_oct","(str)",""],["strongly_connected_components","Gem::TSort","Gem/TSort.html#method-i-strongly_connected_components","()","<p>Returns strongly connected components as an array of arrays of nodes. The array is sorted from children …\n"],["strongly_connected_components","Gem::TSort","Gem/TSort.html#method-c-strongly_connected_components","(each_node, each_child)","<p>Returns strongly connected components as an array of arrays of nodes. The array is sorted from children …\n"],["stubbed?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-stubbed-3F","()","<p>Whether this specification is stubbed - i.e. we have information about the gem from a stub line, without …\n"],["stubbed?","Gem::Specification","Gem/Specification.html#method-i-stubbed-3F","()",""],["stubs","Gem::Specification","Gem/Specification.html#method-c-stubs","()","<p>Returns a Gem::StubSpecification for every installed gem\n"],["stubs_for","Gem::Specification","Gem/Specification.html#method-c-stubs_for","(name)","<p>Returns a Gem::StubSpecification for installed gem named <code>name</code> only returns stubs that match Gem.platforms …\n"],["sub_dependencies_to_avoid","Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails","Gem/Resolver/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-sub_dependencies_to_avoid","()","<p>@return [Array] array of sub-dependencies to avoid when choosing a\n\n<pre>new possibility for the state we&#39;ve ...</pre>\n"],["successors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-successors","()","<p>@return [Array&lt;Vertex&gt;] the vertices of {#graph} that have an edge with\n\n<pre>`self` as their {Edge#origin}</pre>\n"],["suffix_pattern","Gem","Gem.html#method-c-suffix_pattern","()","<p>Glob pattern for require-able path suffixes.\n"],["suffix_regexp","Gem","Gem.html#method-c-suffix_regexp","()","<p>Regexp for require-able path suffixes.\n"],["suffixes","Gem","Gem.html#method-c-suffixes","()","<p>Suffixes for require-able paths.\n"],["suggest_gems_from_name","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-suggest_gems_from_name","(gem_name, type = :latest, num_results = 5)","<p>Suggests gems based on the supplied <code>gem_name</code>. Returns an array of alternative gem names.\n"],["suggestions","Gem::Licenses","Gem/Licenses.html#method-c-suggestions","(license)",""],["summarize","Gem::OptionParser","Gem/OptionParser.html#method-i-summarize","(to = [], width = @summary_width, max = width - 1, indent = @summary_indent, &blk)","<p>Puts option summary into <code>to</code> and returns <code>to</code>. Yields each line if a block is given.\n<p><code>to</code> &mdash; Output destination, …\n"],["summarize","Gem::OptionParser::List","Gem/OptionParser/List.html#method-i-summarize","(*args, &block)","<p>Creates the summary table, passing each line to the <code>block</code> (without newline). The arguments <code>args</code> are passed …\n"],["summarize","Gem::OptionParser::Switch","Gem/OptionParser/Switch.html#method-i-summarize","(sdone = {}, ldone = {}, width = 1, max = width - 1, indent = \"\")","<p>Produces the summary text. Each line of the summary is yielded to the block (without newline).\n<p><code>sdone</code> &mdash; "],["summary=","Gem::Specification","Gem/Specification.html#method-i-summary-3D","(str)","<p>A short summary of this gem’s description.\n"],["suppress_always_install","Gem::Commands::ExecCommand","Gem/Commands/ExecCommand.html#method-i-suppress_always_install","()",""],["switch_name","Gem::OptionParser::Switch","Gem/OptionParser/Switch.html#method-i-switch_name","()","<p>Main name of the switch.\n"],["symlink?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-symlink-3F","()","<p>Is this tar entry a symlink?\n"],["tag","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-tag","(tag)","<p>Tags the current state of the dependency as the given tag @param  [Object] tag an opaque tag for the …\n"],["tag","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-tag","(graph, tag)","<p>@macro action\n"],["target_bin_path","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-target_bin_path","(bin_dir, bin_file)",""],["terminate","Gem::OptionParser","Gem/OptionParser.html#method-i-terminate","(arg = nil)","<p>Terminates option parsing. Optional parameter <code>arg</code> is a string pushed back to be the first non-option …\n"],["terminate","Gem::OptionParser","Gem/OptionParser.html#method-c-terminate","(arg = nil)",""],["terminate_interaction","Gem::MockGemUi","Gem/MockGemUi.html#method-i-terminate_interaction","(status=0)",""],["terminate_interaction","Gem::StreamUI","Gem/StreamUI.html#method-i-terminate_interaction","(status = 0)","<p>Terminate the application with exit code <code>status</code>, running any exit handlers that might have been defined. …\n"],["terminate_interaction","Gem::UserInteraction","Gem/UserInteraction.html#method-i-terminate_interaction","(exit_code = 0)","<p>Terminates the RubyGems process with the given <code>exit_code</code>\n"],["terminated?","Gem::MockGemUi","Gem/MockGemUi.html#method-i-terminated-3F","()",""],["this","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-this","()",""],["time","Gem","Gem.html#method-c-time","(msg, width = 0, display = Gem.configuration.verbose)","<p>Prints the amount of time the supplied block takes to run using the debug UI output.\n"],["to_a","Gem::List","Gem/List.html#method-i-to_a","()",""],["to_a","Gem::NameTuple","Gem/NameTuple.html#method-i-to_a","()","<p>Convert back to the [name, version, platform] tuple\n"],["to_a","Gem::OptionParser","Gem/OptionParser.html#method-i-to_a","()","<p>Returns option summary list.\n"],["to_a","Gem::Platform","Gem/Platform.html#method-i-to_a","()",""],["to_a","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-to_a","()",""],["to_a","Gem::SourceList","Gem/SourceList.html#method-i-to_a","()","<p>Returns an Array of source URI Strings.\n"],["to_ary","Gem::SourceList","Gem/SourceList.html#method-i-to_ary","()",""],["to_basic","Gem::NameTuple","Gem/NameTuple.html#method-c-to_basic","(list)","<p>Turn an array of NameTuple objects back into an array of\n<p>name, version, platform &mdash; tuples.\n\n"],["to_dot","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-to_dot","(options = {})","<p>@param [Hash] options options for dot output. @return [String] Returns a dot format representation of …\n"],["to_fullpath","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-to_fullpath","(path)","<p>Full path of the target library file. If the file is not in this gem, return nil.\n"],["to_request_set","Gem::AvailableSet","Gem/AvailableSet.html#method-i-to_request_set","(development = :none)","<p>Converts this AvailableSet into a RequestSet that can be used to install gems.\n<p>If <code>development</code> is :none …\n"],["to_ruby","Gem::Specification","Gem/Specification.html#method-i-to_ruby","()","<p>Returns a Ruby code representation of this specification, such that it can be eval’ed and reconstruct …\n"],["to_ruby_for_cache","Gem::Specification","Gem/Specification.html#method-i-to_ruby_for_cache","()","<p>Returns a Ruby lighter-weight code representation of this specification, used for indexing only.\n<p>See  …\n"],["to_s","Gem::GemcutterUtilities::WebauthnListener::Response","Gem/GemcutterUtilities/WebauthnListener/Response.html#method-i-to_s","()",""],["to_s","Gem::OptionParser","Gem/OptionParser.html#method-i-to_s","()",""],["to_s","Gem::OptionParser::ParseError","Gem/OptionParser/ParseError.html#method-i-to_s","()",""],["to_s","Gem::Platform","Gem/Platform.html#method-i-to_s","()",""],["to_s","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-to_s","()","<p>The contents of the lock file.\n"],["to_s","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-to_s","()",""],["to_s","Gem::Resolver::Molinillo::Resolver::Resolution::PossibilitySet","Gem/Resolver/Molinillo/Resolver/Resolution/PossibilitySet.html#method-i-to_s","()","<p>String representation of the possibility set, for debugging\n"],["to_s","Gem::Uri","Gem/Uri.html#method-i-to_s","()",""],["to_s","Gem::Version","Gem/Version.html#method-i-to_s","()",""],["to_spec","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-to_spec","()","<p>Return a Gem::Specification from this gem\n"],["to_spec","Gem::Dependency","Gem/Dependency.html#method-i-to_spec","()",""],["to_spec","Gem::Specification","Gem/Specification.html#method-i-to_spec","()","<p>Returns self\n"],["to_specs","Gem::Dependency","Gem/Dependency.html#method-i-to_specs","()",""],["token?","Gem::Uri","Gem/Uri.html#method-i-token-3F","()",""],["tokenize","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-tokenize","(input)",""],["top","Gem::OptionParser","Gem/OptionParser.html#method-c-top","()",""],["top","Gem::OptionParser","Gem/OptionParser.html#method-i-top","()","<p>Subject of #on / #on_head, #accept / #reject\n"],["traverse","Gem::Specification","Gem/Specification.html#method-i-traverse","(trail = [], visited = {}, &block)","<p>Recursively walk dependencies of this spec, executing the <code>block</code> for each hop.\n"],["traverse_parents","Gem::Util","Gem/Util.html#method-c-traverse_parents","(directory, &block)","<p>Enumerates the parents of <code>directory</code>.\n"],["truncate_text","Gem::Text","Gem/Text.html#method-i-truncate_text","(text, description, max_length = 100_000)",""],["trust_cert","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-trust_cert","(certificate)","<p>Add a certificate to trusted certificate list.\n"],["trust_dir","Gem::Security","Gem/Security.html#method-c-trust_dir","()","<p>Returns a Gem::Security::TrustDir which wraps the directory where trusted certificates live.\n"],["trusted_certificates","Gem::Security","Gem/Security.html#method-c-trusted_certificates","(&block)","<p>Enumerates the trusted certificates via Gem::Security::TrustDir.\n"],["try_activate","Gem","Gem.html#method-c-try_activate","(path)","<p>Try to activate a gem containing <code>path</code>. Returns true if activation succeeded or wasn’t needed because …\n"],["tsort","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-c-tsort","(vertices)","<p>Topologically sorts the given vertices. @param [Enumerable&lt;Vertex&gt;] vertices the vertices to be …\n"],["tsort","Gem::TSort","Gem/TSort.html#method-i-tsort","()","<p>Returns a topologically sorted array of nodes. The array is sorted from children to parents, i.e. the …\n"],["tsort","Gem::TSort","Gem/TSort.html#method-c-tsort","(each_node, each_child)","<p>Returns a topologically sorted array of nodes. The array is sorted from children to parents, i.e. the …\n"],["tsort_each","Gem::TSort","Gem/TSort.html#method-i-tsort_each","()","<p>The iterator version of the #tsort method. <code><em>obj</em>.tsort_each</code> is similar to <code><em>obj</em>.tsort.each</code>, but modification …\n"],["tsort_each","Gem::TSort","Gem/TSort.html#method-c-tsort_each","(each_node, each_child)","<p>The iterator version of the Gem::TSort.tsort method.\n<p>The graph is represented by <em>each_node</em> and <em>each_child</em> …\n"],["tsort_each_child","Gem::DependencyList","Gem/DependencyList.html#method-i-tsort_each_child","(node)",""],["tsort_each_child","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-tsort_each_child","(vertex, &block)","<p>@!visibility private\n"],["tsort_each_child","Gem::TSort","Gem/TSort.html#method-i-tsort_each_child","(node)","<p>Should be implemented by a extended class.\n<p>#tsort_each_child is used to iterate for child nodes of <em>node</em> …\n"],["tsort_each_node","Gem::DependencyList","Gem/DependencyList.html#method-i-tsort_each_node","(&block)",""],["tsort_each_node","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-tsort_each_node","()","<p>@!visibility private\n"],["tsort_each_node","Gem::TSort","Gem/TSort.html#method-i-tsort_each_node","()","<p>Should be implemented by a extended class.\n<p>#tsort_each_node is used to iterate for all nodes over a graph. …\n"],["tty?","Gem::MockGemUi::TTY","Gem/MockGemUi/TTY.html#method-i-tty-3F","()",""],["tty?","Gem::SilentUI::NullIO","Gem/SilentUI/NullIO.html#method-i-tty-3F","()",""],["tty?","Gem::StreamUI","Gem/StreamUI.html#method-i-tty-3F","()","<p>Returns true if TTY methods should be used on this StreamUI.\n"],["type","Gem::Dependency","Gem/Dependency.html#method-i-type","()","<p>Dependency type.\n"],["type","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-type","()",""],["typo_squatting?","Gem::Source","Gem/Source.html#method-i-typo_squatting-3F","(host, distance_threshold=4)",""],["ui","Gem","Gem.html#method-c-ui","()","<p>Lazily loads DefaultUserInteraction and returns the default UI.\n"],["ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-ui","()","<p>Return the default UI.\n"],["ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-ui","()","<p>See DefaultUserInteraction::ui\n"],["ui=","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-ui-3D","(new_ui)","<p>Set the default UI.  If the default UI is never explicitly set, a simple console based UserInteraction …\n"],["ui=","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-ui-3D","(new_ui)","<p>See DefaultUserInteraction::ui=\n"],["unescape","Gem::UriFormatter","Gem/UriFormatter.html#method-i-unescape","()","<p>Unescapes the #uri which came from a CGI parameter\n"],["uninstall","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-uninstall","(gem_name)",""],["uninstall","Gem::Uninstaller","Gem/Uninstaller.html#method-i-uninstall","()","<p>Performs the uninstall of the gem.  This removes the spec, the Gem directory, and the cached .gem file. …\n"],["uninstall_all","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-uninstall_all","()",""],["uninstall_dep","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-uninstall_dep","(spec)",""],["uninstall_gem","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-uninstall_gem","(gem_name)",""],["uninstall_gem","Gem::Uninstaller","Gem/Uninstaller.html#method-i-uninstall_gem","(spec)","<p>Uninstalls gem <code>spec</code>\n"],["uninstall_old_gemcutter","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-uninstall_old_gemcutter","()",""],["uninstall_specific","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-uninstall_specific","()",""],["unpack","Gem::Installer","Gem/Installer.html#method-i-unpack","(directory)","<p>Unpacks the gem into the given directory.\n"],["unregister_command","Gem::CommandManager","Gem/CommandManager.html#method-i-unregister_command","(command)","<p>Unregister the Symbol <code>command</code> as a gem command.\n"],["unresolved_deps","Gem::Specification","Gem/Specification.html#method-c-unresolved_deps","()","<p>DOC: This method needs documented or nodoc’d\n"],["unresolved_specs","Gem::Specification","Gem/Specification.html#method-c-unresolved_specs","()",""],["unset_api_key!","Gem::ConfigFile","Gem/ConfigFile.html#method-i-unset_api_key-21","()","<p>Remove the +~/.gem/credentials+ file to clear all the current sessions.\n"],["unshift","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-unshift","(token)",""],["unused_unwind_options","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-unused_unwind_options","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#unused_unwind_options)\n"],["unwind_for_conflict","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-unwind_for_conflict","()","<p>Unwinds the states stack because a conflict has been encountered @return [void]\n"],["unwind_options_for_requirements","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-unwind_options_for_requirements","(binding_requirements)","<p>@param [Array&lt;Object&gt;] binding_requirements array of requirements that combine to create a conflict …\n"],["unwinding_to_primary_requirement?","Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails","Gem/Resolver/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-unwinding_to_primary_requirement-3F","()","<p>@return [Boolean] where the requirement of the state we’re unwinding\n\n<pre>to directly caused the conflict. ...</pre>\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::Action","Gem/Resolver/Molinillo/DependencyGraph/Action.html#method-i-up","(graph)","<p>Performs the action on the given graph. @param  [DependencyGraph] graph the graph to perform the action …\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-up","(graph)","<p>(see Action#up)\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-i-up","(graph)","<p>(see Action#up)\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html#method-i-up","(graph)","<p>(see Action#up)\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::Tag","Gem/Resolver/Molinillo/DependencyGraph/Tag.html#method-i-up","(graph)","<p>(see Action#up)\n"],["update","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-update","(current)","<p>Nothing can update the silent download reporter.\n"],["update","Gem::StreamUI::ThreadedDownloadReporter","Gem/StreamUI/ThreadedDownloadReporter.html#method-i-update","(bytes)","<p>Updates the threaded download reporter for the given number of <code>bytes</code>.\n"],["update_cache?","Gem::Source","Gem/Source.html#method-i-update_cache-3F","()","<p>Returns true when it is possible and safe to update the cache directory.\n"],["update_checksum","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-update_checksum","()","<p>Updates the TarHeader’s checksum\n"],["update_gem","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_gem","(name, version = Gem::Requirement.default)",""],["update_gems","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_gems","(gems_to_update)",""],["update_index","Gem::Indexer","Gem/Indexer.html#method-i-update_index","()","<p>Perform an in-place update of the repository from newly added gems.\n"],["update_rubygems","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_rubygems","()","<p>Update RubyGems software to the latest version.\n"],["update_scope","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-update_scope","(scope)",""],["update_specs_index","Gem::Indexer","Gem/Indexer.html#method-i-update_specs_index","(index, source, dest)","<p>Combines specs in <code>index</code> and <code>source</code> then writes out a new copy to <code>dest</code>.  For a latest index, does not …\n"],["update_suggestion","Gem::UpdateSuggestion","Gem/UpdateSuggestion.html#method-i-update_suggestion","()","<p>Message to promote available RubyGems update with related gem update command.\n"],["updated","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-i-updated","(message)","<p>Does not print <code>message</code> when updated as this object has taken a vow of silence.\n"],["updated","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-i-updated","(message)","<p>Prints out a dot and ignores <code>message</code>.\n"],["updated","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-i-updated","(message)","<p>Prints out the position relative to the total and the <code>message</code>.\n"],["usage","Gem::Command","Gem/Command.html#method-i-usage","()","<p>Override to display the usage for an individual gem command.\n<p>The text “[options]” is automatically …\n"],["use_gemdeps","Gem","Gem.html#method-c-use_gemdeps","(path = nil)","<p>Looks for a gem dependency file at <code>path</code> and activates the gems in the file if found.  If the file is …\n"],["use_paths","Gem","Gem.html#method-c-use_paths","(home, *paths)","<p>Use the <code>home</code> and <code>paths</code> values for Gem.dir and Gem.path.  Used mainly by the unit tests to provide environment …\n"],["use_ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-use_ui","(new_ui)","<p>Use <code>new_ui</code> for the duration of <code>block</code>.\n"],["use_ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-use_ui","(new_ui, &block)","<p>See DefaultUserInteraction::use_ui\n"],["user_agent","Gem::Request","Gem/Request.html#method-i-user_agent","()",""],["user_dir","Gem","Gem.html#method-c-user_dir","()","<p>Path for gems in the user’s home directory\n"],["user_home","Gem","Gem.html#method-c-user_home","()","<p>The home directory for the user.\n"],["valid_email?","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-valid_email-3F","(email)",""],["valid_uri?","Gem::Uri","Gem/Uri.html#method-i-valid_uri-3F","()",""],["validate","Gem::Specification","Gem/Specification.html#method-i-validate","(packaging = true, strict = false)","<p>Checks that the specification contains all required fields, and does a very basic sanity check.\n<p>Raises …\n"],["validate","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate","(strict = false)","<p>Does a sanity check on the specification.\n<p>Raises InvalidSpecificationException if the spec does not pass …\n"],["validate_array_attribute","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_array_attribute","(field)",""],["validate_array_attributes","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_array_attributes","()",""],["validate_attribute_present","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_attribute_present","(attribute)",""],["validate_authors_field","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_authors_field","()",""],["validate_dependencies","Gem::Specification","Gem/Specification.html#method-i-validate_dependencies","()",""],["validate_lazy_metadata","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_lazy_metadata","()",""],["validate_licenses","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_licenses","()",""],["validate_licenses_length","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_licenses_length","()",""],["validate_metadata","Gem::Specification","Gem/Specification.html#method-i-validate_metadata","()",""],["validate_metadata","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_metadata","()","<p>Implementation for Specification#validate_metadata\n"],["validate_name","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_name","()",""],["validate_nil_attributes","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_nil_attributes","()",""],["validate_non_files","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_non_files","()",""],["validate_optional","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_optional","(strict)",""],["validate_permissions","Gem::Specification","Gem/Specification.html#method-i-validate_permissions","()",""],["validate_permissions","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_permissions","()","<p>Issues a warning for each file to be packaged which is world-readable.\n<p>Implementation for Specification#validate_permissions …\n"],["validate_platform","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_platform","()",""],["validate_require_paths","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_require_paths","()",""],["validate_required!","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_required-21","()","<p>Does a sanity check on the specification.\n<p>Raises InvalidSpecificationException if the spec does not pass …\n"],["validate_required_attributes","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_required_attributes","()",""],["validate_rubygems_version","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_rubygems_version","()",""],["validate_self_inclusion_in_files_list","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_self_inclusion_in_files_list","()",""],["validate_shebang_line_in","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_shebang_line_in","(executable)",""],["validate_specification_version","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_specification_version","()",""],["validate_values","Gem::SpecificationPolicy","Gem/SpecificationPolicy.html#method-i-validate_values","()",""],["ver","Gem::OptionParser","Gem/OptionParser.html#method-i-ver","()","<p>Returns version string from program_name, version and release.\n"],["verbose","Gem::UserInteraction","Gem/UserInteraction.html#method-i-verbose","(msg = nil)","<p>Calls <code>say</code> with <code>msg</code> or the results of the block if really_verbose is true.\n"],["verify","Gem::Package","Gem/Package.html#method-i-verify","()","<p>Verifies that this gem:\n<p>Contains a valid gem specification\n<p>Contains a contents archive\n"],["verify","Gem::Package::Old","Gem/Package/Old.html#method-i-verify","()","<p>Raises an exception if a security policy that verifies data is active. Old format gems cannot be verified …\n"],["verify","Gem::Security::Policy","Gem/Security/Policy.html#method-i-verify","(chain, key = nil, digests = {}, signatures = {}, full_name = \"(unknown)\")","<p>For <code>full_name</code>, verifies the certificate <code>chain</code> is valid, the <code>digests</code> match the signatures <code>signatures</code> created …\n"],["verify","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-verify","()","<p>Make sure the trust directory exists.  If it does exist, make sure it’s actually a directory.  If …\n"],["verify_api_key","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-verify_api_key","(key)","<p>Retrieves the pre-configured API key <code>key</code> or terminates interaction with an error.\n"],["verify_certificate","Gem::Request","Gem/Request.html#method-c-verify_certificate","(store_context)",""],["verify_certificate_message","Gem::Request","Gem/Request.html#method-c-verify_certificate_message","(error_number, cert)",""],["verify_entry","Gem::Package","Gem/Package.html#method-i-verify_entry","(entry)","<p>Verifies <code>entry</code> in a .gem file.\n"],["verify_files","Gem::Package","Gem/Package.html#method-i-verify_files","(gem)","<p>Verifies the files of the <code>gem</code>\n"],["verify_signatures","Gem::Security::Policy","Gem/Security/Policy.html#method-i-verify_signatures","(spec, digests, signatures)","<p>Extracts the certificate chain from the <code>spec</code> and calls #verify to ensure the signatures and certificate …\n"],["verify_spec","Gem::Installer","Gem/Installer.html#method-i-verify_spec","()",""],["version","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-version","()","<p>Version of the gem\n"],["version","Gem::OptionParser","Gem/OptionParser.html#method-i-version","()","<p>Version\n"],["version","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-version","()","<p>The version of this activation request’s specification\n"],["version","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-version","()","<p>The version of the gem for this specification.\n"],["version","Gem::UnsatisfiableDependencyError","Gem/UnsatisfiableDependencyError.html#method-i-version","()","<p>The Requirement of the unresolved dependency (not Version).\n"],["version","Gem::Version","Gem/Version.html#method-i-version","()","<p>A string representation of this Version.\n"],["version=","Gem::Specification","Gem/Specification.html#method-i-version-3D","(version)","<p>Set the version to <code>version</code>, potentially also setting required_rubygems_version if <code>version</code> indicates it …\n"],["vertex_named","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-vertex_named","(name)","<p>@param [String] name @return [Vertex,nil] the vertex with the given name\n"],["visit_String","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-i-visit_String","(str)",""],["wait_for_otp_code","Gem::GemcutterUtilities::WebauthnListener","Gem/GemcutterUtilities/WebauthnListener.html#method-i-wait_for_otp_code","(server)",""],["wait_for_otp_thread","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-wait_for_otp_thread","(*threads)",""],["warn","Gem::OptionParser","Gem/OptionParser.html#method-i-warn","(mesg = $!)",""],["warn_cannot_uninstall_default_gems","Gem::Uninstaller","Gem/Uninstaller.html#method-i-warn_cannot_uninstall_default_gems","(specs)",""],["warning_without_suggested_alternatives","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-warning_without_suggested_alternatives","()",""],["webauthn_verification_poll_response","Gem::GemcutterUtilities::WebauthnPoller","Gem/GemcutterUtilities/WebauthnPoller.html#method-i-webauthn_verification_poll_response","(webauthn_url, credentials)",""],["webauthn_verification_url","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-webauthn_verification_url","(credentials)",""],["when_invoked","Gem::Command","Gem/Command.html#method-i-when_invoked","(&block)","<p>Call the given block when invoked.\n<p>Normal command invocations just executes the <code>execute</code> method of the …\n"],["which_to_update","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-which_to_update","(highest_installed_gems, gem_names)",""],["why_not_ok?","Gem::DependencyList","Gem/DependencyList.html#method-i-why_not_ok-3F","(quick = false)",""],["win_platform?","Gem","Gem.html#method-c-win_platform-3F","()","<p>Is this a windows platform?\n"],["win_target?","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-win_target-3F","()",""],["windows_stub_script","Gem::Installer","Gem/Installer.html#method-i-windows_stub_script","(bindir, bin_file_name)","<p>return the stub script text used to launch the true Ruby script\n"],["with","Gem::OptionParser","Gem/OptionParser.html#method-c-with","(*args, &block)","<p>Initializes a new instance and evaluates the optional block in context of the instance. Arguments <code>args</code> …\n"],["with_no_such_dependency_error_handling","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-with_no_such_dependency_error_handling","()","<p>Ensures any raised {NoSuchDependencyError} has its {NoSuchDependencyError#required_by} set. @yield\n"],["with_redacted_password","Gem::Uri","Gem/Uri.html#method-i-with_redacted_password","()",""],["with_redacted_user","Gem::Uri","Gem/Uri.html#method-i-with_redacted_user","()",""],["with_response","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-with_response","(response, error_prefix = nil)","<p>If <code>response</code> is an HTTP Success (2XX) response, yields the response if a block was given or shows the …\n"],["wordy","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-i-wordy","()","<p>A wordy description of the error.\n"],["wordy","Gem::SourceFetchProblem","Gem/SourceFetchProblem.html#method-i-wordy","()","<p>An English description of the error.\n"],["wrap","Gem::Command","Gem/Command.html#method-i-wrap","(text, width)","<p>Wraps <code>text</code> to <code>width</code>\n"],["wrap","Gem::Package::DigestIO","Gem/Package/DigestIO.html#method-c-wrap","(io, digests)","<p>Wraps <code>io</code> and updates digest for each of the digest algorithms in the <code>digests</code> Hash.  Returns the digests …\n"],["write","Gem::ConfigFile","Gem/ConfigFile.html#method-i-write","()","<p>Writes out this config file, replacing its source.\n"],["write","Gem::Package::DigestIO","Gem/Package/DigestIO.html#method-i-write","(data)","<p>Writes <code>data</code> to the underlying IO and updates the digests\n"],["write","Gem::Package::TarWriter::BoundedStream","Gem/Package/TarWriter/BoundedStream.html#method-i-write","(data)","<p>Writes <code>data</code> onto the IO, raising a FileOverflow exception if the number of bytes will be more than #limit …\n"],["write","Gem::Package::TarWriter::RestrictedStream","Gem/Package/TarWriter/RestrictedStream.html#method-i-write","(data)","<p>Writes <code>data</code> onto the IO\n"],["write","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-write","()","<p>Writes the lock file alongside the gem dependencies file\n"],["write","Gem::Security","Gem/Security.html#method-c-write","(pemmable, path, permissions = 0600, passphrase = nil, cipher = KEY_CIPHER)","<p>Writes <code>pemmable</code>, which must respond to <code>to_pem</code> to <code>path</code> with the given <code>permissions</code>. If passed <code>cipher</code> and …\n"],["write_binary","Gem","Gem.html#method-c-write_binary","(path, data)","<p>Safely write a file in binary mode on all platforms.\n"],["write_build_info_file","Gem::Installer","Gem/Installer.html#method-i-write_build_info_file","()","<p>Writes the file containing the arguments for building this gem’s extensions.\n"],["write_cache_file","Gem::Installer","Gem/Installer.html#method-i-write_cache_file","()","<p>Writes the .gem file to the cache directory\n"],["write_default_spec","Gem::Installer","Gem/Installer.html#method-i-write_default_spec","()","<p>Writes the full .gemspec specification (in Ruby) to the gem home’s specifications/default directory. …\n"],["write_deffile","Gem::Ext::CargoBuilder","Gem/Ext/CargoBuilder.html#method-i-write_deffile","(dest_dir, crate_name)",""],["write_spec","Gem::Installer","Gem/Installer.html#method-i-write_spec","()","<p>Writes the .gemspec specification (in Ruby) to the gem home’s specifications directory.\n"],["yank_api_request","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-yank_api_request","(method, version, platform, api)",""],["yank_gem","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-yank_gem","(version, platform)",""]]}}