var search_data = {"index":{"searchIndex":["getoptlong","ambiguousoption","error","invalidoption","missingargument","needlessargument","each()","each_option()","error_message()","get()","get_option()","new()","ordering=()","set_error()","set_options()","terminate()","terminated?()"],"longSearchIndex":["getoptlong","getoptlong::ambiguousoption","getoptlong::error","getoptlong::invalidoption","getoptlong::missingargument","getoptlong::needlessargument","getoptlong#each()","getoptlong#each_option()","getoptlong#error_message()","getoptlong#get()","getoptlong#get_option()","getoptlong::new()","getoptlong#ordering=()","getoptlong#set_error()","getoptlong#set_options()","getoptlong#terminate()","getoptlong#terminated?()"],"info":[["GetoptLong","","GetoptLong.html","","<p>Class GetoptLong provides parsing both for options and for regular arguments.\n<p>Using GetoptLong, you can …\n"],["GetoptLong::AmbiguousOption","","GetoptLong/AmbiguousOption.html","",""],["GetoptLong::Error","","GetoptLong/Error.html","","<p>Error types.\n"],["GetoptLong::InvalidOption","","GetoptLong/InvalidOption.html","",""],["GetoptLong::MissingArgument","","GetoptLong/MissingArgument.html","",""],["GetoptLong::NeedlessArgument","","GetoptLong/NeedlessArgument.html","",""],["each","GetoptLong","GetoptLong.html#method-i-each","()","<p>Calls the given block with each option; each option is a 2-element array containing:\n<p>The option name (the …\n"],["each_option","GetoptLong","GetoptLong.html#method-i-each_option","()",""],["error_message","GetoptLong","GetoptLong.html#method-i-error_message","()","<p>Return the appropriate error message in POSIX-defined format. If no error has occurred, returns <code>nil</code>. …\n"],["get","GetoptLong","GetoptLong.html#method-i-get","()","<p>Returns the next option as a 2-element array containing:\n<p>The option name (the name itself, not an alias). …\n"],["get_option","GetoptLong","GetoptLong.html#method-i-get_option","()",""],["new","GetoptLong","GetoptLong.html#method-c-new","(*arguments)","<p>Returns a new GetoptLong object based on the given <code>arguments</code>. See Options.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;getoptlong&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ordering=","GetoptLong","GetoptLong.html#method-i-ordering-3D","(ordering)","<p>Sets the ordering; see Ordering; returns the new ordering.\n<p>If the given <code>ordering</code> is <code>PERMUTE</code> and environment …\n"],["set_error","GetoptLong","GetoptLong.html#method-i-set_error","(type, message)","<p>Set an error (a protected method).\n"],["set_options","GetoptLong","GetoptLong.html#method-i-set_options","(*arguments)","<p>Replaces existing options with those given by <code>arguments</code>, which have the same form as the arguments to …\n"],["terminate","GetoptLong","GetoptLong.html#method-i-terminate","()","<p>Terminate option processing; returns <code>nil</code> if processing has already terminated; otherwise returns <code>self</code> …\n"],["terminated?","GetoptLong","GetoptLong.html#method-i-terminated-3F","()","<p>Returns <code>true</code> if option processing has terminated, <code>false</code> otherwise.\n"]]}}