var search_data = {"index":{"searchIndex":["random","formatter","alphanumeric()","base64()","choose()","gen_random()","hex()","random_bytes()","urlsafe_base64()","uuid()"],"longSearchIndex":["random","random::formatter","random::formatter#alphanumeric()","random::formatter#base64()","random::formatter#choose()","random::formatter#gen_random()","random::formatter#hex()","random::formatter#random_bytes()","random::formatter#urlsafe_base64()","random::formatter#uuid()"],"info":[["Random","","Random.html","",""],["Random::Formatter","","Random/Formatter.html","","<p>Random number formatter.\n<p>Formats generated random numbers in many manners. When <code>&#39;random/formatter&#39;</code> …\n"],["alphanumeric","Random::Formatter","Random/Formatter.html#method-i-alphanumeric","(n=nil)","<p>Generate a random alphanumeric string.\n<p>The argument <em>n</em> specifies the length, in characters, of the alphanumeric …\n"],["base64","Random::Formatter","Random/Formatter.html#method-i-base64","(n=nil)","<p>Generate a random base64 string.\n<p>The argument <em>n</em> specifies the length, in bytes, of the random number to …\n"],["choose","Random::Formatter","Random/Formatter.html#method-i-choose","(source, n)","<p>Generate a string that randomly draws from a source array of characters.\n<p>The argument <em>source</em> specifies …\n"],["gen_random","Random::Formatter","Random/Formatter.html#method-i-gen_random","(n)",""],["hex","Random::Formatter","Random/Formatter.html#method-i-hex","(n=nil)","<p>Generate a random hexadecimal string.\n<p>The argument <em>n</em> specifies the length, in bytes, of the random number …\n"],["random_bytes","Random::Formatter","Random/Formatter.html#method-i-random_bytes","(n=nil)","<p>Generate a random binary string.\n<p>The argument <em>n</em> specifies the length of the result string.\n<p>If <em>n</em> is not …\n"],["urlsafe_base64","Random::Formatter","Random/Formatter.html#method-i-urlsafe_base64","(n=nil, padding=false)","<p>Generate a random URL-safe base64 string.\n<p>The argument <em>n</em> specifies the length, in bytes, of the random …\n"],["uuid","Random::Formatter","Random/Formatter.html#method-i-uuid","()","<p>Generate a random v4 UUID (Universally Unique IDentifier).\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;random/formatter&#39;</span>\n\n<span class=\"ruby-constant\">Random</span>.<span class=\"ruby-identifier\">uuid</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"]]}}