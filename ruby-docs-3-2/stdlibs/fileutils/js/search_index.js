var search_data = {"index":{"searchIndex":["fileutils","dryrun","nowrite","streamutils_","verbose","cd()","cd()","chdir()","chdir()","chmod()","chmod()","chmod_r()","chmod_r()","chown()","chown()","chown_r()","chown_r()","cmp()","cmp()","collect_method()","commands()","compare_file()","compare_file()","compare_stream()","compare_stream()","copy()","copy()","copy_entry()","copy_entry()","copy_file()","copy_file()","copy_stream()","copy_stream()","cp()","cp()","cp_lr()","cp_lr()","cp_r()","cp_r()","fu_blksize()","fu_clean_components()","fu_default_blksize()","fu_split_path()","fu_starting_path?()","fu_stream_blksize()","fu_windows?()","getwd()","getwd()","have_option?()","identical?()","identical?()","install()","install()","link()","link()","link_entry()","link_entry()","ln()","ln()","ln_s()","ln_s()","ln_sf()","ln_sf()","ln_sr()","ln_sr()","makedirs()","makedirs()","mkdir()","mkdir()","mkdir_p()","mkdir_p()","mkpath()","mkpath()","move()","move()","mv()","mv()","options()","options_of()","pwd()","pwd()","remove()","remove()","remove_dir()","remove_dir()","remove_entry()","remove_entry()","remove_entry_secure()","remove_entry_secure()","remove_file()","remove_file()","rm()","rm()","rm_f()","rm_f()","rm_r()","rm_r()","rm_rf()","rm_rf()","rmdir()","rmdir()","rmtree()","rmtree()","safe_unlink()","safe_unlink()","symlink()","symlink()","touch()","touch()","uptodate?()","uptodate?()"],"longSearchIndex":["fileutils","fileutils::dryrun","fileutils::nowrite","fileutils::streamutils_","fileutils::verbose","fileutils#cd()","fileutils::cd()","fileutils#chdir()","fileutils::chdir()","fileutils#chmod()","fileutils::chmod()","fileutils#chmod_r()","fileutils::chmod_r()","fileutils#chown()","fileutils::chown()","fileutils#chown_r()","fileutils::chown_r()","fileutils#cmp()","fileutils::cmp()","fileutils::collect_method()","fileutils::commands()","fileutils#compare_file()","fileutils::compare_file()","fileutils#compare_stream()","fileutils::compare_stream()","fileutils#copy()","fileutils::copy()","fileutils#copy_entry()","fileutils::copy_entry()","fileutils#copy_file()","fileutils::copy_file()","fileutils#copy_stream()","fileutils::copy_stream()","fileutils#cp()","fileutils::cp()","fileutils#cp_lr()","fileutils::cp_lr()","fileutils#cp_r()","fileutils::cp_r()","fileutils::streamutils_#fu_blksize()","fileutils#fu_clean_components()","fileutils::streamutils_#fu_default_blksize()","fileutils#fu_split_path()","fileutils#fu_starting_path?()","fileutils::streamutils_#fu_stream_blksize()","fileutils::streamutils_#fu_windows?()","fileutils#getwd()","fileutils::getwd()","fileutils::have_option?()","fileutils#identical?()","fileutils::identical?()","fileutils#install()","fileutils::install()","fileutils#link()","fileutils::link()","fileutils#link_entry()","fileutils::link_entry()","fileutils#ln()","fileutils::ln()","fileutils#ln_s()","fileutils::ln_s()","fileutils#ln_sf()","fileutils::ln_sf()","fileutils#ln_sr()","fileutils::ln_sr()","fileutils#makedirs()","fileutils::makedirs()","fileutils#mkdir()","fileutils::mkdir()","fileutils#mkdir_p()","fileutils::mkdir_p()","fileutils#mkpath()","fileutils::mkpath()","fileutils#move()","fileutils::move()","fileutils#mv()","fileutils::mv()","fileutils::options()","fileutils::options_of()","fileutils#pwd()","fileutils::pwd()","fileutils#remove()","fileutils::remove()","fileutils#remove_dir()","fileutils::remove_dir()","fileutils#remove_entry()","fileutils::remove_entry()","fileutils#remove_entry_secure()","fileutils::remove_entry_secure()","fileutils#remove_file()","fileutils::remove_file()","fileutils#rm()","fileutils::rm()","fileutils#rm_f()","fileutils::rm_f()","fileutils#rm_r()","fileutils::rm_r()","fileutils#rm_rf()","fileutils::rm_rf()","fileutils#rmdir()","fileutils::rmdir()","fileutils#rmtree()","fileutils::rmtree()","fileutils#safe_unlink()","fileutils::safe_unlink()","fileutils#symlink()","fileutils::symlink()","fileutils#touch()","fileutils::touch()","fileutils#uptodate?()","fileutils::uptodate?()"],"info":[["FileUtils","","FileUtils.html","","<p>Namespace for file utility methods for copying, moving, removing, etc.\n<p>What’s Here\n<p>First, what’s elsewhere. …\n"],["FileUtils::DryRun","","FileUtils/DryRun.html","","<p>This module has all methods of FileUtils module, but never changes files/directories, with printing message …\n"],["FileUtils::NoWrite","","FileUtils/NoWrite.html","","<p>This module has all methods of FileUtils module, but never changes files/directories.  This equates to …\n"],["FileUtils::StreamUtils_","","FileUtils/StreamUtils_.html","",""],["FileUtils::Verbose","","FileUtils/Verbose.html","","<p>This module has all methods of FileUtils module, but it outputs messages before acting.  This equates …\n"],["cd","FileUtils","FileUtils.html#method-i-cd","(dir, verbose: nil)","<p>Changes the working directory to the given <code>dir</code>, which should be interpretable as a path:\n<p>With no block …\n"],["cd","FileUtils","FileUtils.html#method-c-cd","(dir, verbose: nil)","<p>Changes the working directory to the given <code>dir</code>, which should be interpretable as a path:\n<p>With no block …\n"],["chdir","FileUtils","FileUtils.html#method-i-chdir","(dir, verbose: nil)",""],["chdir","FileUtils","FileUtils.html#method-c-chdir","(dir, verbose: nil)",""],["chmod","FileUtils","FileUtils.html#method-i-chmod","(mode, list, noop: nil, verbose: nil)","<p>Changes permissions on the entries at the paths given in <code>list</code> (a single path or an array of paths) to …\n"],["chmod","FileUtils","FileUtils.html#method-c-chmod","(mode, list, noop: nil, verbose: nil)","<p>Changes permissions on the entries at the paths given in <code>list</code> (a single path or an array of paths) to …\n"],["chmod_R","FileUtils","FileUtils.html#method-i-chmod_R","(mode, list, noop: nil, verbose: nil, force: nil)","<p>Like FileUtils.chmod, but changes permissions recursively.\n"],["chmod_R","FileUtils","FileUtils.html#method-c-chmod_R","(mode, list, noop: nil, verbose: nil, force: nil)","<p>Like FileUtils.chmod, but changes permissions recursively.\n"],["chown","FileUtils","FileUtils.html#method-i-chown","(user, group, list, noop: nil, verbose: nil)","<p>Changes the owner and group on the entries at the paths given in <code>list</code> (a single path or an array of paths) …\n"],["chown","FileUtils","FileUtils.html#method-c-chown","(user, group, list, noop: nil, verbose: nil)","<p>Changes the owner and group on the entries at the paths given in <code>list</code> (a single path or an array of paths) …\n"],["chown_R","FileUtils","FileUtils.html#method-i-chown_R","(user, group, list, noop: nil, verbose: nil, force: nil)","<p>Like FileUtils.chown, but changes owner and group recursively.\n"],["chown_R","FileUtils","FileUtils.html#method-c-chown_R","(user, group, list, noop: nil, verbose: nil, force: nil)","<p>Like FileUtils.chown, but changes owner and group recursively.\n"],["cmp","FileUtils","FileUtils.html#method-i-cmp","(a, b)",""],["cmp","FileUtils","FileUtils.html#method-c-cmp","(a, b)",""],["collect_method","FileUtils","FileUtils.html#method-c-collect_method","(opt)","<p>Returns an array of the string method names of the methods that accept the given keyword option <code>opt</code>; …\n"],["commands","FileUtils","FileUtils.html#method-c-commands","()","<p>Returns an array of the string names of FileUtils methods that accept one or more keyword arguments: …\n"],["compare_file","FileUtils","FileUtils.html#method-i-compare_file","(a, b)","<p>Returns <code>true</code> if the contents of files <code>a</code> and <code>b</code> are identical, <code>false</code> otherwise.\n<p>Arguments <code>a</code> and <code>b</code> should …\n"],["compare_file","FileUtils","FileUtils.html#method-c-compare_file","(a, b)","<p>Returns <code>true</code> if the contents of files <code>a</code> and <code>b</code> are identical, <code>false</code> otherwise.\n<p>Arguments <code>a</code> and <code>b</code> should …\n"],["compare_stream","FileUtils","FileUtils.html#method-i-compare_stream","(a, b)","<p>Returns <code>true</code> if the contents of streams <code>a</code> and <code>b</code> are identical, <code>false</code> otherwise.\n<p>Arguments <code>a</code> and <code>b</code> should …\n"],["compare_stream","FileUtils","FileUtils.html#method-c-compare_stream","(a, b)","<p>Returns <code>true</code> if the contents of streams <code>a</code> and <code>b</code> are identical, <code>false</code> otherwise.\n<p>Arguments <code>a</code> and <code>b</code> should …\n"],["copy","FileUtils","FileUtils.html#method-i-copy","(src, dest, preserve: nil, noop: nil, verbose: nil)",""],["copy","FileUtils","FileUtils.html#method-c-copy","(src, dest, preserve: nil, noop: nil, verbose: nil)",""],["copy_entry","FileUtils","FileUtils.html#method-i-copy_entry","(src, dest, preserve = false, dereference_root = false, remove_destination = false)","<p>Recursively copies files from <code>src</code> to <code>dest</code>.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable as paths.\n<p>If …\n"],["copy_entry","FileUtils","FileUtils.html#method-c-copy_entry","(src, dest, preserve = false, dereference_root = false, remove_destination = false)","<p>Recursively copies files from <code>src</code> to <code>dest</code>.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable as paths.\n<p>If …\n"],["copy_file","FileUtils","FileUtils.html#method-i-copy_file","(src, dest, preserve = false, dereference = true)","<p>Copies file from <code>src</code> to <code>dest</code>, which should not be directories.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable …\n"],["copy_file","FileUtils","FileUtils.html#method-c-copy_file","(src, dest, preserve = false, dereference = true)","<p>Copies file from <code>src</code> to <code>dest</code>, which should not be directories.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable …\n"],["copy_stream","FileUtils","FileUtils.html#method-i-copy_stream","(src, dest)","<p>Copies IO stream <code>src</code> to IO stream <code>dest</code> via IO.copy_stream.\n<p>Related: methods for copying.\n"],["copy_stream","FileUtils","FileUtils.html#method-c-copy_stream","(src, dest)","<p>Copies IO stream <code>src</code> to IO stream <code>dest</code> via IO.copy_stream.\n<p>Related: methods for copying.\n"],["cp","FileUtils","FileUtils.html#method-i-cp","(src, dest, preserve: nil, noop: nil, verbose: nil)","<p>Copies files.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should be interpretable …\n"],["cp","FileUtils","FileUtils.html#method-c-cp","(src, dest, preserve: nil, noop: nil, verbose: nil)","<p>Copies files.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should be interpretable …\n"],["cp_lr","FileUtils","FileUtils.html#method-i-cp_lr","(src, dest, noop: nil, verbose: nil, dereference_root: true, remove_destination: false)","<p>Creates hard links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["cp_lr","FileUtils","FileUtils.html#method-c-cp_lr","(src, dest, noop: nil, verbose: nil, dereference_root: true, remove_destination: false)","<p>Creates hard links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["cp_r","FileUtils","FileUtils.html#method-i-cp_r","(src, dest, preserve: nil, noop: nil, verbose: nil, dereference_root: true, remove_destination: nil)","<p>Recursively copies files.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) …\n"],["cp_r","FileUtils","FileUtils.html#method-c-cp_r","(src, dest, preserve: nil, noop: nil, verbose: nil, dereference_root: true, remove_destination: nil)","<p>Recursively copies files.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) …\n"],["fu_blksize","FileUtils::StreamUtils_","FileUtils/StreamUtils_.html#method-i-fu_blksize","(st)",""],["fu_clean_components","FileUtils","FileUtils.html#method-i-fu_clean_components","(*comp)",""],["fu_default_blksize","FileUtils::StreamUtils_","FileUtils/StreamUtils_.html#method-i-fu_default_blksize","()",""],["fu_split_path","FileUtils","FileUtils.html#method-i-fu_split_path","(path)",""],["fu_starting_path?","FileUtils","FileUtils.html#method-i-fu_starting_path-3F","(path)",""],["fu_stream_blksize","FileUtils::StreamUtils_","FileUtils/StreamUtils_.html#method-i-fu_stream_blksize","(*streams)",""],["fu_windows?","FileUtils::StreamUtils_","FileUtils/StreamUtils_.html#method-i-fu_windows-3F","()",""],["getwd","FileUtils","FileUtils.html#method-i-getwd","()",""],["getwd","FileUtils","FileUtils.html#method-c-getwd","()",""],["have_option?","FileUtils","FileUtils.html#method-c-have_option-3F","(mid, opt)","<p>Returns <code>true</code> if method <code>mid</code> accepts the given option <code>opt</code>, <code>false</code> otherwise; the arguments may be strings …\n"],["identical?","FileUtils","FileUtils.html#method-i-identical-3F","(a, b)",""],["identical?","FileUtils","FileUtils.html#method-c-identical-3F","(a, b)",""],["install","FileUtils","FileUtils.html#method-i-install","(src, dest, mode: nil, owner: nil, group: nil, preserve: nil, noop: nil, verbose: nil)","<p>Copies a file entry. See install(1).\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single …\n"],["install","FileUtils","FileUtils.html#method-c-install","(src, dest, mode: nil, owner: nil, group: nil, preserve: nil, noop: nil, verbose: nil)","<p>Copies a file entry. See install(1).\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single …\n"],["link","FileUtils","FileUtils.html#method-i-link","(src, dest, force: nil, noop: nil, verbose: nil)",""],["link","FileUtils","FileUtils.html#method-c-link","(src, dest, force: nil, noop: nil, verbose: nil)",""],["link_entry","FileUtils","FileUtils.html#method-i-link_entry","(src, dest, dereference_root = false, remove_destination = false)","<p>Creates hard links; returns <code>nil</code>.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable as paths.\n<p>If <code>src</code> is the …\n"],["link_entry","FileUtils","FileUtils.html#method-c-link_entry","(src, dest, dereference_root = false, remove_destination = false)","<p>Creates hard links; returns <code>nil</code>.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable as paths.\n<p>If <code>src</code> is the …\n"],["ln","FileUtils","FileUtils.html#method-i-ln","(src, dest, force: nil, noop: nil, verbose: nil)","<p>Creates hard links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["ln","FileUtils","FileUtils.html#method-c-ln","(src, dest, force: nil, noop: nil, verbose: nil)","<p>Creates hard links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["ln_s","FileUtils","FileUtils.html#method-i-ln_s","(src, dest, force: nil, relative: false, target_directory: true, noop: nil, verbose: nil)","<p>Creates symbolic links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["ln_s","FileUtils","FileUtils.html#method-c-ln_s","(src, dest, force: nil, relative: false, target_directory: true, noop: nil, verbose: nil)","<p>Creates symbolic links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["ln_sf","FileUtils","FileUtils.html#method-i-ln_sf","(src, dest, noop: nil, verbose: nil)","<p>Like FileUtils.ln_s, but always with keyword argument <code>force: true</code> given.\n"],["ln_sf","FileUtils","FileUtils.html#method-c-ln_sf","(src, dest, noop: nil, verbose: nil)","<p>Like FileUtils.ln_s, but always with keyword argument <code>force: true</code> given.\n"],["ln_sr","FileUtils","FileUtils.html#method-i-ln_sr","(src, dest, target_directory: true, force: nil, noop: nil, verbose: nil)","<p>Like FileUtils.ln_s, but create links relative to <code>dest</code>.\n"],["ln_sr","FileUtils","FileUtils.html#method-c-ln_sr","(src, dest, target_directory: true, force: nil, noop: nil, verbose: nil)","<p>Like FileUtils.ln_s, but create links relative to <code>dest</code>.\n"],["makedirs","FileUtils","FileUtils.html#method-i-makedirs","(list, mode: nil, noop: nil, verbose: nil)",""],["makedirs","FileUtils","FileUtils.html#method-c-makedirs","(list, mode: nil, noop: nil, verbose: nil)",""],["mkdir","FileUtils","FileUtils.html#method-i-mkdir","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates directories at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code> …\n"],["mkdir","FileUtils","FileUtils.html#method-c-mkdir","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates directories at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code> …\n"],["mkdir_p","FileUtils","FileUtils.html#method-i-mkdir_p","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates directories at the paths in the given <code>list</code> (a single path or an array of paths), also creating …\n"],["mkdir_p","FileUtils","FileUtils.html#method-c-mkdir_p","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates directories at the paths in the given <code>list</code> (a single path or an array of paths), also creating …\n"],["mkpath","FileUtils","FileUtils.html#method-i-mkpath","(list, mode: nil, noop: nil, verbose: nil)",""],["mkpath","FileUtils","FileUtils.html#method-c-mkpath","(list, mode: nil, noop: nil, verbose: nil)",""],["move","FileUtils","FileUtils.html#method-i-move","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)",""],["move","FileUtils","FileUtils.html#method-c-move","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)",""],["mv","FileUtils","FileUtils.html#method-i-mv","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Moves entries.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should be  …\n"],["mv","FileUtils","FileUtils.html#method-c-mv","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Moves entries.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should be  …\n"],["options","FileUtils","FileUtils.html#method-c-options","()","<p>Returns an array of the string keyword names:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">options</span>.<span class=\"ruby-identifier\">take</span>(<span class=\"ruby-value\">3</span>) <span class=\"ruby-comment\"># =&gt; [&quot;noop&quot;, &quot;verbose&quot;, &quot;force&quot;]</span>\n</pre>\n"],["options_of","FileUtils","FileUtils.html#method-c-options_of","(mid)","<p>Returns an array of the string keyword name for method <code>mid</code>; the argument may be a string or a symbol: …\n"],["pwd","FileUtils","FileUtils.html#method-i-pwd","()","<p>Returns a string containing the path to the current directory:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">pwd</span> <span class=\"ruby-comment\"># =&gt; &quot;/rdoc/fileutils&quot;</span>\n</pre>\n<p>FileUtils.getwd …\n"],["pwd","FileUtils","FileUtils.html#method-c-pwd","()","<p>Returns a string containing the path to the current directory:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">pwd</span> <span class=\"ruby-comment\"># =&gt; &quot;/rdoc/fileutils&quot;</span>\n</pre>\n<p>FileUtils.getwd …\n"],["remove","FileUtils","FileUtils.html#method-i-remove","(list, force: nil, noop: nil, verbose: nil)",""],["remove","FileUtils","FileUtils.html#method-c-remove","(list, force: nil, noop: nil, verbose: nil)",""],["remove_dir","FileUtils","FileUtils.html#method-i-remove_dir","(path, force = false)","<p>Recursively removes the directory entry given by <code>path</code>, which should be the entry for a regular file, …\n"],["remove_dir","FileUtils","FileUtils.html#method-c-remove_dir","(path, force = false)","<p>Recursively removes the directory entry given by <code>path</code>, which should be the entry for a regular file, …\n"],["remove_entry","FileUtils","FileUtils.html#method-i-remove_entry","(path, force = false)","<p>Removes the entry given by <code>path</code>, which should be the entry for a regular file, a symbolic link, or a …\n"],["remove_entry","FileUtils","FileUtils.html#method-c-remove_entry","(path, force = false)","<p>Removes the entry given by <code>path</code>, which should be the entry for a regular file, a symbolic link, or a …\n"],["remove_entry_secure","FileUtils","FileUtils.html#method-i-remove_entry_secure","(path, force = false)","<p>Securely removes the entry given by <code>path</code>, which should be the entry for a regular file, a symbolic link, …\n"],["remove_entry_secure","FileUtils","FileUtils.html#method-c-remove_entry_secure","(path, force = false)","<p>Securely removes the entry given by <code>path</code>, which should be the entry for a regular file, a symbolic link, …\n"],["remove_file","FileUtils","FileUtils.html#method-i-remove_file","(path, force = false)","<p>Removes the file entry given by <code>path</code>, which should be the entry for a regular file or a symbolic link. …\n"],["remove_file","FileUtils","FileUtils.html#method-c-remove_file","(path, force = false)","<p>Removes the file entry given by <code>path</code>, which should be the entry for a regular file or a symbolic link. …\n"],["rm","FileUtils","FileUtils.html#method-i-rm","(list, force: nil, noop: nil, verbose: nil)","<p>Removes entries at the paths in the given <code>list</code> (a single path or an array of paths) returns <code>list</code>, if …\n"],["rm","FileUtils","FileUtils.html#method-c-rm","(list, force: nil, noop: nil, verbose: nil)","<p>Removes entries at the paths in the given <code>list</code> (a single path or an array of paths) returns <code>list</code>, if …\n"],["rm_f","FileUtils","FileUtils.html#method-i-rm_f","(list, noop: nil, verbose: nil)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm</span>(<span class=\"ruby-identifier\">list</span>, <span class=\"ruby-value\">force:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-operator\">**</span><span class=\"ruby-identifier\">kwargs</span>)\n</pre>\n<p>Argument <code>list</code> (a single path or an array of paths) …\n"],["rm_f","FileUtils","FileUtils.html#method-c-rm_f","(list, noop: nil, verbose: nil)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm</span>(<span class=\"ruby-identifier\">list</span>, <span class=\"ruby-value\">force:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-operator\">**</span><span class=\"ruby-identifier\">kwargs</span>)\n</pre>\n<p>Argument <code>list</code> (a single path or an array of paths) …\n"],["rm_r","FileUtils","FileUtils.html#method-i-rm_r","(list, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Removes entries at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code>, if …\n"],["rm_r","FileUtils","FileUtils.html#method-c-rm_r","(list, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Removes entries at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code>, if …\n"],["rm_rf","FileUtils","FileUtils.html#method-i-rm_rf","(list, noop: nil, verbose: nil, secure: nil)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm_r</span>(<span class=\"ruby-identifier\">list</span>, <span class=\"ruby-value\">force:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-operator\">**</span><span class=\"ruby-identifier\">kwargs</span>)\n</pre>\n<p>Argument <code>list</code> or its elements should be interpretable …\n"],["rm_rf","FileUtils","FileUtils.html#method-c-rm_rf","(list, noop: nil, verbose: nil, secure: nil)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm_r</span>(<span class=\"ruby-identifier\">list</span>, <span class=\"ruby-value\">force:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-operator\">**</span><span class=\"ruby-identifier\">kwargs</span>)\n</pre>\n<p>Argument <code>list</code> or its elements should be interpretable …\n"],["rmdir","FileUtils","FileUtils.html#method-i-rmdir","(list, parents: nil, noop: nil, verbose: nil)","<p>Removes directories at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code> …\n"],["rmdir","FileUtils","FileUtils.html#method-c-rmdir","(list, parents: nil, noop: nil, verbose: nil)","<p>Removes directories at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code> …\n"],["rmtree","FileUtils","FileUtils.html#method-i-rmtree","(list, noop: nil, verbose: nil, secure: nil)",""],["rmtree","FileUtils","FileUtils.html#method-c-rmtree","(list, noop: nil, verbose: nil, secure: nil)",""],["safe_unlink","FileUtils","FileUtils.html#method-i-safe_unlink","(list, noop: nil, verbose: nil)",""],["safe_unlink","FileUtils","FileUtils.html#method-c-safe_unlink","(list, noop: nil, verbose: nil)",""],["symlink","FileUtils","FileUtils.html#method-i-symlink","(src, dest, force: nil, relative: false, target_directory: true, noop: nil, verbose: nil)",""],["symlink","FileUtils","FileUtils.html#method-c-symlink","(src, dest, force: nil, relative: false, target_directory: true, noop: nil, verbose: nil)",""],["touch","FileUtils","FileUtils.html#method-i-touch","(list, noop: nil, verbose: nil, mtime: nil, nocreate: nil)","<p>Updates modification times (mtime) and access times (atime) of the entries given by the paths in <code>list</code> …\n"],["touch","FileUtils","FileUtils.html#method-c-touch","(list, noop: nil, verbose: nil, mtime: nil, nocreate: nil)","<p>Updates modification times (mtime) and access times (atime) of the entries given by the paths in <code>list</code> …\n"],["uptodate?","FileUtils","FileUtils.html#method-i-uptodate-3F","(new, old_list)","<p>Returns <code>true</code> if the file at path <code>new</code> is newer than all the files at paths in array <code>old_list</code>; <code>false</code> otherwise. …\n"],["uptodate?","FileUtils","FileUtils.html#method-c-uptodate-3F","(new, old_list)","<p>Returns <code>true</code> if the file at path <code>new</code> is newer than all the files at paths in array <code>old_list</code>; <code>false</code> otherwise. …\n"]]}}