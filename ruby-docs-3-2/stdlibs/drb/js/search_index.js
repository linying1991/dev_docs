var search_data = {"index":{"searchIndex":["acl","aclentry","acllist","drb","drbarray","drbbadscheme","drbbaduri","drbconn","drbconnerror","drberror","drbidconv","drbidconv","drbmessage","drbobject","drbobject","drbobservable","drbprotocol","drbremoteerror","drbsslsocket","sslconfig","drbserver","invokemethod18mixin","drbservernotfound","drbtcpsocket","drbunixsocket","drbundumped","drbundumped","drbunknown","drbunknownerror","extserv","extservmanager","gw","gwidconv","threadobject","timeridconv","timerholder2","invalidindexerror","weakidconv","weakset","object","[]()","[]()","[]=()","__drbref()","__drbref()","__drburi()","__drburi()","_dump()","_dump()","_execute()","_load()","_load()","accept()","add()","add()","add_protocol()","add_protocol()","alive?()","alive?()","alive?()","allow_addr?()","allow_socket?()","any_to_s()","check_insecure_method()","command()","command=()","config()","config()","connect()","current_server()","current_server()","default_acl()","default_argc_limit()","default_id_conv()","default_load_limit()","dot_pat()","dot_pat_str()","error_print()","exception()","fetch()","fetch_server()","fetch_server()","front()","front()","front()","here?()","here?()","here?()","insecure_method?()","install_acl()","install_acl()","install_id_conv()","install_id_conv()","install_list()","invoke_service()","invoke_service_command()","invoke_thread()","kill()","main_loop()","make_pool()","match()","match()","method_missing()","method_missing()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_with()","new_with()","new_with_uri()","new_with_uri()","notify_observers()","open()","open()","open()","open_server()","open_server()","open_server()","regist()","regist_server()","regist_server()","register()","reload()","remove_server()","remove_server()","respond_to?()","respond_to?()","run()","service()","setup_certificate()","setup_ssl_context()","shutdown()","start_service()","start_service()","stop_pool()","stop_service()","stop_service()","stop_service()","stop_service()","thread()","thread()","to_id()","to_id()","to_id()","to_id()","to_id()","to_obj()","to_obj()","to_obj()","to_obj()","to_obj()","unregist()","unregister()","uri()","uri()","uri_option()","uri_option()","verbose()","verbose()","verbose=()","verbose=()"],"longSearchIndex":["acl","acl::aclentry","acl::acllist","drb","drb::drbarray","drb::drbbadscheme","drb::drbbaduri","drb::drbconn","drb::drbconnerror","drb::drberror","drb::drbidconv","drb::drbidconv","drb::drbmessage","drb::drbobject","drb::drbobject","drb::drbobservable","drb::drbprotocol","drb::drbremoteerror","drb::drbsslsocket","drb::drbsslsocket::sslconfig","drb::drbserver","drb::drbserver::invokemethod18mixin","drb::drbservernotfound","drb::drbtcpsocket","drb::drbunixsocket","drb::drbundumped","drb::drbundumped","drb::drbunknown","drb::drbunknownerror","drb::extserv","drb::extservmanager","drb::gw","drb::gwidconv","drb::threadobject","drb::timeridconv","drb::timeridconv::timerholder2","drb::timeridconv::timerholder2::invalidindexerror","drb::weakidconv","drb::weakidconv::weakset","object","drb::drbsslsocket::sslconfig#[]()","drb::gw#[]()","drb::gw#[]=()","drb::drbobject#__drbref()","drb::drbobject#__drbref()","drb::drbobject#__drburi()","drb::drbobject#__drburi()","drb::drbobject#_dump()","drb::drbobject#_dump()","drb::threadobject#_execute()","drb::drbobject::_load()","drb::drbobject::_load()","drb::drbsslsocket::sslconfig#accept()","acl::acllist#add()","drb::weakidconv::weakset#add()","drb::drbprotocol#add_protocol()","drb::drbprotocol::add_protocol()","drb::drbserver#alive?()","drb::extserv#alive?()","drb::threadobject#alive?()","acl#allow_addr?()","acl#allow_socket?()","drb::drbserver#any_to_s()","drb::drbserver#check_insecure_method()","drb::extservmanager::command()","drb::extservmanager::command=()","drb#config()","drb::config()","drb::drbsslsocket::sslconfig#connect()","drb#current_server()","drb::current_server()","drb::drbserver::default_acl()","drb::drbserver::default_argc_limit()","drb::drbserver::default_id_conv()","drb::drbserver::default_load_limit()","acl::aclentry#dot_pat()","acl::aclentry#dot_pat_str()","drb::drbserver#error_print()","drb::drbunknown#exception()","drb::weakidconv::weakset#fetch()","drb#fetch_server()","drb::fetch_server()","drb#front()","drb::front()","drb::extserv#front()","drb#here?()","drb::here?()","drb::drbserver#here?()","drb::drbserver#insecure_method?()","drb#install_acl()","drb::install_acl()","drb#install_id_conv()","drb::install_id_conv()","acl#install_list()","drb::extservmanager#invoke_service()","drb::extservmanager#invoke_service_command()","drb::extservmanager#invoke_thread()","drb::threadobject#kill()","drb::drbserver#main_loop()","drb::drbconn::make_pool()","acl::aclentry#match()","acl::acllist#match()","drb::drbobject#method_missing()","drb::drbobject#method_missing()","drb::threadobject#method_missing()","acl::new()","acl::aclentry::new()","acl::acllist::new()","drb::drbarray::new()","drb::drbobject::new()","drb::drbobject::new()","drb::drbremoteerror::new()","drb::drbsslsocket::new()","drb::drbsslsocket::sslconfig::new()","drb::drbserver::new()","drb::drbunknown::new()","drb::drbunknownerror::new()","drb::extserv::new()","drb::extservmanager::new()","drb::gw::new()","drb::threadobject::new()","drb::timeridconv::new()","drb::weakidconv::new()","drb::weakidconv::weakset::new()","drb::drbobject::new_with()","drb::drbobject::new_with()","drb::drbobject::new_with_uri()","drb::drbobject::new_with_uri()","drb::drbobservable#notify_observers()","drb::drbprotocol#open()","drb::drbprotocol::open()","drb::drbsslsocket::open()","drb::drbprotocol#open_server()","drb::drbprotocol::open_server()","drb::drbsslsocket::open_server()","drb::extservmanager#regist()","drb#regist_server()","drb::regist_server()","drb::extservmanager#register()","drb::drbunknown#reload()","drb#remove_server()","drb::remove_server()","drb::drbobject#respond_to?()","drb::drbobject#respond_to?()","drb::drbserver#run()","drb::extservmanager#service()","drb::drbsslsocket::sslconfig#setup_certificate()","drb::drbsslsocket::sslconfig#setup_ssl_context()","drb::drbserver#shutdown()","drb#start_service()","drb::start_service()","drb::drbconn::stop_pool()","drb#stop_service()","drb::stop_service()","drb::drbserver#stop_service()","drb::extserv#stop_service()","drb#thread()","drb::thread()","drb#to_id()","drb::to_id()","drb::drbidconv#to_id()","drb::drbidconv#to_id()","drb::drbserver#to_id()","drb#to_obj()","drb::to_obj()","drb::drbidconv#to_obj()","drb::drbidconv#to_obj()","drb::drbserver#to_obj()","drb::extservmanager#unregist()","drb::extservmanager#unregister()","drb#uri()","drb::uri()","drb::drbprotocol#uri_option()","drb::drbprotocol::uri_option()","drb::drbserver::verbose()","drb::drbserver#verbose()","drb::drbserver::verbose=()","drb::drbserver#verbose=()"],"info":[["ACL","","ACL.html","","<p>Simple Access Control Lists.\n<p>Access control lists are composed of “allow” and “deny” …\n"],["ACL::ACLEntry","","ACL/ACLEntry.html","","<p>An entry in an ACL\n"],["ACL::ACLList","","ACL/ACLList.html","","<p>A list of ACLEntry objects.  Used to implement the allow and deny halves of an ACL\n"],["DRb","","DRb.html","","<p>Overview\n<p>dRuby is a distributed object system for Ruby.  It is written in pure Ruby and uses its own protocol. …\n"],["DRb::DRbArray","","DRb/DRbArray.html","","<p>An Array wrapper that can be sent to another server via DRb.\n<p>All entries in the array will be dumped or …\n"],["DRb::DRbBadScheme","","DRb/DRbBadScheme.html","","<p>Error raised by a dRuby protocol when it doesn’t support the scheme specified in a URI.  See DRb::DRbProtocol …\n"],["DRb::DRbBadURI","","DRb/DRbBadURI.html","","<p>Error raised by the DRbProtocol module when it cannot find any protocol implementation support the scheme …\n"],["DRb::DRbConn","","DRb/DRbConn.html","","<p>Class handling the connection between a DRbObject and the server the real object lives on.\n<p>This class …\n"],["DRb::DRbConnError","","DRb/DRbConnError.html","","<p>Error raised when an error occurs on the underlying communication protocol.\n"],["DRb::DRbError","","DRb/DRbError.html","","<p>Superclass of all errors raised in the DRb module.\n"],["DRb::DRbIdConv","","DRb/DRbIdConv.html","","<p>Class responsible for converting between an object and its id.\n<p>This, the default implementation, uses …\n"],["DRb::DRbIdConv","","DRb/DRbIdConv.html","","<p>Class responsible for converting between an object and its id.\n<p>This, the default implementation, uses …\n"],["DRb::DRbMessage","","DRb/DRbMessage.html","","<p>Handler for sending and receiving drb messages.\n<p>This takes care of the low-level marshalling and unmarshalling …\n"],["DRb::DRbObject","","DRb/DRbObject.html","","<p>Object wrapping a reference to a remote drb object.\n<p>Method calls on this object are relayed to the remote …\n"],["DRb::DRbObject","","DRb/DRbObject.html","","<p>Object wrapping a reference to a remote drb object.\n<p>Method calls on this object are relayed to the remote …\n"],["DRb::DRbObservable","","DRb/DRbObservable.html","","<p>The Observable module extended to DRb.  See Observable for details.\n"],["DRb::DRbProtocol","","DRb/DRbProtocol.html","","<p>Module managing the underlying network protocol(s) used by drb.\n<p>By default, drb uses the DRbTCPSocket …\n"],["DRb::DRbRemoteError","","DRb/DRbRemoteError.html","","<p>An exception wrapping an error object\n"],["DRb::DRbSSLSocket","","DRb/DRbSSLSocket.html","","<p>The protocol for DRb over an SSL socket\n<p>The URI for a DRb socket over SSL is: <code>drbssl://&lt;host&gt;:&lt;port&gt;?&lt;option&gt;</code> …\n"],["DRb::DRbSSLSocket::SSLConfig","","DRb/DRbSSLSocket/SSLConfig.html","","<p>SSLConfig handles the needed SSL information for establishing a DRbSSLSocket connection, including generating …\n"],["DRb::DRbServer","","DRb/DRbServer.html","","<p>Class representing a drb server instance.\n<p>A DRbServer must be running in the local process before any …\n"],["DRb::DRbServer::InvokeMethod18Mixin","","DRb/DRbServer/InvokeMethod18Mixin.html","",""],["DRb::DRbServerNotFound","","DRb/DRbServerNotFound.html","","<p>Error raised by the DRb module when an attempt is made to refer to the context’s current drb server …\n"],["DRb::DRbTCPSocket","","DRb/DRbTCPSocket.html","","<p>The default drb protocol which communicates over a TCP socket.\n<p>The DRb TCP protocol URI looks like: <code>druby://&lt;host&gt;:&lt;port&gt;?&lt;option&gt;</code> …\n"],["DRb::DRbUNIXSocket","","DRb/DRbUNIXSocket.html","","<p>Implements DRb over a UNIX socket\n<p>DRb UNIX socket URIs look like <code>drbunix:&lt;path&gt;?&lt;option&gt;</code>. …\n"],["DRb::DRbUndumped","","DRb/DRbUndumped.html","","<p>Mixin module making an object undumpable or unmarshallable.\n<p>If an object which includes this module is …\n"],["DRb::DRbUndumped","","DRb/DRbUndumped.html","","<p>Mixin module making an object undumpable or unmarshallable.\n<p>If an object which includes this module is …\n"],["DRb::DRbUnknown","","DRb/DRbUnknown.html","","<p>Class wrapping a marshalled object whose type is unknown locally.\n<p>If an object is returned by a method …\n"],["DRb::DRbUnknownError","","DRb/DRbUnknownError.html","","<p>An exception wrapping a DRb::DRbUnknown object\n"],["DRb::ExtServ","","DRb/ExtServ.html","",""],["DRb::ExtServManager","","DRb/ExtServManager.html","",""],["DRb::GW","","DRb/GW.html","","<p>The GW provides a synchronized store for participants in the gateway to communicate.\n"],["DRb::GWIdConv","","DRb/GWIdConv.html","","<p>Gateway id conversion forms a gateway between different DRb protocols or networks.\n<p>The gateway needs to …\n"],["DRb::ThreadObject","","DRb/ThreadObject.html","",""],["DRb::TimerIdConv","","DRb/TimerIdConv.html","","<p>Timer id conversion keeps objects alive for a certain amount of time after their last access.  The default …\n"],["DRb::TimerIdConv::TimerHolder2","","DRb/TimerIdConv/TimerHolder2.html","",""],["DRb::TimerIdConv::TimerHolder2::InvalidIndexError","","DRb/TimerIdConv/TimerHolder2/InvalidIndexError.html","",""],["DRb::WeakIdConv","","DRb/WeakIdConv.html","","<p>To use WeakIdConv:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DRb</span>.<span class=\"ruby-identifier\">start_service</span>(<span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-keyword\">nil</span>, {<span class=\"ruby-value\">:idconv</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-constant\">DRb</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">WeakIdConv</span>.<span class=\"ruby-identifier\">new</span>})\n</pre>\n"],["DRb::WeakIdConv::WeakSet","","DRb/WeakIdConv/WeakSet.html","",""],["Object","","Object.html","",""],["[]","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-5B-5D","(key)","<p>A convenience method to access the values like a Hash\n"],["[]","DRb::GW","DRb/GW.html#method-i-5B-5D","(key)","<p>Retrieves <code>key</code> from the GW\n"],["[]=","DRb::GW","DRb/GW.html#method-i-5B-5D-3D","(key, v)","<p>Stores value <code>v</code> at <code>key</code> in the GW\n"],["__drbref","DRb::DRbObject","DRb/DRbObject.html#method-i-__drbref","()","<p>Get the reference of the object, if local.\n"],["__drbref","DRb::DRbObject","DRb/DRbObject.html#method-i-__drbref","()","<p>Get the reference of the object, if local.\n"],["__drburi","DRb::DRbObject","DRb/DRbObject.html#method-i-__drburi","()","<p>Get the URI of the remote object.\n"],["__drburi","DRb::DRbObject","DRb/DRbObject.html#method-i-__drburi","()","<p>Get the URI of the remote object.\n"],["_dump","DRb::DRbObject","DRb/DRbObject.html#method-i-_dump","(lv)","<p>Marshall this object.\n<p>The URI and ref of the object are marshalled.\n"],["_dump","DRb::DRbObject","DRb/DRbObject.html#method-i-_dump","(lv)","<p>Marshall this object.\n<p>The URI and ref of the object are marshalled.\n"],["_execute","DRb::ThreadObject","DRb/ThreadObject.html#method-i-_execute","()",""],["_load","DRb::DRbObject","DRb/DRbObject.html#method-c-_load","(s)","<p>Unmarshall a marshalled DRbObject.\n<p>If the referenced object is located within the local server, then the …\n"],["_load","DRb::DRbObject","DRb/DRbObject.html#method-c-_load","(s)","<p>Unmarshall a marshalled DRbObject.\n<p>If the referenced object is located within the local server, then the …\n"],["accept","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-accept","(tcp)","<p>Accept connection to IO <code>tcp</code>, with context of the current certificate configuration\n"],["add","ACL::ACLList","ACL/ACLList.html#method-i-add","(str)","<p>Adds <code>str</code> as an ACLEntry in this list\n"],["add","DRb::WeakIdConv::WeakSet","DRb/WeakIdConv/WeakSet.html#method-i-add","(obj)",""],["add_protocol","DRb::DRbProtocol","DRb/DRbProtocol.html#method-i-add_protocol","(prot)","<p>Add a new protocol to the DRbProtocol module.\n"],["add_protocol","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-add_protocol","(prot)","<p>Add a new protocol to the DRbProtocol module.\n"],["alive?","DRb::DRbServer","DRb/DRbServer.html#method-i-alive-3F","()","<p>Is this server alive?\n"],["alive?","DRb::ExtServ","DRb/ExtServ.html#method-i-alive-3F","()",""],["alive?","DRb::ThreadObject","DRb/ThreadObject.html#method-i-alive-3F","()",""],["allow_addr?","ACL","ACL.html#method-i-allow_addr-3F","(addr)","<p>Allow connections from addrinfo <code>addr</code>?  It must be formatted like Socket#peeraddr:\n\n<pre>[&quot;AF_INET&quot;, 10, &quot;lc630&quot;, ...</pre>\n"],["allow_socket?","ACL","ACL.html#method-i-allow_socket-3F","(soc)","<p>Allow connections from Socket <code>soc</code>?\n"],["any_to_s","DRb::DRbServer","DRb/DRbServer.html#method-i-any_to_s","(obj)","<p>Coerce an object to a string, providing our own representation if to_s is not defined for the object. …\n"],["check_insecure_method","DRb::DRbServer","DRb/DRbServer.html#method-i-check_insecure_method","(obj, msg_id)","<p>Check that a method is callable via dRuby.\n<p><code>obj</code> is the object we want to invoke the method on. <code>msg_id</code> is …\n"],["command","DRb::ExtServManager","DRb/ExtServManager.html#method-c-command","()",""],["command=","DRb::ExtServManager","DRb/ExtServManager.html#method-c-command-3D","(cmd)",""],["config","DRb","DRb.html#method-i-config","()","<p>Get the configuration of the current server.\n<p>If there is no current server, this returns the default configuration. …\n"],["config","DRb","DRb.html#method-c-config","()","<p>Get the configuration of the current server.\n<p>If there is no current server, this returns the default configuration. …\n"],["connect","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-connect","(tcp)","<p>Connect to IO <code>tcp</code>, with context of the current certificate configuration\n"],["current_server","DRb","DRb.html#method-i-current_server","()","<p>Get the ‘current’ server.\n<p>In the context of execution taking place within the main thread of a …\n"],["current_server","DRb","DRb.html#method-c-current_server","()","<p>Get the ‘current’ server.\n<p>In the context of execution taking place within the main thread of a …\n"],["default_acl","DRb::DRbServer","DRb/DRbServer.html#method-c-default_acl","(acl)","<p>Set the default access control list to <code>acl</code>.  The default ACL is <code>nil</code>.\n<p>See also DRb::ACL and #new()\n"],["default_argc_limit","DRb::DRbServer","DRb/DRbServer.html#method-c-default_argc_limit","(argc)","<p>Set the default value for the :argc_limit option.\n<p>See #new().  The initial default value is 256.\n"],["default_id_conv","DRb::DRbServer","DRb/DRbServer.html#method-c-default_id_conv","(idconv)","<p>Set the default value for the :id_conv option.\n<p>See #new().  The initial default value is a DRbIdConv instance. …\n"],["default_load_limit","DRb::DRbServer","DRb/DRbServer.html#method-c-default_load_limit","(sz)","<p>Set the default value for the :load_limit option.\n<p>See #new().  The initial default value is 25 MB.\n"],["dot_pat","ACL::ACLEntry","ACL/ACLEntry.html#method-i-dot_pat","(str)","<p>Creates a Regexp to match an address.\n"],["dot_pat_str","ACL::ACLEntry","ACL/ACLEntry.html#method-i-dot_pat_str","(str)","<p>Creates a regular expression to match IPv4 addresses\n"],["error_print","DRb::DRbServer","DRb/DRbServer.html#method-i-error_print","(exception)",""],["exception","DRb::DRbUnknown","DRb/DRbUnknown.html#method-i-exception","()","<p>Create a DRbUnknownError exception containing this object.\n"],["fetch","DRb::WeakIdConv::WeakSet","DRb/WeakIdConv/WeakSet.html#method-i-fetch","(ref)",""],["fetch_server","DRb","DRb.html#method-i-fetch_server","(uri)","<p>Retrieves the server with the given <code>uri</code>.\n<p>See also regist_server and remove_server.\n"],["fetch_server","DRb","DRb.html#method-c-fetch_server","(uri)","<p>Retrieves the server with the given <code>uri</code>.\n<p>See also regist_server and remove_server.\n"],["front","DRb","DRb.html#method-i-front","()","<p>Get the front object of the current server.\n<p>This raises a DRbServerNotFound error if there is no current …\n"],["front","DRb","DRb.html#method-c-front","()","<p>Get the front object of the current server.\n<p>This raises a DRbServerNotFound error if there is no current …\n"],["front","DRb::ExtServ","DRb/ExtServ.html#method-i-front","()",""],["here?","DRb","DRb.html#method-i-here-3F","(uri)","<p>Is <code>uri</code> the URI for the current local server?\n"],["here?","DRb","DRb.html#method-c-here-3F","(uri)","<p>Is <code>uri</code> the URI for the current local server?\n"],["here?","DRb::DRbServer","DRb/DRbServer.html#method-i-here-3F","(uri)","<p>Is <code>uri</code> the URI for this server?\n"],["insecure_method?","DRb::DRbServer","DRb/DRbServer.html#method-i-insecure_method-3F","(msg_id)","<p>Has a method been included in the list of insecure methods?\n"],["install_acl","DRb","DRb.html#method-i-install_acl","(acl)","<p>Set the default ACL to <code>acl</code>.\n<p>See DRb::DRbServer.default_acl.\n"],["install_acl","DRb","DRb.html#method-c-install_acl","(acl)","<p>Set the default ACL to <code>acl</code>.\n<p>See DRb::DRbServer.default_acl.\n"],["install_id_conv","DRb","DRb.html#method-i-install_id_conv","(idconv)","<p>Set the default id conversion object.\n<p>This is expected to be an instance such as DRb::DRbIdConv that responds …\n"],["install_id_conv","DRb","DRb.html#method-c-install_id_conv","(idconv)","<p>Set the default id conversion object.\n<p>This is expected to be an instance such as DRb::DRbIdConv that responds …\n"],["install_list","ACL","ACL.html#method-i-install_list","(list)","<p>Adds <code>list</code> of ACL entries to this ACL.\n"],["invoke_service","DRb::ExtServManager","DRb/ExtServManager.html#method-i-invoke_service","(name)",""],["invoke_service_command","DRb::ExtServManager","DRb/ExtServManager.html#method-i-invoke_service_command","(name, command)",""],["invoke_thread","DRb::ExtServManager","DRb/ExtServManager.html#method-i-invoke_thread","()",""],["kill","DRb::ThreadObject","DRb/ThreadObject.html#method-i-kill","()",""],["main_loop","DRb::DRbServer","DRb/DRbServer.html#method-i-main_loop","()","<p>The main loop performed by a DRbServer’s internal thread.\n<p>Accepts a connection from a client, and …\n"],["make_pool","DRb::DRbConn","DRb/DRbConn.html#method-c-make_pool","()",""],["match","ACL::ACLEntry","ACL/ACLEntry.html#method-i-match","(addr)","<p>Matches <code>addr</code> against this entry.\n"],["match","ACL::ACLList","ACL/ACLList.html#method-i-match","(addr)","<p>Matches <code>addr</code> against each ACLEntry in this list.\n"],["method_missing","DRb::DRbObject","DRb/DRbObject.html#method-i-method_missing","(msg_id, *a, &b)",""],["method_missing","DRb::DRbObject","DRb/DRbObject.html#method-i-method_missing","(msg_id, *a, &b)",""],["method_missing","DRb::ThreadObject","DRb/ThreadObject.html#method-i-method_missing","(msg, *arg, &blk)",""],["new","ACL","ACL.html#method-c-new","(list=nil, order = DENY_ALLOW)","<p>Creates a new ACL from <code>list</code> with an evaluation <code>order</code> of DENY_ALLOW or ALLOW_DENY.\n<p>An ACL <code>list</code> is an Array …\n"],["new","ACL::ACLEntry","ACL/ACLEntry.html#method-c-new","(str)","<p>Creates a new entry using <code>str</code>.\n<p><code>str</code> may be “*” or “all” to match any address, an IP …\n"],["new","ACL::ACLList","ACL/ACLList.html#method-c-new","()","<p>Creates an empty ACLList\n"],["new","DRb::DRbArray","DRb/DRbArray.html#method-c-new","(ary)","<p>Creates a new DRbArray that either dumps or wraps all the items in the Array <code>ary</code> so they can be loaded …\n"],["new","DRb::DRbObject","DRb/DRbObject.html#method-c-new","(obj, uri=nil)","<p>Create a new remote object stub.\n<p><code>obj</code> is the (local) object we want to create a stub for.  Normally this …\n"],["new","DRb::DRbObject","DRb/DRbObject.html#method-c-new","(obj, uri=nil)","<p>Create a new remote object stub.\n<p><code>obj</code> is the (local) object we want to create a stub for.  Normally this …\n"],["new","DRb::DRbRemoteError","DRb/DRbRemoteError.html#method-c-new","(error)","<p>Creates a new remote error that wraps the Exception <code>error</code>\n"],["new","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-new","(uri, soc, config, is_established)","<p>Create a DRb::DRbSSLSocket instance.\n<p><code>uri</code> is the URI we are connected to. <code>soc</code> is the tcp socket we are …\n"],["new","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-c-new","(config)","<p>Create a new DRb::DRbSSLSocket::SSLConfig instance\n<p>The DRb::DRbSSLSocket will take either a <code>config</code> Hash …\n"],["new","DRb::DRbServer","DRb/DRbServer.html#method-c-new","(uri=nil, front=nil, config_or_acl=nil)","<p>Create a new DRbServer instance.\n<p><code>uri</code> is the URI to bind to.  This is normally of the form ‘druby://&lt;hostname&gt;:&lt;port&gt;’ …\n"],["new","DRb::DRbUnknown","DRb/DRbUnknown.html#method-c-new","(err, buf)","<p>Create a new DRbUnknown object.\n<p><code>buf</code> is a string containing a marshalled object that could not be unmarshalled. …\n"],["new","DRb::DRbUnknownError","DRb/DRbUnknownError.html#method-c-new","(unknown)","<p>Create a new DRbUnknownError for the DRb::DRbUnknown object <code>unknown</code>\n"],["new","DRb::ExtServ","DRb/ExtServ.html#method-c-new","(there, name, server=nil)",""],["new","DRb::ExtServManager","DRb/ExtServManager.html#method-c-new","()",""],["new","DRb::GW","DRb/GW.html#method-c-new","()","<p>Creates a new GW\n"],["new","DRb::ThreadObject","DRb/ThreadObject.html#method-c-new","(&blk)",""],["new","DRb::TimerIdConv","DRb/TimerIdConv.html#method-c-new","(keeping=600)","<p>Creates a new TimerIdConv which will hold objects for <code>keeping</code> seconds.\n"],["new","DRb::WeakIdConv","DRb/WeakIdConv.html#method-c-new","()",""],["new","DRb::WeakIdConv::WeakSet","DRb/WeakIdConv/WeakSet.html#method-c-new","()",""],["new_with","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with","(uri, ref)","<p>Creates a DRb::DRbObject given the reference information to the remote host <code>uri</code> and object <code>ref</code>.\n"],["new_with","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with","(uri, ref)","<p>Creates a DRb::DRbObject given the reference information to the remote host <code>uri</code> and object <code>ref</code>.\n"],["new_with_uri","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with_uri","(uri)","<p>Create a new DRbObject from a URI alone.\n"],["new_with_uri","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with_uri","(uri)","<p>Create a new DRbObject from a URI alone.\n"],["notify_observers","DRb::DRbObservable","DRb/DRbObservable.html#method-i-notify_observers","(*arg)","<p>Notifies observers of a change in state.  See also Observable#notify_observers\n"],["open","DRb::DRbProtocol","DRb/DRbProtocol.html#method-i-open","(uri, config, first=true)","<p>Open a client connection to <code>uri</code> with the configuration <code>config</code>.\n<p>The DRbProtocol module asks each registered …\n"],["open","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-open","(uri, config, first=true)","<p>Open a client connection to <code>uri</code> with the configuration <code>config</code>.\n<p>The DRbProtocol module asks each registered …\n"],["open","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-open","(uri, config)","<p>Return an DRb::DRbSSLSocket instance as a client-side connection, with the SSL connected.  This is called …\n"],["open_server","DRb::DRbProtocol","DRb/DRbProtocol.html#method-i-open_server","(uri, config, first=true)","<p>Open a server listening for connections at <code>uri</code> with configuration <code>config</code>.\n<p>The DRbProtocol module asks …\n"],["open_server","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-open_server","(uri, config, first=true)","<p>Open a server listening for connections at <code>uri</code> with configuration <code>config</code>.\n<p>The DRbProtocol module asks …\n"],["open_server","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-open_server","(uri, config)","<p>Returns a DRb::DRbSSLSocket instance as a server-side connection, with the SSL connected.  This is called …\n"],["regist","DRb::ExtServManager","DRb/ExtServManager.html#method-i-regist","(name, ro)",""],["regist_server","DRb","DRb.html#method-i-regist_server","(server)","<p>Registers <code>server</code> with DRb.\n<p>This is called when a new DRb::DRbServer is created.\n<p>If there is no primary …\n"],["regist_server","DRb","DRb.html#method-c-regist_server","(server)","<p>Registers <code>server</code> with DRb.\n<p>This is called when a new DRb::DRbServer is created.\n<p>If there is no primary …\n"],["register","DRb::ExtServManager","DRb/ExtServManager.html#method-i-register","(name, ro)",""],["reload","DRb::DRbUnknown","DRb/DRbUnknown.html#method-i-reload","()","<p>Attempt to load the wrapped marshalled object again.\n<p>If the class of the object is now known locally, …\n"],["remove_server","DRb","DRb.html#method-i-remove_server","(server)","<p>Removes <code>server</code> from the list of registered servers.\n"],["remove_server","DRb","DRb.html#method-c-remove_server","(server)","<p>Removes <code>server</code> from the list of registered servers.\n"],["respond_to?","DRb::DRbObject","DRb/DRbObject.html#method-i-respond_to-3F","(msg_id, priv=false)","<p>Routes respond_to? to the referenced remote object.\n"],["respond_to?","DRb::DRbObject","DRb/DRbObject.html#method-i-respond_to-3F","(msg_id, priv=false)","<p>Routes respond_to? to the referenced remote object.\n"],["run","DRb::DRbServer","DRb/DRbServer.html#method-i-run","()","<p>Starts the DRb main loop in a new thread.\n"],["service","DRb::ExtServManager","DRb/ExtServManager.html#method-i-service","(name)",""],["setup_certificate","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-setup_certificate","()","<p>Ensures that :SSLCertificate and :SSLPrivateKey have been provided or that a new certificate is generated …\n"],["setup_ssl_context","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-setup_ssl_context","()","<p>Establish the OpenSSL::SSL::SSLContext with the configuration parameters provided.\n"],["shutdown","DRb::DRbServer","DRb/DRbServer.html#method-i-shutdown","()",""],["start_service","DRb","DRb.html#method-i-start_service","(uri=nil, front=nil, config=nil)","<p>Start a dRuby server locally.\n<p>The new dRuby server will become the primary server, even if another server …\n"],["start_service","DRb","DRb.html#method-c-start_service","(uri=nil, front=nil, config=nil)","<p>Start a dRuby server locally.\n<p>The new dRuby server will become the primary server, even if another server …\n"],["stop_pool","DRb::DRbConn","DRb/DRbConn.html#method-c-stop_pool","()",""],["stop_service","DRb","DRb.html#method-i-stop_service","()","<p>Stop the local dRuby server.\n<p>This operates on the primary server.  If there is no primary server currently …\n"],["stop_service","DRb","DRb.html#method-c-stop_service","()","<p>Stop the local dRuby server.\n<p>This operates on the primary server.  If there is no primary server currently …\n"],["stop_service","DRb::DRbServer","DRb/DRbServer.html#method-i-stop_service","()","<p>Stop this server.\n"],["stop_service","DRb::ExtServ","DRb/ExtServ.html#method-i-stop_service","()",""],["thread","DRb","DRb.html#method-i-thread","()","<p>Get the thread of the primary server.\n<p>This returns nil if there is no primary server.  See #primary_server …\n"],["thread","DRb","DRb.html#method-c-thread","()","<p>Get the thread of the primary server.\n<p>This returns nil if there is no primary server.  See #primary_server …\n"],["to_id","DRb","DRb.html#method-i-to_id","(obj)","<p>Get a reference id for an object using the current server.\n<p>This raises a DRbServerNotFound error if there …\n"],["to_id","DRb","DRb.html#method-c-to_id","(obj)","<p>Get a reference id for an object using the current server.\n<p>This raises a DRbServerNotFound error if there …\n"],["to_id","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_id","(obj)","<p>Convert an object into a reference id.\n<p>This implementation returns the object’s __id__ in the local …\n"],["to_id","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_id","(obj)","<p>Convert an object into a reference id.\n<p>This implementation returns the object’s __id__ in the local …\n"],["to_id","DRb::DRbServer","DRb/DRbServer.html#method-i-to_id","(obj)","<p>Convert a local object to a dRuby reference.\n"],["to_obj","DRb","DRb.html#method-i-to_obj","(ref)","<p>Convert a reference into an object using the current server.\n<p>This raises a DRbServerNotFound error if …\n"],["to_obj","DRb","DRb.html#method-c-to_obj","(ref)","<p>Convert a reference into an object using the current server.\n<p>This raises a DRbServerNotFound error if …\n"],["to_obj","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_obj","(ref)","<p>Convert an object reference id to an object.\n<p>This implementation looks up the reference id in the local …\n"],["to_obj","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_obj","(ref)","<p>Convert an object reference id to an object.\n<p>This implementation looks up the reference id in the local …\n"],["to_obj","DRb::DRbServer","DRb/DRbServer.html#method-i-to_obj","(ref)","<p>Convert a dRuby reference to the local object it refers to.\n"],["unregist","DRb::ExtServManager","DRb/ExtServManager.html#method-i-unregist","(name)",""],["unregister","DRb::ExtServManager","DRb/ExtServManager.html#method-i-unregister","(name)",""],["uri","DRb","DRb.html#method-i-uri","()","<p>Get the URI defining the local dRuby space.\n<p>This is the URI of the current server.  See #current_server …\n"],["uri","DRb","DRb.html#method-c-uri","()","<p>Get the URI defining the local dRuby space.\n<p>This is the URI of the current server.  See #current_server …\n"],["uri_option","DRb::DRbProtocol","DRb/DRbProtocol.html#method-i-uri_option","(uri, config, first=true)","<p>Parse <code>uri</code> into a [uri, option] pair.\n<p>The DRbProtocol module asks each registered protocol in turn to try …\n"],["uri_option","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-uri_option","(uri, config, first=true)","<p>Parse <code>uri</code> into a [uri, option] pair.\n<p>The DRbProtocol module asks each registered protocol in turn to try …\n"],["verbose","DRb::DRbServer","DRb/DRbServer.html#method-c-verbose","()","<p>Get the default value of the :verbose option.\n"],["verbose","DRb::DRbServer","DRb/DRbServer.html#method-i-verbose","()","<p>Get whether the server is in verbose mode.\n<p>In verbose mode, failed calls are logged to stdout.\n"],["verbose=","DRb::DRbServer","DRb/DRbServer.html#method-c-verbose-3D","(on)","<p>Set the default value of the :verbose option.\n<p>See #new().  The initial default value is false.\n"],["verbose=","DRb::DRbServer","DRb/DRbServer.html#method-i-verbose-3D","(v)","<p>Set whether to operate in verbose mode.\n<p>In verbose mode, failed calls are logged to stdout.\n"]]}}