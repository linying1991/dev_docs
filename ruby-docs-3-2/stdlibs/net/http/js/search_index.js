var search_data = {"index":{"searchIndex":["net","http","copy","delete","get","head","lock","mkcol","move","options","patch","post","propfind","proppatch","put","trace","unlock","httpaccepted","httpalreadyreported","httpbadgateway","httpbadrequest","httpbadresponse","httpclienterror","httpclientexception","httpconflict","httpcontinue","httpcreated","httpearlyhints","httperror","httpexceptions","httpexpectationfailed","httpfaileddependency","httpfatalerror","httpforbidden","httpfound","httpgatewaytimeout","httpgatewaytimeout","httpgenericrequest","httpgone","httpheader","httpheadersyntaxerror","httpimused","httpinformation","httpinsufficientstorage","httpinternalservererror","httplengthrequired","httplocked","httploopdetected","httpmethodnotallowed","httpmisdirectedrequest","httpmovedpermanently","httpmovedtemporarily","httpmultistatus","httpmultiplechoice","httpmultiplechoices","httpnetworkauthenticationrequired","httpnocontent","httpnonauthoritativeinformation","httpnotacceptable","httpnotextended","httpnotfound","httpnotimplemented","httpnotmodified","httpok","httppartialcontent","httppayloadtoolarge","httppaymentrequired","httppermanentredirect","httppreconditionfailed","httppreconditionrequired","httpprocessing","httpproxyauthenticationrequired","httprangenotsatisfiable","httpredirection","httprequest","httprequestentitytoolarge","httprequestheaderfieldstoolarge","httprequesttimeout","httprequesttimeout","httprequesturitoolarge","httprequesturitoolong","httprequestedrangenotsatisfiable","httpresetcontent","httpresponse","httpretriableerror","httpseeother","httpservererror","httpserviceunavailable","httpsuccess","httpswitchprotocol","httptemporaryredirect","httptoomanyrequests","httpuritoolong","httpunauthorized","httpunavailableforlegalreasons","httpunknownresponse","httpunprocessableentity","httpunsupportedmediatype","httpupgraderequired","httpuseproxy","httpvariantalsonegotiates","httpversionnotsupported","d()","[]()","[]=()","active?()","add_field()","addr_port()","append_field_value()","basic_auth()","basic_encode()","begin_transport()","body()","body=()","body=()","body_encoding=()","body_permitted?()","body_stream=()","canonical_each()","capitalize()","chunked?()","connect()","connection_close?()","connection_keep_alive?()","content_length()","content_length=()","content_range()","content_type()","content_type=()","continue_timeout=()","copy()","debug()","default_port()","delete()","delete()","do_finish()","do_start()","each()","each_capitalized()","each_capitalized_name()","each_header()","each_key()","each_name()","each_response_header()","each_value()","edit_path()","encode_multipart_form_data()","end_transport()","entity()","fetch()","finish()","flush_buffer()","form_data=()","get()","get()","get2()","get_fields()","get_print()","get_response()","head()","head2()","http_default_port()","https_default_port()","inspect()","inspect()","inspect()","ipaddr()","ipaddr=()","is_version_1_2?()","keep_alive?()","key?()","lock()","main_type()","max_retries=()","mkcol()","move()","new()","new()","newobj()","on_connect()","options()","patch()","peer_cert()","post()","post()","post2()","post_form()","propfind()","proppatch()","proxy?()","proxy_address()","proxy_basic_auth()","proxy_class?()","proxy_from_env?()","proxy_pass()","proxy_port()","proxy_user()","proxyaddr()","proxyport()","put()","quote_string()","range()","range=()","range_length()","read_body()","read_status_line()","read_timeout=()","request()","request_body_permitted?()","request_get()","request_head()","request_post()","response_body_encoding=()","response_body_permitted?()","response_class()","send_entity()","send_request()","send_request_with_body()","send_request_with_body_data()","send_request_with_body_stream()","set_content_type()","set_debug_output()","set_field()","set_form()","set_form_data()","set_range()","sspi_auth()","sspi_auth?()","start()","start()","started?()","sub_type()","supply_default_content_type()","to_hash()","trace()","transport_request()","type_params()","unescape()","unlock()","use_ssl=()","use_ssl?()","value()","version_1_2()","version_1_2?()","wait_for_continue()","write_header()","write_timeout=()"],"longSearchIndex":["net","net::http","net::http::copy","net::http::delete","net::http::get","net::http::head","net::http::lock","net::http::mkcol","net::http::move","net::http::options","net::http::patch","net::http::post","net::http::propfind","net::http::proppatch","net::http::put","net::http::trace","net::http::unlock","net::httpaccepted","net::httpalreadyreported","net::httpbadgateway","net::httpbadrequest","net::httpbadresponse","net::httpclienterror","net::httpclientexception","net::httpconflict","net::httpcontinue","net::httpcreated","net::httpearlyhints","net::httperror","net::httpexceptions","net::httpexpectationfailed","net::httpfaileddependency","net::httpfatalerror","net::httpforbidden","net::httpfound","net::httpgatewaytimeout","net::httpgatewaytimeout","net::httpgenericrequest","net::httpgone","net::httpheader","net::httpheadersyntaxerror","net::httpimused","net::httpinformation","net::httpinsufficientstorage","net::httpinternalservererror","net::httplengthrequired","net::httplocked","net::httploopdetected","net::httpmethodnotallowed","net::httpmisdirectedrequest","net::httpmovedpermanently","net::httpmovedtemporarily","net::httpmultistatus","net::httpmultiplechoice","net::httpmultiplechoices","net::httpnetworkauthenticationrequired","net::httpnocontent","net::httpnonauthoritativeinformation","net::httpnotacceptable","net::httpnotextended","net::httpnotfound","net::httpnotimplemented","net::httpnotmodified","net::httpok","net::httppartialcontent","net::httppayloadtoolarge","net::httppaymentrequired","net::httppermanentredirect","net::httppreconditionfailed","net::httppreconditionrequired","net::httpprocessing","net::httpproxyauthenticationrequired","net::httprangenotsatisfiable","net::httpredirection","net::httprequest","net::httprequestentitytoolarge","net::httprequestheaderfieldstoolarge","net::httprequesttimeout","net::httprequesttimeout","net::httprequesturitoolarge","net::httprequesturitoolong","net::httprequestedrangenotsatisfiable","net::httpresetcontent","net::httpresponse","net::httpretriableerror","net::httpseeother","net::httpservererror","net::httpserviceunavailable","net::httpsuccess","net::httpswitchprotocol","net::httptemporaryredirect","net::httptoomanyrequests","net::httpuritoolong","net::httpunauthorized","net::httpunavailableforlegalreasons","net::httpunknownresponse","net::httpunprocessableentity","net::httpunsupportedmediatype","net::httpupgraderequired","net::httpuseproxy","net::httpvariantalsonegotiates","net::httpversionnotsupported","net::http#d()","net::httpheader#[]()","net::httpheader#[]=()","net::http#active?()","net::httpheader#add_field()","net::http#addr_port()","net::httpheader#append_field_value()","net::httpheader#basic_auth()","net::httpheader#basic_encode()","net::http#begin_transport()","net::httpresponse#body()","net::httpgenericrequest#body=()","net::httpresponse#body=()","net::httpresponse#body_encoding=()","net::httpresponse::body_permitted?()","net::httpgenericrequest#body_stream=()","net::httpheader#canonical_each()","net::httpheader#capitalize()","net::httpheader#chunked?()","net::http#connect()","net::httpheader#connection_close?()","net::httpheader#connection_keep_alive?()","net::httpheader#content_length()","net::httpheader#content_length=()","net::httpheader#content_range()","net::httpheader#content_type()","net::httpheader#content_type=()","net::http#continue_timeout=()","net::http#copy()","net::http#debug()","net::http::default_port()","net::http#delete()","net::httpheader#delete()","net::http#do_finish()","net::http#do_start()","net::httpheader#each()","net::httpheader#each_capitalized()","net::httpheader#each_capitalized_name()","net::httpheader#each_header()","net::httpheader#each_key()","net::httpheader#each_name()","net::httpresponse::each_response_header()","net::httpheader#each_value()","net::http#edit_path()","net::httpgenericrequest#encode_multipart_form_data()","net::http#end_transport()","net::httpresponse#entity()","net::httpheader#fetch()","net::http#finish()","net::httpgenericrequest#flush_buffer()","net::httpheader#form_data=()","net::http::get()","net::http#get()","net::http#get2()","net::httpheader#get_fields()","net::http::get_print()","net::http::get_response()","net::http#head()","net::http#head2()","net::http::http_default_port()","net::http::https_default_port()","net::http#inspect()","net::httpgenericrequest#inspect()","net::httpresponse#inspect()","net::http#ipaddr()","net::http#ipaddr=()","net::http::is_version_1_2?()","net::http#keep_alive?()","net::httpheader#key?()","net::http#lock()","net::httpheader#main_type()","net::http#max_retries=()","net::http#mkcol()","net::http#move()","net::http::new()","net::httprequest::new()","net::http::newobj()","net::http#on_connect()","net::http#options()","net::http#patch()","net::http#peer_cert()","net::http::post()","net::http#post()","net::http#post2()","net::http::post_form()","net::http#propfind()","net::http#proppatch()","net::http#proxy?()","net::http#proxy_address()","net::httpheader#proxy_basic_auth()","net::http::proxy_class?()","net::http#proxy_from_env?()","net::http#proxy_pass()","net::http#proxy_port()","net::http#proxy_user()","net::http#proxyaddr()","net::http#proxyport()","net::http#put()","net::httpgenericrequest#quote_string()","net::httpheader#range()","net::httpheader#range=()","net::httpheader#range_length()","net::httpresponse#read_body()","net::httpresponse::read_status_line()","net::http#read_timeout=()","net::http#request()","net::httpgenericrequest#request_body_permitted?()","net::http#request_get()","net::http#request_head()","net::http#request_post()","net::http#response_body_encoding=()","net::httpgenericrequest#response_body_permitted?()","net::httpresponse::response_class()","net::http#send_entity()","net::http#send_request()","net::httpgenericrequest#send_request_with_body()","net::httpgenericrequest#send_request_with_body_data()","net::httpgenericrequest#send_request_with_body_stream()","net::httpheader#set_content_type()","net::http#set_debug_output()","net::httpheader#set_field()","net::httpheader#set_form()","net::httpheader#set_form_data()","net::httpheader#set_range()","net::http#sspi_auth()","net::http#sspi_auth?()","net::http::start()","net::http#start()","net::http#started?()","net::httpheader#sub_type()","net::httpgenericrequest#supply_default_content_type()","net::httpheader#to_hash()","net::http#trace()","net::http#transport_request()","net::httpheader#type_params()","net::http#unescape()","net::http#unlock()","net::http#use_ssl=()","net::http#use_ssl?()","net::httpresponse#value()","net::http::version_1_2()","net::http::version_1_2?()","net::httpgenericrequest#wait_for_continue()","net::httpgenericrequest#write_header()","net::http#write_timeout=()"],"info":[["Net","","Net.html","",""],["Net::HTTP","","Net/HTTP.html","","<p>Class Net::HTTP provides a rich library that implements the client in a client-server model that uses …\n"],["Net::HTTP::Copy","","Net/HTTP/Copy.html","","<p>Class for representing WebDAV method COPY:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Delete","","Net/HTTP/Delete.html","","<p>Class for representing HTTP method DELETE:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Get","","Net/HTTP/Get.html","","<p>Class for representing HTTP method GET:\n\n<pre>require &#39;net/http&#39;\nuri = URI(&#39;http://example.com&#39;)\nhostname = ...</pre>\n"],["Net::HTTP::Head","","Net/HTTP/Head.html","","<p>Class for representing HTTP method HEAD:\n\n<pre>require &#39;net/http&#39;\nuri = URI(&#39;http://example.com&#39;)\nhostname = ...</pre>\n"],["Net::HTTP::Lock","","Net/HTTP/Lock.html","","<p>Class for representing WebDAV method LOCK:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Mkcol","","Net/HTTP/Mkcol.html","","<p>Class for representing WebDAV method MKCOL:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Move","","Net/HTTP/Move.html","","<p>Class for representing WebDAV method MOVE:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Options","","Net/HTTP/Options.html","","<p>Class for representing HTTP method OPTIONS:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Patch","","Net/HTTP/Patch.html","","<p>Class for representing HTTP method PATCH:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Post","","Net/HTTP/Post.html","","<p>Class for representing HTTP method POST:\n\n<pre>require &#39;net/http&#39;\nuri = URI(&#39;http://example.com&#39;)\nhostname = ...</pre>\n"],["Net::HTTP::Propfind","","Net/HTTP/Propfind.html","","<p>Class for representing WebDAV method PROPFIND:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Proppatch","","Net/HTTP/Proppatch.html","","<p>Class for representing WebDAV method PROPPATCH:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Put","","Net/HTTP/Put.html","","<p>Class for representing HTTP method PUT:\n\n<pre>require &#39;net/http&#39;\nuri = URI(&#39;http://example.com&#39;)\nhostname = ...</pre>\n"],["Net::HTTP::Trace","","Net/HTTP/Trace.html","","<p>Class for representing HTTP method TRACE:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTP::Unlock","","Net/HTTP/Unlock.html","","<p>Class for representing WebDAV method UNLOCK:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;net/http&#39;</span>\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&#39;http://example.com&#39;</span>)\n<span class=\"ruby-identifier\">hostname</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Net::HTTPAccepted","","Net/HTTPAccepted.html","","<p>Response class for <code>Accepted</code> responses (status code 202).\n<p>The <code>Accepted</code> response indicates that the server …\n"],["Net::HTTPAlreadyReported","","Net/HTTPAlreadyReported.html","","<p>Response class for <code>Already Reported (WebDAV)</code> responses (status code 208).\n<p>The <code>Already Reported (WebDAV)</code> …\n"],["Net::HTTPBadGateway","","Net/HTTPBadGateway.html","","<p>Response class for <code>Bad Gateway</code> responses (status code 502).\n<p>The server was acting as a gateway or proxy …\n"],["Net::HTTPBadRequest","","Net/HTTPBadRequest.html","","<p>Response class for <code>Bad Request</code> responses (status code 400).\n<p>The server cannot or will not process the …\n"],["Net::HTTPBadResponse","","Net/HTTPBadResponse.html","",""],["Net::HTTPClientError","","Net/HTTPClientError.html","","<p>Parent class for client error (4xx) HTTP response classes.\n<p>A client error response indicates that the …\n"],["Net::HTTPClientException","","Net/HTTPClientException.html","",""],["Net::HTTPConflict","","Net/HTTPConflict.html","","<p>Response class for <code>Conflict</code> responses (status code 409).\n<p>The request could not be processed because of …\n"],["Net::HTTPContinue","","Net/HTTPContinue.html","","<p>Response class for <code>Continue</code> responses (status code 100).\n<p>A <code>Continue</code> response indicates that the server …\n"],["Net::HTTPCreated","","Net/HTTPCreated.html","","<p>Response class for <code>Created</code> responses (status code 201).\n<p>The <code>Created</code> response indicates that the server …\n"],["Net::HTTPEarlyHints","","Net/HTTPEarlyHints.html","","<p>Response class for <code>Early Hints</code> responses (status code 103).\n<p>The <code>Early Hints</code> indicates that the server …\n"],["Net::HTTPError","","Net/HTTPError.html","",""],["Net::HTTPExceptions","","Net/HTTPExceptions.html","","<p>Net::HTTP exception class. You cannot use Net::HTTPExceptions directly; instead, you must use its subclasses. …\n"],["Net::HTTPExpectationFailed","","Net/HTTPExpectationFailed.html","","<p>Response class for <code>Expectation Failed</code> responses (status code 417).\n<p>The server cannot meet the requirements …\n"],["Net::HTTPFailedDependency","","Net/HTTPFailedDependency.html","","<p>Response class for <code>Failed Dependency (WebDAV)</code> responses (status code 424).\n<p>The request failed because …\n"],["Net::HTTPFatalError","","Net/HTTPFatalError.html","",""],["Net::HTTPForbidden","","Net/HTTPForbidden.html","","<p>Response class for <code>Forbidden</code> responses (status code 403).\n<p>The request contained valid data and was understood …\n"],["Net::HTTPFound","","Net/HTTPFound.html","","<p>Response class for <code>Found</code> responses (status code 302).\n<p>The <code>Found</code> response indicates that the client should …\n"],["Net::HTTPGatewayTimeOut","","Net/HTTPGatewayTimeout.html","","<p>Response class for <code>Gateway Timeout</code> responses (status code 504).\n<p>The server was acting as a gateway or …\n"],["Net::HTTPGatewayTimeout","","Net/HTTPGatewayTimeout.html","","<p>Response class for <code>Gateway Timeout</code> responses (status code 504).\n<p>The server was acting as a gateway or …\n"],["Net::HTTPGenericRequest","","Net/HTTPGenericRequest.html","","<p>HTTPGenericRequest is the parent of the Net::HTTPRequest class.\n<p>Do not use this directly; instead, use …\n"],["Net::HTTPGone","","Net/HTTPGone.html","","<p>Response class for <code>Gone</code> responses (status code 410).\n<p>The resource requested was previously in use but …\n"],["Net::HTTPHeader","","Net/HTTPHeader.html","","<p>The HTTPHeader module provides access to HTTP headers.\n<p>The module is included in:\n<p>Net::HTTPGenericRequest …\n"],["Net::HTTPHeaderSyntaxError","","Net/HTTPHeaderSyntaxError.html","",""],["Net::HTTPIMUsed","","Net/HTTPIMUsed.html","","<p>Response class for <code>IM Used</code> responses (status code 226).\n<p>The <code>IM Used</code> response indicates that the server …\n"],["Net::HTTPInformation","","Net/HTTPInformation.html","","<p>Parent class for informational (1xx) HTTP response classes.\n<p>An informational response indicates that the …\n"],["Net::HTTPInsufficientStorage","","Net/HTTPInsufficientStorage.html","","<p>Response class for <code>Insufficient Storage (WebDAV)</code> responses (status code 507).\n<p>The server is unable to …\n"],["Net::HTTPInternalServerError","","Net/HTTPInternalServerError.html","","<p>Response class for <code>Internal Server Error</code> responses (status code 500).\n<p>An unexpected condition was encountered …\n"],["Net::HTTPLengthRequired","","Net/HTTPLengthRequired.html","","<p>Response class for <code>Length Required</code> responses (status code 411).\n<p>The request did not specify the length …\n"],["Net::HTTPLocked","","Net/HTTPLocked.html","","<p>Response class for <code>Locked (WebDAV)</code> responses (status code 423).\n<p>The requested resource is locked.\n<p>References: …\n"],["Net::HTTPLoopDetected","","Net/HTTPLoopDetected.html","","<p>Response class for <code>Loop Detected (WebDAV)</code> responses (status code 508).\n<p>The server detected an infinite …\n"],["Net::HTTPMethodNotAllowed","","Net/HTTPMethodNotAllowed.html","","<p>Response class for <code>Method Not Allowed</code> responses (status code 405).\n<p>The request method is not supported …\n"],["Net::HTTPMisdirectedRequest","","Net/HTTPMisdirectedRequest.html","","<p>Response class for <code>Misdirected Request</code> responses (status code 421).\n<p>The request was directed at a server …\n"],["Net::HTTPMovedPermanently","","Net/HTTPMovedPermanently.html","","<p>Response class for <code>Moved Permanently</code> responses (status code 301).\n<p>The <code>Moved Permanently</code> response indicates …\n"],["Net::HTTPMovedTemporarily","","Net/HTTPFound.html","","<p>Response class for <code>Found</code> responses (status code 302).\n<p>The <code>Found</code> response indicates that the client should …\n"],["Net::HTTPMultiStatus","","Net/HTTPMultiStatus.html","","<p>Response class for <code>Multi-Status (WebDAV)</code> responses (status code 207).\n<p>The <code>Multi-Status (WebDAV)</code> response …\n"],["Net::HTTPMultipleChoice","","Net/HTTPMultipleChoices.html","","<p>Response class for <code>Multiple Choices</code> responses (status code 300).\n<p>The <code>Multiple Choices</code> response indicates …\n"],["Net::HTTPMultipleChoices","","Net/HTTPMultipleChoices.html","","<p>Response class for <code>Multiple Choices</code> responses (status code 300).\n<p>The <code>Multiple Choices</code> response indicates …\n"],["Net::HTTPNetworkAuthenticationRequired","","Net/HTTPNetworkAuthenticationRequired.html","","<p>Response class for <code>Network Authentication Required</code> responses (status code 511).\n<p>The client needs to authenticate …\n"],["Net::HTTPNoContent","","Net/HTTPNoContent.html","","<p>Response class for <code>No Content</code> responses (status code 204).\n<p>The <code>No Content</code> response indicates that the …\n"],["Net::HTTPNonAuthoritativeInformation","","Net/HTTPNonAuthoritativeInformation.html","","<p>Response class for <code>Non-Authoritative Information</code> responses (status code 203).\n<p>The <code>Non-Authoritative Information</code> …\n"],["Net::HTTPNotAcceptable","","Net/HTTPNotAcceptable.html","","<p>Response class for <code>Not Acceptable</code> responses (status code 406).\n<p>The requested resource is capable of generating …\n"],["Net::HTTPNotExtended","","Net/HTTPNotExtended.html","","<p>Response class for <code>Not Extended</code> responses (status code 510).\n<p>Further extensions to the request are required …\n"],["Net::HTTPNotFound","","Net/HTTPNotFound.html","","<p>Response class for <code>Not Found</code> responses (status code 404).\n<p>The requested resource could not be found but …\n"],["Net::HTTPNotImplemented","","Net/HTTPNotImplemented.html","","<p>Response class for <code>Not Implemented</code> responses (status code 501).\n<p>The server either does not recognize the …\n"],["Net::HTTPNotModified","","Net/HTTPNotModified.html","","<p>Response class for <code>Not Modified</code> responses (status code 304).\n<p>Indicates that the resource has not been …\n"],["Net::HTTPOK","","Net/HTTPOK.html","","<p>Response class for <code>OK</code> responses (status code 200).\n<p>The <code>OK</code> response indicates that the server has received …\n"],["Net::HTTPPartialContent","","Net/HTTPPartialContent.html","","<p>Response class for <code>Partial Content</code> responses (status code 206).\n<p>The <code>Partial Content</code> response indicates …\n"],["Net::HTTPPayloadTooLarge","","Net/HTTPPayloadTooLarge.html","","<p>Response class for <code>Payload Too Large</code> responses (status code 413).\n<p>The request is larger than the server …\n"],["Net::HTTPPaymentRequired","","Net/HTTPPaymentRequired.html","","<p>Response class for <code>Payment Required</code> responses (status code 402).\n<p>Reserved for future use.\n<p>References:\n"],["Net::HTTPPermanentRedirect","","Net/HTTPPermanentRedirect.html","","<p>Response class for <code>Permanent Redirect</code> responses (status code 308).\n<p>This and all future requests should …\n"],["Net::HTTPPreconditionFailed","","Net/HTTPPreconditionFailed.html","","<p>Response class for <code>Precondition Failed</code> responses (status code 412).\n<p>The server does not meet one of the …\n"],["Net::HTTPPreconditionRequired","","Net/HTTPPreconditionRequired.html","","<p>Response class for <code>Precondition Required</code> responses (status code 428).\n<p>The origin server requires the request …\n"],["Net::HTTPProcessing","","Net/HTTPProcessing.html","","<p>Response class for <code>Processing</code> responses (status code 102).\n<p>The <code>Processing</code> response indicates that the …\n"],["Net::HTTPProxyAuthenticationRequired","","Net/HTTPProxyAuthenticationRequired.html","","<p>Response class for <code>Proxy Authentication Required</code> responses (status code 407).\n<p>The client must first authenticate …\n"],["Net::HTTPRangeNotSatisfiable","","Net/HTTPRangeNotSatisfiable.html","","<p>Response class for <code>Range Not Satisfiable</code> responses (status code 416).\n<p>The request entity has a media type …\n"],["Net::HTTPRedirection","","Net/HTTPRedirection.html","","<p>Parent class for redirection (3xx) HTTP response classes.\n<p>A redirection response indicates the client …\n"],["Net::HTTPRequest","","Net/HTTPRequest.html","","<p>This class is the base class for Net::HTTP request classes. The class should not be used directly; instead …\n"],["Net::HTTPRequestEntityTooLarge","","Net/HTTPPayloadTooLarge.html","","<p>Response class for <code>Payload Too Large</code> responses (status code 413).\n<p>The request is larger than the server …\n"],["Net::HTTPRequestHeaderFieldsTooLarge","","Net/HTTPRequestHeaderFieldsTooLarge.html","","<p>Response class for <code>Request Header Fields Too Large</code> responses (status code 431).\n<p>An individual header field …\n"],["Net::HTTPRequestTimeOut","","Net/HTTPRequestTimeout.html","","<p>Response class for <code>Request Timeout</code> responses (status code 408).\n<p>The server timed out waiting for the request. …\n"],["Net::HTTPRequestTimeout","","Net/HTTPRequestTimeout.html","","<p>Response class for <code>Request Timeout</code> responses (status code 408).\n<p>The server timed out waiting for the request. …\n"],["Net::HTTPRequestURITooLarge","","Net/HTTPRequestURITooLong.html","","<p>Response class for <code>URI Too Long</code> responses (status code 414).\n<p>The URI provided was too long for the server …\n"],["Net::HTTPRequestURITooLong","","Net/HTTPURITooLong.html","","<p>Response class for <code>URI Too Long</code> responses (status code 414).\n<p>The URI provided was too long for the server …\n"],["Net::HTTPRequestedRangeNotSatisfiable","","Net/HTTPRangeNotSatisfiable.html","","<p>Response class for <code>Range Not Satisfiable</code> responses (status code 416).\n<p>The request entity has a media type …\n"],["Net::HTTPResetContent","","Net/HTTPResetContent.html","","<p>Response class for <code>Reset Content</code> responses (status code 205).\n<p>The <code>Reset Content</code> response indicates that …\n"],["Net::HTTPResponse","","Net/HTTPResponse.html","","<p>This class is the base class for Net::HTTP response classes.\n<p>About the Examples\n<p>Returned Responses\n"],["Net::HTTPRetriableError","","Net/HTTPRetriableError.html","",""],["Net::HTTPSeeOther","","Net/HTTPSeeOther.html","","<p>Response class for <code>See Other</code> responses (status code 303).\n<p>The response to the request can be found under …\n"],["Net::HTTPServerError","","Net/HTTPServerError.html","","<p>Parent class for server error (5xx) HTTP response classes.\n<p>A server error response indicates that the …\n"],["Net::HTTPServiceUnavailable","","Net/HTTPServiceUnavailable.html","","<p>Response class for <code>Service Unavailable</code> responses (status code 503).\n<p>The server cannot handle the request …\n"],["Net::HTTPSuccess","","Net/HTTPSuccess.html","","<p>Parent class for success (2xx) HTTP response classes.\n<p>A success response indicates the action requested …\n"],["Net::HTTPSwitchProtocol","","Net/HTTPSwitchProtocol.html","","<p>Response class for <code>Switching Protocol</code> responses (status code 101).\n<p>The &lt;tt&gt;Switching Protocol&lt;tt&gt; …\n"],["Net::HTTPTemporaryRedirect","","Net/HTTPTemporaryRedirect.html","","<p>Response class for <code>Temporary Redirect</code> responses (status code 307).\n<p>The request should be repeated with …\n"],["Net::HTTPTooManyRequests","","Net/HTTPTooManyRequests.html","","<p>Response class for <code>Too Many Requests</code> responses (status code 429).\n<p>The user has sent too many requests …\n"],["Net::HTTPURITooLong","","Net/HTTPURITooLong.html","","<p>Response class for <code>URI Too Long</code> responses (status code 414).\n<p>The URI provided was too long for the server …\n"],["Net::HTTPUnauthorized","","Net/HTTPUnauthorized.html","","<p>Response class for <code>Unauthorized</code> responses (status code 401).\n<p>Authentication is required, but either was …\n"],["Net::HTTPUnavailableForLegalReasons","","Net/HTTPUnavailableForLegalReasons.html","","<p>Response class for <code>Unavailable For Legal Reasons</code> responses (status code 451).\n<p>A server operator has received …\n"],["Net::HTTPUnknownResponse","","Net/HTTPUnknownResponse.html","",""],["Net::HTTPUnprocessableEntity","","Net/HTTPUnprocessableEntity.html","","<p>Response class for <code>Unprocessable Entity</code> responses (status code 422).\n<p>The request was well-formed but had …\n"],["Net::HTTPUnsupportedMediaType","","Net/HTTPUnsupportedMediaType.html","","<p>Response class for <code>Unsupported Media Type</code> responses (status code 415).\n<p>The request entity has a media …\n"],["Net::HTTPUpgradeRequired","","Net/HTTPUpgradeRequired.html","","<p>Response class for <code>Upgrade Required</code> responses (status code 426).\n<p>The client should switch to the protocol …\n"],["Net::HTTPUseProxy","","Net/HTTPUseProxy.html","","<p>Response class for <code>Use Proxy</code> responses (status code 305).\n<p>The requested resource is available only through …\n"],["Net::HTTPVariantAlsoNegotiates","","Net/HTTPVariantAlsoNegotiates.html","","<p>Response class for <code>Variant Also Negotiates</code> responses (status code 506).\n<p>Transparent content negotiation …\n"],["Net::HTTPVersionNotSupported","","Net/HTTPVersionNotSupported.html","","<p>Response class for <code>HTTP Version Not Supported</code> responses (status code 505).\n<p>The server does not support …\n"],["D","Net::HTTP","Net/HTTP.html#method-i-D","(msg)",""],["[]","Net::HTTPHeader","Net/HTTPHeader.html#method-i-5B-5D","(key)","<p>Returns the string field value for the case-insensitive field <code>key</code>, or <code>nil</code> if there is no such key; see …\n"],["[]=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-5B-5D-3D","(key, val)","<p>Sets the value for the case-insensitive <code>key</code> to <code>val</code>, overwriting the previous value if the field exists; …\n"],["active?","Net::HTTP","Net/HTTP.html#method-i-active-3F","()",""],["add_field","Net::HTTPHeader","Net/HTTPHeader.html#method-i-add_field","(key, val)","<p>Adds value <code>val</code> to the value array for field <code>key</code> if the field exists; creates the field with the given …\n"],["addr_port","Net::HTTP","Net/HTTP.html#method-i-addr_port","()","<p>utils\n"],["append_field_value","Net::HTTPHeader","Net/HTTPHeader.html#method-i-append_field_value","(ary, val)",""],["basic_auth","Net::HTTPHeader","Net/HTTPHeader.html#method-i-basic_auth","(account, password)","<p>Sets header <code>&#39;Authorization&#39;</code> using the given <code>account</code> and <code>password</code> strings:\n\n<pre>req.basic_auth(&#39;my_account&#39;, ...</pre>\n"],["basic_encode","Net::HTTPHeader","Net/HTTPHeader.html#method-i-basic_encode","(account, password)",""],["begin_transport","Net::HTTP","Net/HTTP.html#method-i-begin_transport","(req)",""],["body","Net::HTTPResponse","Net/HTTPResponse.html#method-i-body","()","<p>Returns the string response body; note that repeated calls for the unmodified body return a cached string: …\n"],["body=","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body-3D","(str)","<p>Sets the body for the request:\n\n<pre>req = Net::HTTP::Post.new(uri)\nreq.body # =&gt; nil\nreq.body = &#39;{&quot;title&quot;: ...</pre>\n"],["body=","Net::HTTPResponse","Net/HTTPResponse.html#method-i-body-3D","(value)","<p>Sets the body of the response to the given value.\n"],["body_encoding=","Net::HTTPResponse","Net/HTTPResponse.html#method-i-body_encoding-3D","(value)","<p>Sets the encoding that should be used when reading the body:\n<p>If the given value is an Encoding object, …\n"],["body_permitted?","Net::HTTPResponse","Net/HTTPResponse.html#method-c-body_permitted-3F","()","<p>true if the response has a body.\n"],["body_stream=","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body_stream-3D","(input)","<p>Sets the body stream for the request:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">req</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Post</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">uri</span>)          <span class=\"ruby-comment\"># =&gt; #&lt;Net::HTTP::Post POST&gt; ...</span>\n</pre>\n"],["canonical_each","Net::HTTPHeader","Net/HTTPHeader.html#method-i-canonical_each","()",""],["capitalize","Net::HTTPHeader","Net/HTTPHeader.html#method-i-capitalize","(name)",""],["chunked?","Net::HTTPHeader","Net/HTTPHeader.html#method-i-chunked-3F","()","<p>Returns <code>true</code> if field <code>&#39;Transfer-Encoding&#39;</code> exists and has value <code>&#39;chunked&#39;</code>, <code>false</code> otherwise; …\n"],["connect","Net::HTTP","Net/HTTP.html#method-i-connect","()",""],["connection_close?","Net::HTTPHeader","Net/HTTPHeader.html#method-i-connection_close-3F","()","<p>Returns whether the HTTP session is to be closed.\n"],["connection_keep_alive?","Net::HTTPHeader","Net/HTTPHeader.html#method-i-connection_keep_alive-3F","()","<p>Returns whether the HTTP session is to be kept alive.\n"],["content_length","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_length","()","<p>Returns the value of field <code>&#39;Content-Length&#39;</code> as an integer, or <code>nil</code> if there is no such field; …\n"],["content_length=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_length-3D","(len)","<p>Sets the value of field <code>&#39;Content-Length&#39;</code> to the given numeric; see Content-Length response header …\n"],["content_range","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_range","()","<p>Returns a Range object representing the value of field <code>&#39;Content-Range&#39;</code>, or <code>nil</code> if no such field …\n"],["content_type","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_type","()","<p>Returns the media type from the value of field <code>&#39;Content-Type&#39;</code>, or <code>nil</code> if no such field exists; …\n"],["content_type=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_type-3D","(type, params = {})",""],["continue_timeout=","Net::HTTP","Net/HTTP.html#method-i-continue_timeout-3D","(sec)","<p>Sets the continue timeout value, which is the number of seconds to wait for an expected 100 Continue …\n"],["copy","Net::HTTP","Net/HTTP.html#method-i-copy","(path, initheader = nil)","<p>Sends a COPY request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["debug","Net::HTTP","Net/HTTP.html#method-i-debug","(msg)","<p>Adds a message to debugging output\n"],["default_port","Net::HTTP","Net/HTTP.html#method-c-default_port","()","<p>Returns integer <code>80</code>, the default port to use for HTTP requests:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">default_port</span> <span class=\"ruby-comment\"># =&gt; 80</span>\n</pre>\n"],["delete","Net::HTTP","Net/HTTP.html#method-i-delete","(path, initheader = {'Depth' => 'Infinity'})","<p>Sends a DELETE request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["delete","Net::HTTPHeader","Net/HTTPHeader.html#method-i-delete","(key)","<p>Removes the header for the given case-insensitive <code>key</code> (see Fields); returns the deleted value, or <code>nil</code> …\n"],["do_finish","Net::HTTP","Net/HTTP.html#method-i-do_finish","()",""],["do_start","Net::HTTP","Net/HTTP.html#method-i-do_start","()",""],["each","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each","()",""],["each_capitalized","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_capitalized","()","<p>Like #each_header, but the keys are returned in capitalized form.\n<p>Net::HTTPHeader#canonical_each is an …\n"],["each_capitalized_name","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_capitalized_name","()","<p>Calls the block with each capitalized field name:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">res</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">get_response</span>(<span class=\"ruby-identifier\">hostname</span>, <span class=\"ruby-string\">&#39;/todos/1&#39;</span>)\n<span class=\"ruby-identifier\">res</span>.<span class=\"ruby-identifier\">each_capitalized_name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_header","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_header","()","<p>Calls the block with each key/value pair:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">res</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">get_response</span>(<span class=\"ruby-identifier\">hostname</span>, <span class=\"ruby-string\">&#39;/todos/1&#39;</span>)\n<span class=\"ruby-identifier\">res</span>.<span class=\"ruby-identifier\">each_header</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_key","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_key","()",""],["each_name","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_name","()","<p>Calls the block with each field key:\n\n<pre>res = Net::HTTP.get_response(hostname, &#39;/todos/1&#39;)\nres.each_key do ...</pre>\n"],["each_response_header","Net::HTTPResponse","Net/HTTPResponse.html#method-c-each_response_header","(sock)",""],["each_value","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_value","()","<p>Calls the block with each string field value:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">res</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">get_response</span>(<span class=\"ruby-identifier\">hostname</span>, <span class=\"ruby-string\">&#39;/todos/1&#39;</span>)\n<span class=\"ruby-identifier\">res</span>.<span class=\"ruby-identifier\">each_value</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["edit_path","Net::HTTP","Net/HTTP.html#method-i-edit_path","(path)",""],["encode_multipart_form_data","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-encode_multipart_form_data","(out, params, opt)",""],["end_transport","Net::HTTP","Net/HTTP.html#method-i-end_transport","(req, res)",""],["entity","Net::HTTPResponse","Net/HTTPResponse.html#method-i-entity","()",""],["fetch","Net::HTTPHeader","Net/HTTPHeader.html#method-i-fetch","(key, *args)","<p>With a block, returns the string value for <code>key</code> if it exists; otherwise returns the value of the block; …\n"],["finish","Net::HTTP","Net/HTTP.html#method-i-finish","()","<p>Finishes the HTTP session:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">http</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">hostname</span>)\n<span class=\"ruby-identifier\">http</span>.<span class=\"ruby-identifier\">start</span>\n<span class=\"ruby-identifier\">http</span>.<span class=\"ruby-identifier\">started?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-identifier\">http</span>.<span class=\"ruby-identifier\">finish</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["flush_buffer","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-flush_buffer","(out, buf, chunked_p)",""],["form_data=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-form_data-3D","(params, sep = '&')",""],["get","Net::HTTP","Net/HTTP.html#method-c-get","(uri_or_host, path_or_headers = nil, port = nil)","<p>Sends a GET request and returns the HTTP response body as a string.\n<p>With string arguments <code>hostname</code> and …\n"],["get","Net::HTTP","Net/HTTP.html#method-i-get","(path, initheader = nil, dest = nil)","<p>Sends a GET request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["get2","Net::HTTP","Net/HTTP.html#method-i-get2","(path, initheader = nil)",""],["get_fields","Net::HTTPHeader","Net/HTTPHeader.html#method-i-get_fields","(key)","<p>Returns the array field value for the given <code>key</code>, or <code>nil</code> if there is no such field; see Fields:\n\n<pre>res = Net::HTTP.get_response(hostname, ...</pre>\n"],["get_print","Net::HTTP","Net/HTTP.html#method-c-get_print","(uri_or_host, path_or_headers = nil, port = nil)","<p>Like Net::HTTP.get, but writes the returned body to $stdout; returns <code>nil</code>.\n"],["get_response","Net::HTTP","Net/HTTP.html#method-c-get_response","(uri_or_host, path_or_headers = nil, port = nil, &block)","<p>Like Net::HTTP.get, but returns a Net::HTTPResponse object instead of the body string.\n"],["head","Net::HTTP","Net/HTTP.html#method-i-head","(path, initheader = nil)","<p>Sends a HEAD request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["head2","Net::HTTP","Net/HTTP.html#method-i-head2","(path, initheader = nil, &block)",""],["http_default_port","Net::HTTP","Net/HTTP.html#method-c-http_default_port","()","<p>Returns integer <code>80</code>, the default port to use for HTTP requests:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">http_default_port</span> <span class=\"ruby-comment\"># =&gt; 80</span>\n</pre>\n"],["https_default_port","Net::HTTP","Net/HTTP.html#method-c-https_default_port","()","<p>Returns integer <code>443</code>, the default port to use for HTTPS requests:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">https_default_port</span> <span class=\"ruby-comment\"># =&gt; 443</span>\n</pre>\n"],["inspect","Net::HTTP","Net/HTTP.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">hostname</span>).<span class=\"ruby-identifier\">inspect</span>\n<span class=\"ruby-comment\"># =&gt; &quot;#&lt;Net::HTTP jsonplaceholder.typicode.com:80 ...</span>\n</pre>\n"],["inspect","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-inspect","()","<p>Returns a string representation of the request:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Post</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">uri</span>).<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># =&gt; &quot;#&lt;Net::HTTP::Post ...</span>\n</pre>\n"],["inspect","Net::HTTPResponse","Net/HTTPResponse.html#method-i-inspect","()",""],["ipaddr","Net::HTTP","Net/HTTP.html#method-i-ipaddr","()","<p>Returns the IP address for the connection.\n<p>If the session has not been started, returns the value set …\n"],["ipaddr=","Net::HTTP","Net/HTTP.html#method-i-ipaddr-3D","(addr)","<p>Sets the IP address for the connection:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">http</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">hostname</span>)\n<span class=\"ruby-identifier\">http</span>.<span class=\"ruby-identifier\">ipaddr</span> <span class=\"ruby-comment\"># =&gt; nil</span>\n<span class=\"ruby-identifier\">http</span>.<span class=\"ruby-identifier\">ipaddr</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["is_version_1_2?","Net::HTTP","Net/HTTP.html#method-c-is_version_1_2-3F","()",""],["keep_alive?","Net::HTTP","Net/HTTP.html#method-i-keep_alive-3F","(req, res)",""],["key?","Net::HTTPHeader","Net/HTTPHeader.html#method-i-key-3F","(key)","<p>Returns <code>true</code> if the field for the case-insensitive <code>key</code> exists, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">req</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Get</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">uri</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["lock","Net::HTTP","Net/HTTP.html#method-i-lock","(path, body, initheader = nil)","<p>Sends a LOCK request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["main_type","Net::HTTPHeader","Net/HTTPHeader.html#method-i-main_type","()","<p>Returns the leading (‘type’) part of the media type from the value of field <code>&#39;Content-Type&#39;</code> …\n"],["max_retries=","Net::HTTP","Net/HTTP.html#method-i-max_retries-3D","(retries)","<p>Sets the maximum number of times to retry an idempotent request in case of Net::ReadTimeout, IOError …\n"],["mkcol","Net::HTTP","Net/HTTP.html#method-i-mkcol","(path, body = nil, initheader = nil)","<p>Sends a MKCOL request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["move","Net::HTTP","Net/HTTP.html#method-i-move","(path, initheader = nil)","<p>Sends a MOVE request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["new","Net::HTTP","Net/HTTP.html#method-c-new","(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil, p_no_proxy = nil)","<p>Returns a new Net::HTTP object <code>http</code> (but does not open a TCP connection or HTTP session).\n<p>With only string …\n"],["new","Net::HTTPRequest","Net/HTTPRequest.html#method-c-new","(path, initheader = nil)","<p>Creates an HTTP request object for <code>path</code>.\n<p><code>initheader</code> are the default headers to use.  Net::HTTP adds Accept-Encoding …\n"],["newobj","Net::HTTP","Net/HTTP.html#method-c-newobj","(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil, p_no_proxy = nil)",""],["on_connect","Net::HTTP","Net/HTTP.html#method-i-on_connect","()",""],["options","Net::HTTP","Net/HTTP.html#method-i-options","(path, initheader = nil)","<p>Sends an Options request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["patch","Net::HTTP","Net/HTTP.html#method-i-patch","(path, data, initheader = nil, dest = nil)","<p>Sends a PATCH request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["peer_cert","Net::HTTP","Net/HTTP.html#method-i-peer_cert","()","<p>Returns the X509 certificate chain (an array of strings) for the session’s socket peer, or <code>nil</code> if …\n"],["post","Net::HTTP","Net/HTTP.html#method-c-post","(url, data, header = nil)","<p>Posts data to a host; returns a Net::HTTPResponse object.\n<p>Argument <code>url</code> must be a URL; argument <code>data</code> must …\n"],["post","Net::HTTP","Net/HTTP.html#method-i-post","(path, data, initheader = nil, dest = nil)","<p>Sends a POST request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["post2","Net::HTTP","Net/HTTP.html#method-i-post2","(path, data, initheader = nil)",""],["post_form","Net::HTTP","Net/HTTP.html#method-c-post_form","(url, params)","<p>Posts data to a host; returns a Net::HTTPResponse object.\n<p>Argument <code>url</code> must be a URI; argument <code>data</code> must …\n"],["propfind","Net::HTTP","Net/HTTP.html#method-i-propfind","(path, body = nil, initheader = {'Depth' => '0'})","<p>Sends a PROPFIND request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["proppatch","Net::HTTP","Net/HTTP.html#method-i-proppatch","(path, body, initheader = nil)","<p>Sends a PROPPATCH request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["proxy?","Net::HTTP","Net/HTTP.html#method-i-proxy-3F","()","<p>Returns <code>true</code> if a proxy server is defined, <code>false</code> otherwise; see Proxy Server.\n"],["proxy_address","Net::HTTP","Net/HTTP.html#method-i-proxy_address","()","<p>Returns the address of the proxy server, if defined, <code>nil</code> otherwise; see Proxy Server.\n"],["proxy_basic_auth","Net::HTTPHeader","Net/HTTPHeader.html#method-i-proxy_basic_auth","(account, password)","<p>Sets header <code>&#39;Proxy-Authorization&#39;</code> using the given <code>account</code> and <code>password</code> strings:\n\n<pre>req.proxy_basic_auth(&#39;my_account&#39;, ...</pre>\n"],["proxy_class?","Net::HTTP","Net/HTTP.html#method-c-proxy_class-3F","()","<p>Returns true if self is a class which was created by HTTP::Proxy.\n"],["proxy_from_env?","Net::HTTP","Net/HTTP.html#method-i-proxy_from_env-3F","()","<p>Returns <code>true</code> if the proxy server is defined in the environment, <code>false</code> otherwise; see Proxy Server.\n"],["proxy_pass","Net::HTTP","Net/HTTP.html#method-i-proxy_pass","()","<p>Returns the password of the proxy server, if defined, <code>nil</code> otherwise; see Proxy Server.\n"],["proxy_port","Net::HTTP","Net/HTTP.html#method-i-proxy_port","()","<p>Returns the port number of the proxy server, if defined, <code>nil</code> otherwise; see Proxy Server.\n"],["proxy_user","Net::HTTP","Net/HTTP.html#method-i-proxy_user","()","<p>Returns the user name of the proxy server, if defined, <code>nil</code> otherwise; see Proxy Server.\n"],["proxyaddr","Net::HTTP","Net/HTTP.html#method-i-proxyaddr","()",""],["proxyport","Net::HTTP","Net/HTTP.html#method-i-proxyport","()",""],["put","Net::HTTP","Net/HTTP.html#method-i-put","(path, data, initheader = nil)","<p>Sends a PUT request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["quote_string","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-quote_string","(str, charset)",""],["range","Net::HTTPHeader","Net/HTTPHeader.html#method-i-range","()","<p>Returns an array of Range objects that represent the value of field <code>&#39;Range&#39;</code>, or <code>nil</code> if there …\n"],["range=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-range-3D","(r, e = nil)",""],["range_length","Net::HTTPHeader","Net/HTTPHeader.html#method-i-range_length","()","<p>Returns the integer representing length of the value of field <code>&#39;Content-Range&#39;</code>, or <code>nil</code> if no such …\n"],["read_body","Net::HTTPResponse","Net/HTTPResponse.html#method-i-read_body","(dest = nil, &block)","<p>Gets the entity body returned by the remote HTTP server.\n<p>If a block is given, the body is passed to the …\n"],["read_status_line","Net::HTTPResponse","Net/HTTPResponse.html#method-c-read_status_line","(sock)",""],["read_timeout=","Net::HTTP","Net/HTTP.html#method-i-read_timeout-3D","(sec)","<p>Sets the read timeout, in seconds, for <code>self</code> to integer <code>sec</code>; the initial value is 60.\n<p>Argument <code>sec</code> must …\n"],["request","Net::HTTP","Net/HTTP.html#method-i-request","(req, body = nil)","<p>Sends the given request <code>req</code> to the server; forms the response into a Net::HTTPResponse object.\n<p>The given …\n"],["request_body_permitted?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-request_body_permitted-3F","()","<p>Returns whether the request may have a body:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Post</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">uri</span>).<span class=\"ruby-identifier\">request_body_permitted?</span> <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["request_get","Net::HTTP","Net/HTTP.html#method-i-request_get","(path, initheader = nil)","<p>Sends a GET request to the server; forms the response into a Net::HTTPResponse object.\n<p>The request is …\n"],["request_head","Net::HTTP","Net/HTTP.html#method-i-request_head","(path, initheader = nil, &block)","<p>Sends a HEAD request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["request_post","Net::HTTP","Net/HTTP.html#method-i-request_post","(path, data, initheader = nil)","<p>Sends a POST request to the server; forms the response into a Net::HTTPResponse object.\n<p>The request is …\n"],["response_body_encoding=","Net::HTTP","Net/HTTP.html#method-i-response_body_encoding-3D","(value)","<p>Sets the encoding to be used for the response body; returns the encoding.\n<p>The given <code>value</code> may be:\n<p>An Encoding …\n"],["response_body_permitted?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-response_body_permitted-3F","()","<p>Returns whether the response may have a body:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Post</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">uri</span>).<span class=\"ruby-identifier\">response_body_permitted?</span> <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["response_class","Net::HTTPResponse","Net/HTTPResponse.html#method-c-response_class","(code)",""],["send_entity","Net::HTTP","Net/HTTP.html#method-i-send_entity","(path, data, initheader, dest, type, &block)","<p>Executes a request which uses a representation and returns its body.\n"],["send_request","Net::HTTP","Net/HTTP.html#method-i-send_request","(name, path, data = nil, header = nil)","<p>Sends an HTTP request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["send_request_with_body","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-send_request_with_body","(sock, ver, path, body)",""],["send_request_with_body_data","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-send_request_with_body_data","(sock, ver, path, params)",""],["send_request_with_body_stream","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-send_request_with_body_stream","(sock, ver, path, f)",""],["set_content_type","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_content_type","(type, params = {})","<p>Sets the value of field <code>&#39;Content-Type&#39;</code>; returns the new value; see Content-Type request header …\n"],["set_debug_output","Net::HTTP","Net/HTTP.html#method-i-set_debug_output","(output)","<p><strong>WARNING</strong> This method opens a serious security hole. Never use this method in production code.\n<p>Sets the …\n"],["set_field","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_field","(key, val)",""],["set_form","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_form","(params, enctype='application/x-www-form-urlencoded', formopt={})","<p>Stores form data to be used in a <code>POST</code> or <code>PUT</code> request.\n<p>The form data given in <code>params</code> consists of zero or …\n"],["set_form_data","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_form_data","(params, sep = '&')","<p>Sets the request body to a URL-encoded string derived from argument <code>params</code>, and sets request header field …\n"],["set_range","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_range","(r, e = nil)","<p>Sets the value for field <code>&#39;Range&#39;</code>; see Range request header:\n<p>With argument <code>length</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">req</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Get</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">uri</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sspi_auth","Net::HTTP","Net/HTTP.html#method-i-sspi_auth","(req)",""],["sspi_auth?","Net::HTTP","Net/HTTP.html#method-i-sspi_auth-3F","(res)",""],["start","Net::HTTP","Net/HTTP.html#method-c-start","(address, *arg)","<p>Creates a new Net::HTTP object, <code>http</code>, via Net::HTTP.new:\n<p>For arguments <code>address</code> and <code>port</code>, see Net::HTTP.new …\n"],["start","Net::HTTP","Net/HTTP.html#method-i-start","()","<p>Starts an HTTP session.\n<p>Without a block, returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">http</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">hostname</span>)\n<span class=\"ruby-comment\"># =&gt; #&lt;Net::HTTP ...</span>\n</pre>\n"],["started?","Net::HTTP","Net/HTTP.html#method-i-started-3F","()","<p>Returns <code>true</code> if the HTTP session has been started:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">http</span> = <span class=\"ruby-constant\">Net</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTP</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">hostname</span>)\n<span class=\"ruby-identifier\">http</span>.<span class=\"ruby-identifier\">started?</span> <span class=\"ruby-comment\"># =&gt; false ...</span>\n</pre>\n"],["sub_type","Net::HTTPHeader","Net/HTTPHeader.html#method-i-sub_type","()","<p>Returns the trailing (‘subtype’) part of the media type from the value of field <code>&#39;Content-Type&#39;</code> …\n"],["supply_default_content_type","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-supply_default_content_type","()",""],["to_hash","Net::HTTPHeader","Net/HTTPHeader.html#method-i-to_hash","()","<p>Returns a hash of the key/value pairs:\n\n<pre>req = Net::HTTP::Get.new(uri)\nreq.to_hash\n# =&gt;\n{&quot;accept-encoding&quot;=&gt;[&quot;gzip;q=1.0,deflate;q=0.6,identity;q=0.3&quot;], ...</pre>\n"],["trace","Net::HTTP","Net/HTTP.html#method-i-trace","(path, initheader = nil)","<p>Sends a TRACE request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["transport_request","Net::HTTP","Net/HTTP.html#method-i-transport_request","(req)",""],["type_params","Net::HTTPHeader","Net/HTTPHeader.html#method-i-type_params","()","<p>Returns the trailing (‘parameters’) part of the value of field <code>&#39;Content-Type&#39;</code>, or <code>nil</code> …\n"],["unescape","Net::HTTP","Net/HTTP.html#method-i-unescape","(value)",""],["unlock","Net::HTTP","Net/HTTP.html#method-i-unlock","(path, body, initheader = nil)","<p>Sends an UNLOCK request to the server; returns an instance of a subclass of Net::HTTPResponse.\n<p>The request …\n"],["use_ssl=","Net::HTTP","Net/HTTP.html#method-i-use_ssl-3D","(flag)","<p>Sets whether a new session is to use Transport Layer Security:\n<p>Raises IOError if attempting to change …\n"],["use_ssl?","Net::HTTP","Net/HTTP.html#method-i-use_ssl-3F","()","<p>Returns <code>true</code> if <code>self</code> uses SSL, <code>false</code> otherwise. See Net::HTTP#use_ssl=.\n"],["value","Net::HTTPResponse","Net/HTTPResponse.html#method-i-value","()","<p>Raises an HTTP error if the response is not 2xx (success).\n"],["version_1_2","Net::HTTP","Net/HTTP.html#method-c-version_1_2","()","<p>Returns <code>true</code>; retained for compatibility.\n"],["version_1_2?","Net::HTTP","Net/HTTP.html#method-c-version_1_2-3F","()","<p>Returns <code>true</code>; retained for compatibility.\n"],["wait_for_continue","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-wait_for_continue","(sock, ver)","<p>Waits up to the continue timeout for a response from the server provided we’re speaking HTTP 1.1 …\n"],["write_header","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-write_header","(sock, ver, path)",""],["write_timeout=","Net::HTTP","Net/HTTP.html#method-i-write_timeout-3D","(sec)","<p>Sets the write timeout, in seconds, for <code>self</code> to integer <code>sec</code>; the initial value is 60.\n<p>Argument <code>sec</code> must …\n"]]}}