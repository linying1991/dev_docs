var search_data = {"index":{"searchIndex":["observable","add_observer()","changed()","changed?()","count_observers()","delete_observer()","delete_observers()","notify_observers()"],"longSearchIndex":["observable","observable#add_observer()","observable#changed()","observable#changed?()","observable#count_observers()","observable#delete_observer()","observable#delete_observers()","observable#notify_observers()"],"info":[["Observable","","Observable.html","","<p>The Observer pattern (also known as publish/subscribe) provides a simple mechanism for one object to …\n"],["add_observer","Observable","Observable.html#method-i-add_observer","(observer, func=:update)","<p>Add <code>observer</code> as an observer on this object. So that it will receive notifications.\n<p><code>observer</code> &mdash; the object …\n"],["changed","Observable","Observable.html#method-i-changed","(state=true)","<p>Set the changed state of this object.  Notifications will be sent only if the changed <code>state</code> is <code>true</code>. …\n"],["changed?","Observable","Observable.html#method-i-changed-3F","()","<p>Returns true if this object’s state has been changed since the last #notify_observers call.\n"],["count_observers","Observable","Observable.html#method-i-count_observers","()","<p>Return the number of observers associated with this object.\n"],["delete_observer","Observable","Observable.html#method-i-delete_observer","(observer)","<p>Remove <code>observer</code> as an observer on this object so that it will no longer receive notifications.\n<p><code>observer</code> … &mdash; "],["delete_observers","Observable","Observable.html#method-i-delete_observers","()","<p>Remove all observers associated with this object.\n"],["notify_observers","Observable","Observable.html#method-i-notify_observers","(*arg)","<p>Notify observers of a change in state <strong>if</strong> this object’s changed state is <code>true</code>.\n<p>This will invoke the …\n"]]}}