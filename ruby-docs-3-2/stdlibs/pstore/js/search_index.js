var search_data = {"index":{"searchIndex":["pstore","error","[]()","[]=()","abort()","commit()","delete()","empty_marshal_checksum()","empty_marshal_data()","fetch()","in_transaction()","in_transaction_wr()","key?()","keys()","load_data()","new()","on_windows?()","open_and_lock_file()","path()","root?()","roots()","save_data()","save_data_with_atomic_file_rename_strategy()","save_data_with_fast_strategy()","transaction()"],"longSearchIndex":["pstore","pstore::error","pstore#[]()","pstore#[]=()","pstore#abort()","pstore#commit()","pstore#delete()","pstore#empty_marshal_checksum()","pstore#empty_marshal_data()","pstore#fetch()","pstore#in_transaction()","pstore#in_transaction_wr()","pstore#key?()","pstore#keys()","pstore#load_data()","pstore::new()","pstore#on_windows?()","pstore#open_and_lock_file()","pstore#path()","pstore#root?()","pstore#roots()","pstore#save_data()","pstore#save_data_with_atomic_file_rename_strategy()","pstore#save_data_with_fast_strategy()","pstore#transaction()"],"info":[["PStore","","PStore.html","","<p>PStore implements a file based persistence mechanism based on a Hash. User code can store hierarchies …\n"],["PStore::Error","","PStore/Error.html","","<p>The error type thrown by all PStore methods.\n"],["[]","PStore","PStore.html#method-i-5B-5D","(key)","<p>Returns the value for the given <code>key</code> if the key exists. <code>nil</code> otherwise; if not <code>nil</code>, the returned value …\n"],["[]=","PStore","PStore.html#method-i-5B-5D-3D","(key, value)","<p>Creates or replaces the value for the given <code>key</code>:\n\n<pre>example_store do |store|\n  temp.transaction do\n    temp[:bat] ...</pre>\n"],["abort","PStore","PStore.html#method-i-abort","()","<p>Exits the current transaction block, discarding any changes specified in the transaction block. See  …\n"],["commit","PStore","PStore.html#method-i-commit","()","<p>Exits the current transaction block, committing any changes specified in the transaction block. See  …\n"],["delete","PStore","PStore.html#method-i-delete","(key)","<p>Removes and returns the value at <code>key</code> if it exists:\n\n<pre>example_store do |store|\n  store.transaction do\n   ...</pre>\n"],["empty_marshal_checksum","PStore","PStore.html#method-i-empty_marshal_checksum","()",""],["empty_marshal_data","PStore","PStore.html#method-i-empty_marshal_data","()",""],["fetch","PStore","PStore.html#method-i-fetch","(key, default=PStore::Error)","<p>Like #[], except that it accepts a default value for the store. If the <code>key</code> does not exist:\n<p>Raises an exception …\n"],["in_transaction","PStore","PStore.html#method-i-in_transaction","()","<p>Raises PStore::Error if the calling code is not in a PStore#transaction.\n"],["in_transaction_wr","PStore","PStore.html#method-i-in_transaction_wr","()","<p>Raises PStore::Error if the calling code is not in a PStore#transaction or if the code is in a read-only …\n"],["key?","PStore","PStore.html#method-i-key-3F","(key)","<p>Returns <code>true</code> if <code>key</code> exists, <code>false</code> otherwise:\n\n<pre>example_store do |store|\n  store.transaction do\n    store.key?(:foo) ...</pre>\n"],["keys","PStore","PStore.html#method-i-keys","()","<p>Returns an array of the existing keys:\n\n<pre>example_store do |store|\n  store.transaction do\n    store.keys ...</pre>\n"],["load_data","PStore","PStore.html#method-i-load_data","(file, read_only)","<p>Load the given PStore file. If <code>read_only</code> is true, the unmarshalled Hash will be returned. If <code>read_only</code> …\n"],["new","PStore","PStore.html#method-c-new","(file, thread_safe = false)","<p>Returns a new PStore object.\n<p>Argument <code>file</code> is the path to the file in which objects are to be stored; …\n"],["on_windows?","PStore","PStore.html#method-i-on_windows-3F","()",""],["open_and_lock_file","PStore","PStore.html#method-i-open_and_lock_file","(filename, read_only)","<p>Open the specified filename (either in read-only mode or in read-write mode) and lock it for reading …\n"],["path","PStore","PStore.html#method-i-path","()","<p>Returns the string file path used to create the store:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">store</span>.<span class=\"ruby-identifier\">path</span> <span class=\"ruby-comment\"># =&gt; &quot;flat.store&quot;</span>\n</pre>\n"],["root?","PStore","PStore.html#method-i-root-3F","(key)",""],["roots","PStore","PStore.html#method-i-roots","()",""],["save_data","PStore","PStore.html#method-i-save_data","(original_checksum, original_file_size, file)",""],["save_data_with_atomic_file_rename_strategy","PStore","PStore.html#method-i-save_data_with_atomic_file_rename_strategy","(data, file)",""],["save_data_with_fast_strategy","PStore","PStore.html#method-i-save_data_with_fast_strategy","(data, file)",""],["transaction","PStore","PStore.html#method-i-transaction","(read_only = false)","<p>Opens a transaction block for the store. See Transactions.\n<p>With argument <code>read_only</code> as <code>false</code>, the block …\n"]]}}