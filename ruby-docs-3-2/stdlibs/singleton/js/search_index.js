var search_data = {"index":{"searchIndex":["singleton","_dump()","_load()","append_features()","clone()","dup()","included()","instance()"],"longSearchIndex":["singleton","singleton#_dump()","singleton::_load()","singleton::append_features()","singleton#clone()","singleton#dup()","singleton::included()","singleton::instance()"],"info":[["Singleton","","Singleton.html","","<p>The Singleton module implements the Singleton pattern.\n<p>Usage\n<p>To use Singleton, include the module in your â€¦\n"],["_dump","Singleton","Singleton.html#method-i-_dump","(depth = -1)","<p>By default, do not retain any state when marshalling.\n"],["_load","Singleton","Singleton.html#method-c-_load","","<p>By default calls instance(). Override to retain singleton state.\n"],["append_features","Singleton","Singleton.html#method-c-append_features","(mod)",""],["clone","Singleton","Singleton.html#method-i-clone","()","<p>Raises a TypeError to prevent cloning.\n"],["dup","Singleton","Singleton.html#method-i-dup","()","<p>Raises a TypeError to prevent duping.\n"],["included","Singleton","Singleton.html#method-c-included","(klass)",""],["instance","Singleton","Singleton.html#method-c-instance","","<p>Returns the singleton instance.\n"]]}}