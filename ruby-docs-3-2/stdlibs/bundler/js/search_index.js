var search_data = {"index":{"searchIndex":["ambiguoustaskerror","ambiguoustaskerror","bundler","apiresponseinvaliddependencieserror","apiresponsemismatcherror","buildmetadata","bundlererror","cli","add","binstubs","cache","check","clean","common","config","base","console","doctor","exec","fund","gem","info","init","inject","install","issue","list","lock","open","outdated","platform","plugin","pristine","remove","show","update","viz","compactindexclient","cache","error","gemparser","updater","mismatchedchecksumerror","connectionpool","error","poolshuttingdownerror","timedstack","timeouterror","wrapper","currentruby","cyclicdependencyerror","definition","dependency","deployment","deprecate","deprecatederror","digest","directoryremovalerror","dsl","dslerror","endpointspecification","env","environmentpreserver","featureflag","fetchmetadata","fetcher","authenticationforbiddenerror","authenticationrequirederror","badauthenticationerror","base","certificatefailureerror","compactindex","dependency","downloader","fallbackerror","index","networkdownerror","sslerror","toomanyrequestserror","fileutils","dryrun","nowrite","streamutils_","verbose","forceplatform","friendlyerrors","gemhelper","gemhelpers","platformmatch","geminstaller","gemnotfound","gemrequireerror","gemversionpromoter","gemfileerror","gemfileevalerror","gemfilelocknotfound","gemfilenotfound","gemspecerror","genericsystemcallerror","giterror","graph","graphvizclient","httperror","index","injector","installerror","installhookerror","installer","invalidoption","lazyspecification","lockfileerror","lockfilegenerator","lockfileparser","marshalerror","matchmetadata","matchplatform","matchremotemetadata","mirrorsockets","nospaceondeviceerror","operationnotsupportederror","parallelinstaller","specinstallation","patherror","permissionerror","persistent","net","http","persistent","error","plugin","api","source","dsl","plugingemfileerror","events","index","commandconflict","sourceconflict","installer","git","rubygems","malformattedplugin","plugininstallerror","sourcelist","undefinedcommanderror","unknownsourceerror","pluginerror","processlock","productionerror","pubgrub","assignment","basicpackagesource","failurewriter","incompatibility","package","partialsolution","rubygems","solvefailure","staticpackagesource","dsl","term","versionconstraint","versionrange","empty","versionsolver","versionunion","remotespecification","resolver","base","candidate","incompatibility","package","root","specgroup","retry","rubydsl","rubygemsgeminstaller","rubyversion","rubyversionmismatch","rubygemsintegration","gem","runtime","safemarshal","securityerror","selfmanager","settings","mirror","mirrorconfig","mirrors","tcpsocketprobe","validator","rule","sharedhelpers","similaritydetector","socketaddress","solvefailure","source","gemspec","git","gitcommanderror","gitnotallowederror","gitnotinstallederror","gitproxy","missinggitrevisionerror","metadata","path","installer","rubygems","remote","rubygemsaggregate","sourcelist","sourcemap","specset","standalone","stubspecification","tsort","cyclic","temporaryresourceerror","thor","actions","capturableerb","classmethods","base","classmethods","command","dynamiccommand","dynamictask","group","hiddencommand","hiddentask","invocation","classmethods","lineeditor","basic","readline","pathcompletion","nestedcontext","rakecompat","shell","basic","color","html","task","util","threadcreationerror","ui","rgproxy","shell","silent","uri","badurierror","error","ftp","file","generic","http","https","invalidcomponenterror","invalidurierror","ldap","ldaps","mailto","parser","regexp","rfc2396_parser","rfc2396_regexp","pattern","schemes","ws","wss","uricredentialsfilter","urinormalizer","virtualprotocolerror","worker","wrappedexception","yamlserializer","yamlsyntaxerror","error","gem","dependency","platform","requirement","correcthashforlambdaoperator","orderindependentcomparison","specification","yamlbackfiller","invocationerror","kernel","malformattedargumenterror","object","requiredargumentmissingerror","undefinedtaskerror","spellchecker","undefinedtaskerror","unknownargumenterror","spellchecker","+()","-()","-()","<<()","<<()","<<()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","===()","uri()","uri()","[]()","[]()","[]()","[]()","[]=()","__dependencies()","__materialize__()","__swap__()","__swap__()","_decode_uri_component()","_encode_uri_component()","_groups()","_local_specification()","_make_label()","_populate_relations()","_remote_specification()","_remote_specification()","_remote_specification()","_requirements_sorted?()","_with_sorted_requirements()","abort_threads()","absolute()","absolute?()","absolute_matches()","action()","activated()","activated=()","add()","add()","add_assignment()","add_bundled_with()","add_color()","add_color()","add_command()","add_current_platform()","add_default_gems_to()","add_dependencies()","add_dependency_names()","add_dependency_names()","add_file()","add_git_source()","add_git_source()","add_git_sources()","add_global_rubygems_remote()","add_hook()","add_incompatibility()","add_interrupt_handler()","add_link()","add_locked_ruby_version()","add_path_source()","add_platform()","add_platforms()","add_plugin_source()","add_remote()","add_rubygems_source()","add_rubygems_source()","add_runtime_options!()","add_section()","add_source()","add_source()","add_source_to_list()","add_sources()","add_specs()","add_to_history?()","add_to_load_path()","additional_base_requirements_for_resolve()","aggregate_global_source?()","aliases_for()","all()","all?()","all_aliases()","all_commands()","all_dependencies()","all_errors()","all_requirements()","all_sources()","all_sources()","all_specs()","all_tasks()","all_versions_for()","all_versions_for()","all_versions_for()","allow?()","allow_git_ops?()","allow_incompatible_default_type!()","allowed_push_host()","allowed_with_path()","allows_all?()","allows_all?()","allows_all?()","allows_all?()","allows_any?()","allows_any?()","allows_any?()","already_tagged?()","answer_match()","any()","any()","any?()","any?()","any?()","any?()","any?()","api_fetcher?()","api_fetcher?()","api_fetcher?()","api_fetchers()","app_cache()","app_cache_dirname()","app_cache_dirname()","app_cache_dirname()","app_cache_path()","app_cache_path()","app_cache_path()","app_config_path()","append_file()","append_formatted_table()","append_to()","append_to_file()","apply()","apply_auth()","apply_func()","are_colors_disabled?()","are_colors_supported?()","argument()","arguments()","array_to_s()","as_path_source()","as_unicode()","ask()","ask()","ask()","ask()","ask_and_set()","ask_and_set_ci()","ask_and_set_linter()","ask_and_set_test_framework()","ask_filtered()","ask_for_spec_from()","ask_simply()","attempt()","attempts()","attempts()","attributes()","attributes=()","authority()","auto_install()","autoswitching_applies?()","available()","available?()","available?()","available?()","available?()","available?()","backport_ext_builder_monitor()","backtrack()","backup()","banner()","banner()","base()","base64digest!()","base_name()","base_path()","base_requirements()","base_requirements()","basename()","best_available()","bin_path()","bin_path()","bindir()","binstubs()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build2()","build_args()","build_args=()","build_base_requirements()","build_checksum()","build_dependency()","build_extensions()","build_gem()","build_gem()","build_gem_lines()","build_index()","build_path_query()","built_at()","built_gem_path()","bundle_path()","bundle_worker()","bundled_with()","bundler_cert_store()","bundler_dependency_version()","bundler_major_version()","bundler_not_found_message()","bundler_path()","bundler_pinned_to_current_version?()","bundler_ruby_lib()","bundler_version_to_lock()","bundles_for_gem()","ca_file=()","ca_path=()","cache()","cache()","cache()","cache()","cache()","cache()","cache()","cache_dir()","cache_path()","cache_path()","cache_path()","cache_path()","cache_path()","cache_slug()","cached!()","cached!()","cached!()","cached!()","cached!()","cached?()","cached_built_in_gem()","cached_gem()","cached_path()","cached_revision()","cached_revision_checked_out?()","cached_specs()","caches()","call()","call()","camel_case()","can_display_colors?()","can_display_colors?()","can_display_colors?()","can_lock?()","can_lock?()","can_lock?()","capture()","capture()","capture3_args_for()","cd()","cd()","cert=()","cert_store=()","certificate=()","change_reason()","chdir()","chdir()","chdir()","check()","check!()","check_allowed()","check_default_type!()","check_deprecated_ext_option()","check_executable_overwrite()","check_for_activated_spec!()","check_for_deployment_mode!()","check_for_group_conflicts_in_cli_options()","check_for_options_conflicts()","check_for_unmet_dependencies()","check_headers()","check_home_permissions()","check_host()","check_missing_lockfile_dep()","check_opaque()","check_password()","check_password()","check_path()","check_path_source_safety()","check_port()","check_primary_source_safety()","check_rubygems_source_safety()","check_scheme()","check_sources_consistency!()","check_to()","check_trust_policy()","check_typecode()","check_unknown_options!()","check_unknown_options!()","check_user()","check_user()","check_userinfo()","check_userinfo()","checkin()","checkout()","checkout()","checksum_for_file()","checksum_type()","checksums()","chmod()","chmod()","chmod()","chmod_r()","chmod_r()","choose_package_version()","chown()","chown()","chown_r()","chown_r()","chruby_version()","ciphers=()","cis()","class_option()","class_options()","clean()","clean()","clean?()","clean_after_install?()","clean_deps()","clean_env()","clean_exec()","clean_load_path()","clean_system()","cleanup_terms()","clear_gemspec_cache()","clear_paths()","cli_help()","client_fetcher()","clone_needs_extra_fetch?()","clone_needs_unshallow?()","cmp()","cmp()","coerce()","collapsible?()","collect_method()","combine_rubygems_sources()","command()","command?()","command_help()","command_plugin()","commands()","commands()","comment_lines()","commit()","committed?()","compact_index_client()","compact_index_request()","compare_file()","compare_file()","compare_stream()","compare_stream()","compare_version()","completion_options()","completion_proc()","component()","component()","component_ary()","concat()","configs()","configure()","configure_gem_home()","configure_gem_home_and_path()","configure_gem_path()","configure_gem_version_promoter()","configured_bundle_path()","configured_uri()","confirm()","confirm()","confirm()","confirm?()","confirm?()","confirm_all()","conflict?()","connection()","connection_for()","connection_stored?()","conservative_version()","consider_prereleases!()","console()","constraint_string()","constraints()","contains?()","contents()","contiguous_to?()","converge_dependencies()","converge_locals()","converge_locked_specs()","converge_path_source_to_gemspec_source()","converge_path_sources_to_gemspec_sources()","converge_paths()","converge_sources()","converge_specs()","convert_autorequire()","convert_to_backward_compatible_key()","convert_to_uri()","convert_to_uri()","converted_value()","copy()","copy()","copy_entry()","copy_entry()","copy_file()","copy_file()","copy_file()","copy_file()","copy_stream()","copy_stream()","copy_to()","correct_for_windows_path()","corrections()","corrections()","count_derivations()","cp()","cp()","cp_lr()","cp_lr()","cp_r()","cp_r()","cpu_match()","create_bundle_path()","create_file()","create_link()","create_threads()","credential_filtered_string()","credential_filtered_uri()","credential_filtered_uri()","credentials_for()","credless_remotes()","cross_check_for_errors()","current_branch()","current_branch()","current_branch()","current_command()","current_command_chain()","current_dependencies()","current_env?()","current_locked_dependencies()","current_platform?()","current_platform?()","current_platform_locked?()","current_ruby()","current_ruby_platform_locked?()","current_time()","current_version()","debug()","debug()","debug()","debug?()","debug?()","debug?()","decide()","decision()","decision?()","decision_level()","decode_uri_component()","decode_www_form()","decode_www_form_component()","decoded_password()","decoded_user()","default_attempts()","default_bundle_dir()","default_bundle_dir()","default_bundler_source()","default_cache_path_for()","default_command()","default_force_ruby_platform()","default_gem?()","default_gem_spec()","default_gemfile()","default_gemfile()","default_glob?()","default_lockfile()","default_lockfile()","default_logger()","default_port()","default_port()","default_remote()","default_retries()","default_source()","default_source()","default_source()","default_stubs()","default_task()","define()","define_path_helpers()","define_task()","defined_event?()","definition()","definition_method()","delete()","delete()","delete_by_name()","deleted_deps()","deleted_gem?()","dependencies()","dependencies()","dependencies()","dependencies()","dependencies()","dependencies()","dependencies_count_for()","dependencies_eql?()","dependencies_for()","dependencies_for()","dependencies_for()","dependencies_for_source_changed?()","dependencies_installed?()","dependencies_to_gemfile()","dependencies_with_bundler()","dependency_api_available?()","dependency_api_uri()","dependency_names()","dependency_names_to_double_check()","dependency_names_to_double_check()","dependency_specs()","deprecated_ext_value?()","deprecated_rubocop_option()","depth()","depth_args()","deq()","derive()","desc()","desc()","destination_root()","destination_root=()","detect_idle_timeout()","diff()","difference()","difference()","different_sources?()","digest()","direct_requirements()","directory()","disable!()","disable_required_check!()","disabled?()","disjoint?()","dispatch()","dn()","dn=()","do_install()","doctor()","doctor()","double_check_for()","double_check_for()","double_check_for()","double_check_for_index()","download_cache_path()","download_gem()","download_gem()","downloader()","dump()","dump_hash()","dup_with_replaced_sources()","dylibs()","dylibs_darwin()","dylibs_ldd()","dynamic_width()","dynamic_width_stty()","dynamic_width_tput()","each()","each()","each()","each_strongly_connected_component()","each_strongly_connected_component()","each_strongly_connected_component_from()","each_strongly_connected_component_from()","earlier_version?()","echo?()","either_version_older_than_locked?()","empty()","empty()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty_directory()","enable!()","encode_uri_component()","encode_with()","encode_www_form()","encode_www_form_component()","enq()","enqueue_specs()","enqueued?()","ensure_all_gems_in_lockfile!()","ensure_equivalent_gemfile_and_lockfile()","ensure_safe_gem_name()","ensure_same_dependencies()","ensure_specs_are_compatible!()","enter()","entered?()","env()","env()","env_to_hash()","environment()","environment()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","equivalent_source?()","equivalent_sources?()","error()","error()","error()","error?()","error?()","escape()","escape()","escape()","escape_globs()","escape_html()","escape_userpass()","etag_for()","eval_gemfile()","eval_gemspec()","eval_yaml_gemspec()","evaluate()","exact()","exception_message()","exec()","exec_command()","executables()","execution_mode()","execution_mode=()","exemplary_spec()","exit_on_failure?()","exit_status()","expand()","expanded_dependencies()","expanded_original_path()","expanded_path()","expanded_platforms()","expired?()","expired_sources?()","explanation()","explicit_scope?()","ext_lock()","extension_cache_path()","extension_cache_slug()","extension_cache_slug()","extension_cache_slug()","extension_dir()","extension_dir_name()","extensions()","extensions()","extensions()","extensions=()","extensions_dir()","extensions_dir()","external_incompatibilities()","extra_clone_args()","extra_fetch_args()","extra_ref()","extract()","extract()","extract()","extract_circular_gems()","fail!()","fail_attempt()","failed?()","failed_specs()","failure?()","failure_message()","fallback_timeout=()","feature_flag()","fetch()","fetch()","fetch_all_remote_specs()","fetch_connection()","fetch_gem()","fetch_gem_if_possible()","fetch_gemspec_files()","fetch_latest_specs()","fetch_names()","fetch_platform()","fetch_platform()","fetch_spec()","fetch_specs()","fetch_uri()","fetch_valid_mirror_for()","fetchers()","fetchers()","file_collision()","filesystem_access()","filter()","filter=()","filter_dep_specs()","filter_matching_specs()","filter_prereleases()","filter_relevant()","filter_specs()","filter_uri()","filtered_specs_by_groups()","find_bundler()","find_by_name_and_platform()","find_by_namespace()","find_class_and_command_by_namespace()","find_class_and_task_by_namespace()","find_command_possibilities()","find_directory()","find_file()","find_gemfile()","find_in_source_paths()","find_latest_matching_spec()","find_latest_matching_spec_from_collection()","find_local_revision()","find_name()","find_names_to_relax()","find_proxy()","find_revision_for()","find_task_possibilities()","finish()","finished_installing?()","flag_deprecation()","for()","for()","for()","force_ruby_platform()","force_ruby_platform?()","formatted_usage()","formatted_usage()","fragment=()","from_env()","from_lock()","from_lock()","from_lock()","from_string()","from_stub()","from_superclass()","frozen_bundle?()","fu_blksize()","fu_clean_components()","fu_default_blksize()","fu_split_path()","fu_starting_path?()","fu_stream_blksize()","fu_windows?()","full_clone?()","full_gem_path()","full_gem_path()","full_gem_path=()","full_name()","full_name()","full_require_paths()","full_version()","fully_qualified_ref()","fund()","g()","gem()","gem()","gem_bindir()","gem_build_complete_path()","gem_cache()","gem_column_for()","gem_command()","gem_dependencies()","gem_dir()","gem_dir()","gem_install_dir()","gem_key()","gem_mirrors()","gem_not_found_message()","gem_path()","gem_path()","gem_platforms()","gem_push?()","gem_push_host()","gem_remote_fetcher()","gem_version()","gem_version_promoter()","gemfile()","gemfile()","gemfile_install()","gemfile_names()","gemfile_root()","gems_installed_for()","gemspec()","gemspec()","gemspec_cached_path()","generate()","generate()","generate!()","generate_bin()","generate_bin()","generate_bundler_executable_stubs()","generate_executable_stubs()","generate_plugins()","generate_split_buffer()","generate_standalone_bundler_executable_stubs()","generic()","generic()","generic!()","generic_local_platform()","generic_local_platform()","get()","get()","get()","get_console()","get_constant()","get_formatted_specs_and_deps()","get_input()","get_package()","get_version_semver_portion_value()","getwd()","getwd()","git()","git()","git_commit_sha()","git_local()","git_null()","git_present?()","git_proxy()","git_push()","git_remote_fetch()","git_retry()","git_scope()","git_source()","git_version()","git_version()","git_version()","git_version()","github()","glob_files_in_dir()","glob_for_display()","glob_pattern()","global_config_file()","global_index_file()","global_replacement_source()","global_root()","global_rubygems_source()","globs_for()","group()","group()","groups()","groups()","groups_text()","gsub_file()","guard_clean()","handle_argument_error?()","handle_argument_error?()","handle_error()","handle_no_command_error()","handle_no_method_error?()","handle_no_method_error?()","has_app_cache?()","has_app_cache?()","has_post_install_message?()","has_revision_cached?()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","have_option?()","head_revision()","headers=()","help()","help()","help()","help()","hexdigest!()","hidden?()","hidden?()","hidden?()","hidden?()","hierarchical?()","hierarchical?()","hint_text()","home()","hook()","hook()","hook_plugins()","host()","host=()","hostname()","hostname=()","http_proxy()","http_version()","humanized_ref()","identical?()","identical?()","identifier()","identifier()","identifier()","identifier()","identifier()","ignorable_dependency?()","ignore_config?()","ignores_prereleases?()","implicit_global_source?()","implicit_global_source_warning()","in_bundle?()","in_root()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include_prereleases()","included()","incompatibilities_for()","incompatibilities_for()","incomplete_ruby_specs?()","indent()","index()","index_file()","indirect_pins()","inflate()","info()","info()","info()","info?()","info?()","info_path()","info_roots()","inherited()","init()","initialize_copy()","initialize_pattern()","initialize_pattern()","initialize_regexp()","initialize_regexp()","inject()","inject()","inject()","inject_dependencies()","inject_into_class()","inject_into_file()","inject_into_module()","insert_into_file()","inside()","inside_app?()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install_all_sources()","install_and_restart_with()","install_definition()","install_error_message()","install_from_spec()","install_from_specs()","install_gem()","install_git()","install_if()","install_in_parallel()","install_local_git()","install_locked_bundler_and_restart_with_it_if_needed()","install_path()","install_path()","install_path()","install_path()","install_rubygems()","install_serially()","install_tasks()","install_with_worker()","installation_parallelization()","installed?()","installed?()","installed?()","installed?()","installed?()","installed?()","installed_plugins()","installed_specs()","intersect()","intersect()","intersect()","intersect()","intersect()","intersects?()","intersects?()","intersects?()","inverse()","invert()","invert()","invert()","invert()","invert()","invoke()","invoke()","invoke_from_option()","invoke_with_padding()","is_array()","is_bool()","is_credential()","is_not_within_comment?()","is_num()","is_string()","is_userinfo()","issue()","issues_url()","join()","join()","join()","jruby?()","justify()","k()","keep_trying?()","kernel_exec()","kernel_load()","key=()","key_for()","key_for()","last_attempt?()","last_version_number()","ldd_available?()","length()","length()","level()","level()","level=()","level=()","level=()","levenshtein_distance()","licenses()","lines()","link()","link()","link_entry()","link_entry()","link_file()","list()","list()","list()","list()","ln()","ln()","ln_s()","ln_s()","ln_sf()","ln_sf()","ln_sr()","ln_sr()","load()","load()","load_config()","load_env_plugins()","load_gemspec()","load_gemspec()","load_gemspec()","load_gemspec_uncached()","load_index()","load_marshal()","load_paths()","load_paths()","load_paths()","load_paths()","load_plugin()","load_plugin_files()","load_plugins()","load_plugins()","load_spec_files()","load_spec_files()","load_thorfile()","loaded_from()","loaded_from()","loaded_from_for()","loaded_gem_paths()","loaded_specs()","local!()","local!()","local!()","local?()","local_config_file()","local_index_file()","local_method?()","local_method?()","local_only!()","local_only!()","local_only!()","local_override!()","local_overrides()","local_platform()","local_platform()","local_platform()","local_root()","local_search()","local_specification_path()","local_specs()","local_specs()","locations()","lock()","lock()","lock()","lock()","lock()","lock_other_sources()","lock_rubygems_sources()","lock_sources()","locked_dependencies()","locked_gems()","locked_requirements()","locked_ruby_version()","locked_ruby_version_object()","lockfile_path()","lockfile_version()","lockfiles_equal?()","log_error()","log_specs()","logger()","long_desc()","lookup()","lookup_color()","loosen_names()","maglev?()","major?()","major_deprecation()","major_version()","make_regexp()","make_regexp()","makedirs()","makedirs()","manually_installed?()","map()","map_sources()","mark_loaded()","marshal_spec_dir()","match_gem?()","match_platform()","match_platforms?()","match_spec?()","matches()","matches?()","matches_current_ruby?()","matches_current_ruby?()","matches_current_rubygems?()","matches_current_rubygems?()","matches_for_glob()","materialize()","materialize()","materialize_for_installation()","materialized_for_all_platforms()","max_retries=()","max_version=()","may_include_redundant_platform_specific_gems?()","md5_available?()","merge()","merge()","merge!()","merge_path()","merged_gem_lockfile_sections!()","merged_gem_lockfile_sections?()","message()","message()","message()","message()","message()","message()","message()","meta?()","meta?()","metadata_dependencies()","metadata_dependencies()","metadata_dependency()","method_added()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_option()","method_options()","method_visibility()","min_version=()","mingw?()","minor?()","mirror_for()","missing_extensions?()","missing_specs()","missing_specs()","missing_specs?()","mkdir()","mkdir()","mkdir_p()","mkdir_p()","mkdir_p()","mkpath()","mkpath()","most_specific_locked_platform()","most_specific_locked_platform?()","move()","move()","move_version_to_end()","mri?()","mswin64?()","mswin?()","multiple_global_source_warning()","multiple_remotes?()","mute()","mute?()","mv()","mv()","name()","name()","name()","name()","name()","name_for_explicit_dependency_source()","names()","names()","names_path()","namespace()","namespace()","namespace_from_thor_class()","namespaces_in_content()","needs_switching?()","negative?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_deps()","new_issue_url()","new_specs()","new_value()","next_package_to_try()","no?()","no?()","no?()","no_commands()","no_commands?()","no_commands_context()","no_remotes?()","no_resolve_needed?()","no_tasks()","no_versions_incompatibility_for()","no_versions_incompatibility_for()","non_default_explicit_sources()","non_global_rubygems_sources()","nondevelopment_dependencies()","normalize()","normalize!()","normalize_group_options()","normalize_groups()","normalize_hash()","normalize_options()","normalize_ranges()","normalize_settings()","normalize_source()","normalize_suffix()","normalize_uri()","normalize_uri()","normalize_uri()","normalized_constraint()","normalized_linux_version_ext()","not_debugging?()","not_debugging?()","not_pinned?()","nothing_changed?()","nothing_outdated_message()","opaque=()","open()","open_editor()","option()","options()","options()","options()","options()","options_of()","options_to_lock()","origin()","original_env()","original_exec()","original_system()","os_match()","other_specs_matching_message()","otool_available?()","out_of_space_message()","outdated()","outdated?()","output_fund_metadata_summary()","output_post_install_messages()","output_without_groups_message()","overlap?()","override_for()","package_name()","package_path()","padding=()","parallel_compact_index_client()","parent_folder()","parent_setting_for()","parse()","parse()","parse()","parse()","parse()","parse_bundled_with()","parse_constraint()","parse_dependency()","parse_dependency()","parse_dependency()","parse_dependency()","parse_dependency()","parse_dn()","parse_gem()","parse_line_number_from_description()","parse_metadata()","parse_platform()","parse_query()","parse_range()","parse_ruby()","parse_source()","parse_spec()","parser()","partition_versions()","password()","password=()","patch_level_options()","path()","path()","path()","path()","path()","path=()","path?()","path_separator()","paths()","perform_bundle_install()","permission_type()","pin_locally_available_names()","pinned_spec_names()","pinned_to_full_sha?()","pins()","plain_specs()","plain_specs=()","platform()","platform()","platform_specific!()","platform_specificity_match()","platform_specificity_match()","platform_version_match()","platforms()","platforms_match?()","plugin()","plugin()","plugin_commands()","plugin_path()","pool_available()","pool_shutdown()","pool_size()","pop()","pop()","port=()","positive?()","post_install()","post_install()","post_install_message()","post_reset_hooks()","post_sort()","pre?()","pre_install_checks()","precompute_source_requirements_for_indirect_dependencies?()","preferred_gemfile_name()","prepare_dependencies()","prepare_extension_build()","prepare_message()","prepend_file()","prepend_to_file()","prerelease?()","prerelease_specified?()","pretty_dep()","pretty_dependency()","pretty_print()","pretty_values_for()","previous_spec()","print_command()","print_gem()","print_gem_info()","print_gem_path()","print_gem_version()","print_gems()","print_gems_table()","print_in_columns()","print_indented()","print_major_deprecations!()","print_options()","print_post_install_message()","print_table()","print_using_message()","print_wrapped()","printable_commands()","printable_commands()","printable_tasks()","printable_tasks()","printable_value()","prints_major_deprecations?()","pristine()","private_key=()","private_method?()","private_method?()","probe_writtable_socket()","proc()","process_queue()","process_specs()","process_title()","processor_count()","propagate()","propagate_incompatibility()","provides?()","proxy=()","proxy_bypass?()","proxy_from_env()","prune_cache()","prune_gem_cache()","prune_git_and_path_cache()","public_command()","public_task()","push()","push()","pwd()","pwd()","pwd()","query=()","quiet?()","quiet?()","raise_not_found!()","rake_classes()","rake_namespace()","ranges()","raw_require_paths()","rbx?()","read_binary()","read_file()","read_file()","readline()","readline()","readline()","ready_to_enqueue?()","reconnect()","reconnect_ssl()","redact_and_check_presence()","redefine_method()","reformatted_help_args()","refspec()","regexp()","register()","register_plugin()","register_plugin()","register_scheme()","registry=()","relation()","relation()","relation()","relative?()","relative_matches()","relative_path()","relative_to_original_destination_root()","release?()","released?()","reload()","remembered_flag_deprecation()","remembered_negative_flag_deprecation()","remote!()","remote!()","remote!()","remote!()","remote!()","remote_names()","remote_specs()","remote_specs()","remote_uri()","remote_uri()","remotes_for_spec()","remove()","remove()","remove()","remove()","remove()","remove_argument()","remove_auth()","remove_auth()","remove_class_option()","remove_command()","remove_deps()","remove_dir()","remove_dir()","remove_dir()","remove_dir()","remove_entry()","remove_entry()","remove_entry_secure()","remove_entry_secure()","remove_file()","remove_file()","remove_file()","remove_gems_from_dependencies()","remove_gems_from_gemfile()","remove_interrupt_handler()","remove_invocation()","remove_nested_blocks()","remove_platform()","remove_ruby_from_platforms_if_necessary!()","remove_task()","removed_specs()","replace!()","replace_bin_path()","replace_entrypoints()","replace_gem()","replace_sources!()","replace_with_backup()","replies?()","report()","repository_for()","request()","request()","request_issue_report_for()","request_uri()","request_uri()","requested_dependencies()","requested_groups()","requested_specs()","require()","require()","require_path_or_force()","require_paths()","require_thor_actions()","require_tree_for_spec()","required_arguments_for()","required_arguments_for()","required_options()","required_options()","required_ruby_version()","required_ruby_version=()","requirement_satisfied_by?()","requirement_to_constraint()","requirement_to_range()","requirement_to_range()","requires_checkout?()","reset()","reset()","reset()","reset!()","reset!()","reset!()","reset_paths!()","reset_rubygems!()","reset_settings_and_root!()","resolution_mode=()","resolution_packages()","resolve()","resolve_conflict()","resolve_if_needed()","resolve_name()","resolve_only_locally!()","resolve_path()","resolve_remotely!()","resolve_update_version_from()","resolve_with_cache!()","resolver()","respond_to?()","respond_to?()","respond_to_missing?()","restart_with()","restart_with_locked_bundler_if_needed()","restore()","result()","retrieve_active_spec()","reverse_rubygems_kernel_mixin()","reverse_rubygems_kernel_mixin()","revision()","revision()","rg_extension_dir()","rg_full_gem_path()","rg_loaded_from()","rm()","rm()","rm_f()","rm_f()","rm_r()","rm_r()","rm_rf()","rm_rf()","rm_rf()","rmdir()","rmdir()","rmtree()","rmtree()","root()","root()","root()","root()","root()","root()","root()","root()","root?()","root?()","root?()","root_dependencies()","root_dependencies()","root_version()","rotate()","route_from()","route_to()","rubocop_version()","ruby()","ruby?()","ruby_command()","ruby_engine()","ruby_platform_materializes_to_ruby_platform?()","ruby_scope()","ruby_shebang?()","ruby_version()","rubygem_push()","rubygems()","rubygems_aggregate_class()","rubygems_aggregate_class()","rubygems_dir()","rubygems_dir()","rubygems_remotes()","rubygems_sources()","rule()","rules()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run_command()","run_hooks()","run_ruby_script()","running?()","running_older_than?()","rust_builder_required_rubygems_version()","safe_load_marshal()","safe_unlink()","safe_unlink()","same_deps()","same_deps()","same_specificity()","same_specificity()","satisfier()","satisfies?()","satisfies?()","satisfies?()","save_index()","save_plugin()","save_plugins()","say()","say()","say_error()","say_status()","scheme=()","scheme_list()","scope()","scope=()","scope_options()","search()","search_all()","search_by_spec()","search_up()","sections_in_lockfile()","sections_to_ignore()","security_policies()","security_policy_keys()","segments()","segments_do_not_match?()","select()","select_best_platform_match()","select_best_platform_match()","select_spec()","select_versions()","select_versions()","select_versions()","self_manager()","sequential_execution_mode!()","sequentially()","serial_compact_index_client()","serialize_gemspecs_in()","serialized_exception_for()","set()","set()","set_attributes()","set_bundle_environment()","set_bundle_variables()","set_color()","set_color()","set_command_option()","set_command_option_if_given()","set_dn()","set_env()","set_eoutvar()","set_extensions()","set_filter()","set_global()","set_headers()","set_host()","set_host()","set_installed_by_version()","set_key()","set_local()","set_local!()","set_opaque()","set_password()","set_password()","set_path()","set_path()","set_path()","set_port()","set_port()","set_rubylib()","set_rubyopt()","set_scheme()","set_scope()","set_to()","set_typecode()","set_user()","set_user()","set_userinfo()","set_userinfo()","settings()","settings_flag()","settings_method()","settings_option()","setup()","setup()","setup_cache_all()","setup_manpath()","setup_solver()","setup_sources_for_resolve()","sh()","sh_with_input()","sh_with_status()","sha1()","shell()","shell()","shortref_for_display()","shortref_for_path()","should_include?()","show()","show_pretty_values_for()","show_warning()","shutdown()","shutdown()","shutdown()","shutdown_connections()","silence()","silence()","similar_word_list()","similar_words()","single_line?()","single_version_string()","size()","size()","skip()","skip=()","skip_during()","slice_body()","snake_case()","solve()","solve_versions()","solved?()","sort!()","sort_best_platform_match()","sort_best_platform_match()","sort_dep_specs()","sort_obj()","sort_obj()","sort_versions()","sort_versions()","sort_versions_by_preferred()","sorted()","sorted_spec_names()","source()","source()","source()","source()","source()","source()","source=()","source?()","source?()","source_for()","source_from_lock()","source_list_for()","source_map()","source_paths()","source_paths()","source_paths_for_search()","source_plugin()","source_requirements()","source_root()","source_root()","span()","spec()","spec_cache_dirs()","spec_for_dependency()","spec_for_gem()","spec_from_gem()","spec_git_paths()","spec_matches_for_glob()","spec_missing_extensions?()","spec_names()","spec_names()","spec_names()","spec_names()","spec_not_found()","spec_settings()","specific?()","specific_failure_message()","specific_gem_for()","specificity_score()","specs()","specs()","specs()","specs()","specs()","specs()","specs()","specs()","specs()","specs()","specs()","specs_by_name()","specs_by_name_and_version()","specs_changed?()","specs_for()","specs_for_dependency()","specs_for_names()","specs_for_source_changed?()","specs_path()","specs_with_retry()","spell_checker()","spell_checker()","split()","split()","split()","split_path()","split_specific_setting_for()","split_userinfo()","ssl()","ssl_timeout=()","ssl_version=()","standard_version()","start()","start()","start()","start()","start_resolution()","status_code()","status_code()","stderr()","stdout()","stop()","stop_on_unknown_option!()","stop_threads()","store_connection()","strict_args_position!()","strict_rm_rf()","strictly_higher?()","strictly_lower?()","strip_leading_spaces()","strongly_connected_components()","strongly_connected_components()","stub_rubygems()","stub_set_spec()","subclass_files()","subclasses()","subcommand()","subcommand_classes()","subcommand_help()","subcommands()","subset?()","subtask()","subtask_help()","subtasks()","suffix_pattern()","supports_bundler_trampolining?()","supports_cloning_with_no_tags?()","supports_fetching_unreachable_refs?()","supports_minus_c?()","suppress_configured_credentials()","symlink()","symlink()","synchronize()","system()","system_bindir()","table_header()","tag_prefix=()","tag_version()","task()","task_help()","tasks()","tell_err()","tell_me()","template()","temporary()","terminal_width()","then()","thor()","thor_classes_in()","thor_root()","thor_root_glob()","tmp()","tmp()","tmp_home_path()","to=()","to_a()","to_array()","to_ary()","to_bool()","to_definition()","to_dependency_hash()","to_gemfile()","to_gemfile()","to_gemfile()","to_h()","to_hash()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_mailtext()","to_rfc822text()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_socket_address()","to_specs()","to_specs()","to_yaml()","to_yaml()","to_yaml_properties()","touch()","touch()","trace()","trace()","travis_removal_info()","truffleruby?()","truncate()","try_create()","tsort()","tsort()","tsort_each()","tsort_each()","tsort_each_child()","tsort_each_child()","tsort_each_node()","tsort_each_node()","typecode=()","ui()","ui=()","ui=()","unbundled_env()","unbundled_exec()","unbundled_system()","uncomment_lines()","undo_replacements()","unescape()","unescape()","unescape()","uninstall()","uninstall()","union()","union()","union()","union()","unix?()","unknown_sections_in_lockfile()","unlock!()","unlock!()","unlock?()","unlock_names()","unlocking?()","unmarshalled_dep_gems()","unmet_dependency_names()","unmet_deps()","unmet_deps()","unmet_deps()","unprinted_warnings()","unprinted_warnings()","unregister_plugin()","unrestrict_names()","unsatisfied()","unset()","update()","update()","update()","update_and_parse_checksums!()","update_bundler_and_restart_with_it_if_needed()","update_info()","update_mirror()","update_present_via_semver_portions()","updating?()","upper_invert()","upper_invert()","uptodate?()","uptodate?()","uri()","uri=()","uri_hash()","uri_hash()","uri_with_specifiers()","url()","use()","use_api()","use_exact_resolved_specifications?()","use_path_completion?()","use_system_gems?()","user()","user=()","user_agent()","user_bundle_path()","user_cache()","user_home()","user_home()","user_home()","userinfo()","userinfo=()","valid?()","valid_keys()","validate()","validate!()","validate!()","validate!()","validate!()","validate_bundle_path()","validate_bundler_checksum()","validate_cmd!()","validate_ext_name()","validate_keys()","validate_options!()","validate_platforms!()","validate_plugin!()","validate_ruby!()","validate_runtime!()","validate_rust_builder_rubygems_version()","validate_scope!()","validate_spec()","validate_spec()","validate_uri_scheme!()","value_for()","verbalize_groups()","verify()","verify_callback=()","verify_changed_sources!()","verify_depth=()","verify_group_exists()","verify_mode=()","version()","version()","version()","version()","version()","version_color()","version_dir()","version_message()","version_message()","version_of()","version_prefix()","version_tag()","versions()","versions()","versions_for()","versions_for()","versions_path()","versions_string()","visit()","viz()","viz()","wait_for_writtable_socket()","warn()","warn()","warn?()","warn?()","warn_ambiguous_gems()","warn_if_root()","warn_on_git_protocol()","warn_on_outdated_bundler()","warn_unused_scope()","what_required()","which()","windows?()","with()","with()","with_clean_env()","with_clean_git_env()","with_env()","with_friendly_errors()","with_level()","with_original_env()","with_padding()","with_path()","with_source()","with_unbundled_env()","without_groups_message()","word_wrap()","work()","worker_pool()","wrap()","wrapped_pool()","write()","write()","write_line()","write_to_gemfile()","x64_mingw?()","yes?()","yes?()","yes?()"],"longSearchIndex":["ambiguouscommanderror","ambiguoustaskerror","bundler","bundler::apiresponseinvaliddependencieserror","bundler::apiresponsemismatcherror","bundler::buildmetadata","bundler::bundlererror","bundler::cli","bundler::cli::add","bundler::cli::binstubs","bundler::cli::cache","bundler::cli::check","bundler::cli::clean","bundler::cli::common","bundler::cli::config","bundler::cli::config::base","bundler::cli::console","bundler::cli::doctor","bundler::cli::exec","bundler::cli::fund","bundler::cli::gem","bundler::cli::info","bundler::cli::init","bundler::cli::inject","bundler::cli::install","bundler::cli::issue","bundler::cli::list","bundler::cli::lock","bundler::cli::open","bundler::cli::outdated","bundler::cli::platform","bundler::cli::plugin","bundler::cli::pristine","bundler::cli::remove","bundler::cli::show","bundler::cli::update","bundler::cli::viz","bundler::compactindexclient","bundler::compactindexclient::cache","bundler::compactindexclient::error","bundler::compactindexclient::gemparser","bundler::compactindexclient::updater","bundler::compactindexclient::updater::mismatchedchecksumerror","bundler::connectionpool","bundler::connectionpool::error","bundler::connectionpool::poolshuttingdownerror","bundler::connectionpool::timedstack","bundler::connectionpool::timeouterror","bundler::connectionpool::wrapper","bundler::currentruby","bundler::cyclicdependencyerror","bundler::definition","bundler::dependency","bundler::deployment","bundler::deprecate","bundler::deprecatederror","bundler::digest","bundler::directoryremovalerror","bundler::dsl","bundler::dsl::dslerror","bundler::endpointspecification","bundler::env","bundler::environmentpreserver","bundler::featureflag","bundler::fetchmetadata","bundler::fetcher","bundler::fetcher::authenticationforbiddenerror","bundler::fetcher::authenticationrequirederror","bundler::fetcher::badauthenticationerror","bundler::fetcher::base","bundler::fetcher::certificatefailureerror","bundler::fetcher::compactindex","bundler::fetcher::dependency","bundler::fetcher::downloader","bundler::fetcher::fallbackerror","bundler::fetcher::index","bundler::fetcher::networkdownerror","bundler::fetcher::sslerror","bundler::fetcher::toomanyrequestserror","bundler::fileutils","bundler::fileutils::dryrun","bundler::fileutils::nowrite","bundler::fileutils::streamutils_","bundler::fileutils::verbose","bundler::forceplatform","bundler::friendlyerrors","bundler::gemhelper","bundler::gemhelpers","bundler::gemhelpers::platformmatch","bundler::geminstaller","bundler::gemnotfound","bundler::gemrequireerror","bundler::gemversionpromoter","bundler::gemfileerror","bundler::gemfileevalerror","bundler::gemfilelocknotfound","bundler::gemfilenotfound","bundler::gemspecerror","bundler::genericsystemcallerror","bundler::giterror","bundler::graph","bundler::graph::graphvizclient","bundler::httperror","bundler::index","bundler::injector","bundler::installerror","bundler::installhookerror","bundler::installer","bundler::invalidoption","bundler::lazyspecification","bundler::lockfileerror","bundler::lockfilegenerator","bundler::lockfileparser","bundler::marshalerror","bundler::matchmetadata","bundler::matchplatform","bundler::matchremotemetadata","bundler::mirrorsockets","bundler::nospaceondeviceerror","bundler::operationnotsupportederror","bundler::parallelinstaller","bundler::parallelinstaller::specinstallation","bundler::patherror","bundler::permissionerror","bundler::persistent","bundler::persistent::net","bundler::persistent::net::http","bundler::persistent::net::http::persistent","bundler::persistent::net::http::persistent::error","bundler::plugin","bundler::plugin::api","bundler::plugin::api::source","bundler::plugin::dsl","bundler::plugin::dsl::plugingemfileerror","bundler::plugin::events","bundler::plugin::index","bundler::plugin::index::commandconflict","bundler::plugin::index::sourceconflict","bundler::plugin::installer","bundler::plugin::installer::git","bundler::plugin::installer::rubygems","bundler::plugin::malformattedplugin","bundler::plugin::plugininstallerror","bundler::plugin::sourcelist","bundler::plugin::undefinedcommanderror","bundler::plugin::unknownsourceerror","bundler::pluginerror","bundler::processlock","bundler::productionerror","bundler::pubgrub","bundler::pubgrub::assignment","bundler::pubgrub::basicpackagesource","bundler::pubgrub::failurewriter","bundler::pubgrub::incompatibility","bundler::pubgrub::package","bundler::pubgrub::partialsolution","bundler::pubgrub::rubygems","bundler::pubgrub::solvefailure","bundler::pubgrub::staticpackagesource","bundler::pubgrub::staticpackagesource::dsl","bundler::pubgrub::term","bundler::pubgrub::versionconstraint","bundler::pubgrub::versionrange","bundler::pubgrub::versionrange::empty","bundler::pubgrub::versionsolver","bundler::pubgrub::versionunion","bundler::remotespecification","bundler::resolver","bundler::resolver::base","bundler::resolver::candidate","bundler::resolver::incompatibility","bundler::resolver::package","bundler::resolver::root","bundler::resolver::specgroup","bundler::retry","bundler::rubydsl","bundler::rubygemsgeminstaller","bundler::rubyversion","bundler::rubyversionmismatch","bundler::rubygemsintegration","bundler::rubygemsintegration::gem","bundler::runtime","bundler::safemarshal","bundler::securityerror","bundler::selfmanager","bundler::settings","bundler::settings::mirror","bundler::settings::mirrorconfig","bundler::settings::mirrors","bundler::settings::tcpsocketprobe","bundler::settings::validator","bundler::settings::validator::rule","bundler::sharedhelpers","bundler::similaritydetector","bundler::socketaddress","bundler::solvefailure","bundler::source","bundler::source::gemspec","bundler::source::git","bundler::source::git::gitcommanderror","bundler::source::git::gitnotallowederror","bundler::source::git::gitnotinstallederror","bundler::source::git::gitproxy","bundler::source::git::missinggitrevisionerror","bundler::source::metadata","bundler::source::path","bundler::source::path::installer","bundler::source::rubygems","bundler::source::rubygems::remote","bundler::source::rubygemsaggregate","bundler::sourcelist","bundler::sourcemap","bundler::specset","bundler::standalone","bundler::stubspecification","bundler::tsort","bundler::tsort::cyclic","bundler::temporaryresourceerror","bundler::thor","bundler::thor::actions","bundler::thor::actions::capturableerb","bundler::thor::actions::classmethods","bundler::thor::base","bundler::thor::base::classmethods","bundler::thor::command","bundler::thor::dynamiccommand","bundler::thor::dynamictask","bundler::thor::group","bundler::thor::hiddencommand","bundler::thor::hiddentask","bundler::thor::invocation","bundler::thor::invocation::classmethods","bundler::thor::lineeditor","bundler::thor::lineeditor::basic","bundler::thor::lineeditor::readline","bundler::thor::lineeditor::readline::pathcompletion","bundler::thor::nestedcontext","bundler::thor::rakecompat","bundler::thor::shell","bundler::thor::shell::basic","bundler::thor::shell::color","bundler::thor::shell::html","bundler::thor::task","bundler::thor::util","bundler::threadcreationerror","bundler::ui","bundler::ui::rgproxy","bundler::ui::shell","bundler::ui::silent","bundler::uri","bundler::uri::badurierror","bundler::uri::error","bundler::uri::ftp","bundler::uri::file","bundler::uri::generic","bundler::uri::http","bundler::uri::https","bundler::uri::invalidcomponenterror","bundler::uri::invalidurierror","bundler::uri::ldap","bundler::uri::ldaps","bundler::uri::mailto","bundler::uri::parser","bundler::uri::regexp","bundler::uri::rfc2396_parser","bundler::uri::rfc2396_regexp","bundler::uri::rfc2396_regexp::pattern","bundler::uri::schemes","bundler::uri::ws","bundler::uri::wss","bundler::uricredentialsfilter","bundler::urinormalizer","bundler::virtualprotocolerror","bundler::worker","bundler::worker::wrappedexception","bundler::yamlserializer","bundler::yamlsyntaxerror","error","gem","gem::dependency","gem::platform","gem::requirement","gem::requirement::correcthashforlambdaoperator","gem::requirement::orderindependentcomparison","gem::specification","gem::specification::yamlbackfiller","invocationerror","kernel","malformattedargumenterror","object","requiredargumentmissingerror","undefinedcommanderror","undefinedcommanderror::spellchecker","undefinedtaskerror","unknownargumenterror","unknownargumenterror::spellchecker","bundler::uri::generic#+()","bundler::specset#-()","bundler::uri::generic#-()","bundler::connectionpool::timedstack#<<()","bundler::index#<<()","bundler::specset#<<()","bundler::pubgrub::package#<=>()","bundler::remotespecification#<=>()","bundler::resolver::candidate#<=>()","bundler::index#==()","bundler::lazyspecification#==()","bundler::plugin::api::source#==()","bundler::pubgrub::versionconstraint#==()","bundler::pubgrub::versionrange#==()","bundler::pubgrub::versionrange::empty#==()","bundler::pubgrub::versionunion#==()","bundler::resolver::candidate#==()","bundler::resolver::package#==()","bundler::rubyversion#==()","bundler::settings::mirror#==()","bundler::source::git#==()","bundler::source::metadata#==()","bundler::source::path#==()","bundler::source::rubygems#==()","bundler::uri::generic#==()","gem::requirement::orderindependentcomparison#==()","gem::platform#===()","bundler#uri()","bundler::uri()","bundler::index#[]()","bundler::resolver::base#[]()","bundler::settings#[]()","bundler::specset#[]()","bundler::specset#[]=()","bundler::resolver::specgroup#__dependencies()","bundler::lazyspecification#__materialize__()","bundler::endpointspecification#__swap__()","bundler::remotespecification#__swap__()","bundler::uri::_decode_uri_component()","bundler::uri::_encode_uri_component()","bundler::graph#_groups()","bundler::endpointspecification#_local_specification()","bundler::graph#_make_label()","bundler::graph#_populate_relations()","bundler::endpointspecification#_remote_specification()","bundler::remotespecification#_remote_specification()","bundler::stubspecification#_remote_specification()","gem::requirement::orderindependentcomparison#_requirements_sorted?()","gem::requirement::orderindependentcomparison#_with_sorted_requirements()","bundler::worker#abort_threads()","bundler::uri::generic#absolute()","bundler::uri::generic#absolute?()","bundler::thor::lineeditor::readline::pathcompletion#absolute_matches()","bundler::permissionerror#action()","bundler::stubspecification#activated()","bundler::stubspecification#activated=()","bundler::cli#add()","bundler::pubgrub::staticpackagesource::dsl#add()","bundler::pubgrub::partialsolution#add_assignment()","bundler::lockfilegenerator#add_bundled_with()","bundler::ui::shell#add_color()","bundler::ui::silent#add_color()","bundler::plugin#add_command()","bundler::definition#add_current_platform()","bundler::rubygemsintegration#add_default_gems_to()","bundler::lockfilegenerator#add_dependencies()","bundler::plugin::api::source#add_dependency_names()","bundler::source#add_dependency_names()","bundler::thor::actions#add_file()","bundler::plugin::sourcelist#add_git_source()","bundler::sourcelist#add_git_source()","bundler::dsl#add_git_sources()","bundler::sourcelist#add_global_rubygems_remote()","bundler::plugin#add_hook()","bundler::pubgrub::versionsolver#add_incompatibility()","bundler::worker#add_interrupt_handler()","bundler::thor::actions#add_link()","bundler::lockfilegenerator#add_locked_ruby_version()","bundler::sourcelist#add_path_source()","bundler::definition#add_platform()","bundler::lockfilegenerator#add_platforms()","bundler::sourcelist#add_plugin_source()","bundler::source::rubygems#add_remote()","bundler::plugin::sourcelist#add_rubygems_source()","bundler::sourcelist#add_rubygems_source()","bundler::thor::actions::classmethods#add_runtime_options!()","bundler::lockfilegenerator#add_section()","bundler::index#add_source()","bundler::plugin#add_source()","bundler::sourcelist#add_source_to_list()","bundler::lockfilegenerator#add_sources()","bundler::lockfilegenerator#add_specs()","bundler::thor::lineeditor::readline#add_to_history?()","bundler::rubygemsintegration#add_to_load_path()","bundler::definition#additional_base_requirements_for_resolve()","bundler::sourcelist#aggregate_global_source?()","bundler::cli::aliases_for()","bundler::settings#all()","bundler::settings::mirrorconfig#all?()","bundler::cli::all_aliases()","bundler::thor::base::classmethods#all_commands()","bundler::parallelinstaller::specinstallation#all_dependencies()","bundler::bundlererror::all_errors()","bundler::sourcemap#all_requirements()","bundler::plugin::sourcelist#all_sources()","bundler::sourcelist#all_sources()","bundler::rubygemsintegration#all_specs()","bundler::thor::base::classmethods#all_tasks()","bundler::pubgrub::basicpackagesource#all_versions_for()","bundler::pubgrub::staticpackagesource#all_versions_for()","bundler::resolver#all_versions_for()","bundler::source::git::gitproxy#allow?()","bundler::source::git#allow_git_ops?()","bundler::thor::base::classmethods#allow_incompatible_default_type!()","bundler::gemhelper#allowed_push_host()","bundler::source::git::gitproxy#allowed_with_path()","bundler::pubgrub::versionconstraint#allows_all?()","bundler::pubgrub::versionrange#allows_all?()","bundler::pubgrub::versionrange::empty#allows_all?()","bundler::pubgrub::versionunion#allows_all?()","bundler::pubgrub::versionconstraint#allows_any?()","bundler::pubgrub::versionrange#allows_any?()","bundler::pubgrub::versionunion#allows_any?()","bundler::gemhelper#already_tagged?()","bundler::thor::shell::basic#answer_match()","bundler::pubgrub::versionconstraint::any()","bundler::pubgrub::versionrange::any()","bundler::mirrorsockets#any?()","bundler::pubgrub::versionconstraint#any?()","bundler::pubgrub::versionrange#any?()","bundler::pubgrub::versionrange::empty#any?()","bundler::pubgrub::versionunion#any?()","bundler::fetcher::base#api_fetcher?()","bundler::fetcher::compactindex#api_fetcher?()","bundler::fetcher::dependency#api_fetcher?()","bundler::source::rubygems#api_fetchers()","bundler::app_cache()","bundler::plugin::api::source#app_cache_dirname()","bundler::source::git#app_cache_dirname()","bundler::source::path#app_cache_dirname()","bundler::plugin::api::source#app_cache_path()","bundler::settings#app_cache_path()","bundler::source::path#app_cache_path()","bundler::app_config_path()","bundler::thor::actions#append_file()","bundler::env::append_formatted_table()","bundler::injector#append_to()","bundler::thor::actions#append_to_file()","bundler::thor::actions#apply()","bundler::source::rubygems::remote#apply_auth()","bundler::worker#apply_func()","bundler::thor::shell::color#are_colors_disabled?()","bundler::thor::shell::color#are_colors_supported?()","bundler::thor::base::classmethods#argument()","bundler::thor::base::classmethods#arguments()","bundler::settings#array_to_s()","bundler::source::gemspec#as_path_source()","bundler::thor::shell::basic#as_unicode()","bundler::thor::shell::basic#ask()","bundler::thor::shell::html#ask()","bundler::ui::shell#ask()","bundler::ui::silent#ask()","bundler::cli::gem#ask_and_set()","bundler::cli::gem#ask_and_set_ci()","bundler::cli::gem#ask_and_set_linter()","bundler::cli::gem#ask_and_set_test_framework()","bundler::thor::shell::basic#ask_filtered()","bundler::cli::common::ask_for_spec_from()","bundler::thor::shell::basic#ask_simply()","bundler::retry#attempt()","bundler::retry::attempts()","bundler::retry#attempts()","bundler::uri::ldap#attributes()","bundler::uri::ldap#attributes=()","bundler::uri::http#authority()","bundler::cli#auto_install()","bundler::selfmanager#autoswitching_applies?()","bundler::connectionpool#available()","bundler::fetcher::base#available?()","bundler::fetcher::compactindex#available?()","bundler::fetcher::dependency#available?()","bundler::thor::lineeditor::basic::available?()","bundler::thor::lineeditor::readline::available?()","bundler::rubygemsintegration#backport_ext_builder_monitor()","bundler::pubgrub::partialsolution#backtrack()","bundler::environmentpreserver#backup()","bundler::thor::banner()","bundler::thor::group::banner()","bundler::cli::config#base()","bundler::rubygemsgeminstaller#base64digest!()","bundler::source::git#base_name()","bundler::thor::lineeditor::readline::pathcompletion#base_path()","bundler::resolver#base_requirements()","bundler::resolver::base#base_requirements()","bundler::thor::base::classmethods#basename()","bundler::thor::lineeditor::best_available()","bundler::bin_path()","bundler::rubygemsintegration#bin_path()","bundler::endpointspecification#bindir()","bundler::cli#binstubs()","bundler::definition::build()","bundler::index::build()","bundler::rubygemsintegration#build()","bundler::uri::ftp::build()","bundler::uri::file::build()","bundler::uri::generic::build()","bundler::uri::http::build()","bundler::uri::ldap::build()","bundler::uri::mailto::build()","bundler::uri::ws::build()","bundler::uri::generic::build2()","bundler::rubygemsintegration#build_args()","bundler::rubygemsintegration#build_args=()","bundler::resolver::base#build_base_requirements()","bundler::gemhelper#build_checksum()","bundler::endpointspecification#build_dependency()","bundler::rubygemsgeminstaller#build_extensions()","bundler::gemhelper#build_gem()","bundler::rubygemsintegration#build_gem()","bundler::injector#build_gem_lines()","bundler::source::rubygemsaggregate#build_index()","bundler::uri::ldap#build_path_query()","bundler::buildmetadata::built_at()","bundler::gemhelper#built_gem_path()","bundler::bundle_path()","bundler::fetcher::compactindex#bundle_worker()","bundler::lockfileparser::bundled_with()","bundler::fetcher#bundler_cert_store()","bundler::cli::gem#bundler_dependency_version()","bundler::bundler_major_version()","bundler::resolver#bundler_not_found_message()","bundler::standalone#bundler_path()","bundler::resolver#bundler_pinned_to_current_version?()","bundler::sharedhelpers#bundler_ruby_lib()","bundler::definition#bundler_version_to_lock()","bundler::cli::doctor#bundles_for_gem()","bundler::persistent::net::http::persistent#ca_file=()","bundler::persistent::net::http::persistent#ca_path=()","bundler::cli#cache()","bundler::plugin#cache()","bundler::plugin::api::source#cache()","bundler::runtime#cache()","bundler::source::git#cache()","bundler::source::path#cache()","bundler::source::rubygems#cache()","bundler::plugin::api#cache_dir()","bundler::fetcher::compactindex#cache_path()","bundler::plugin::installer::git#cache_path()","bundler::plugin::installer::rubygems#cache_path()","bundler::source::git#cache_path()","bundler::source::rubygems#cache_path()","bundler::source::rubygems::remote#cache_slug()","bundler::plugin::api::source#cached!()","bundler::source#cached!()","bundler::source::path#cached!()","bundler::source::rubygems#cached!()","bundler::sourcelist#cached!()","bundler::source::git#cached?()","bundler::source::rubygems#cached_built_in_gem()","bundler::source::rubygems#cached_gem()","bundler::source::rubygems#cached_path()","bundler::source::git#cached_revision()","bundler::source::git#cached_revision_checked_out?()","bundler::source::rubygems#cached_specs()","bundler::source::rubygems#caches()","bundler::parallelinstaller::call()","bundler::parallelinstaller#call()","bundler::thor::util::camel_case()","bundler::thor::shell::basic#can_display_colors?()","bundler::thor::shell::color#can_display_colors?()","bundler::thor::shell::html#can_display_colors?()","bundler::plugin::api::source#can_lock?()","bundler::source#can_lock?()","bundler::source::rubygems#can_lock?()","bundler::source::git::gitproxy#capture()","bundler::thor::actions#capture()","bundler::source::git::gitproxy#capture3_args_for()","bundler::fileutils#cd()","bundler::fileutils::cd()","bundler::persistent::net::http::persistent#cert=()","bundler::persistent::net::http::persistent#cert_store=()","bundler::persistent::net::http::persistent#certificate=()","bundler::definition#change_reason()","bundler::fileutils#chdir()","bundler::fileutils::chdir()","bundler::sharedhelpers#chdir()","bundler::cli#check()","bundler::cli::doctor#check!()","bundler::source::git::gitproxy#check_allowed()","bundler::thor::base::classmethods#check_default_type!()","bundler::cli::check_deprecated_ext_option()","bundler::rubygemsgeminstaller#check_executable_overwrite()","bundler::runtime#check_for_activated_spec!()","bundler::cli::outdated#check_for_deployment_mode!()","bundler::cli::install#check_for_group_conflicts_in_cli_options()","bundler::cli::install#check_for_options_conflicts()","bundler::parallelinstaller#check_for_unmet_dependencies()","bundler::uri::mailto#check_headers()","bundler::cli::doctor#check_home_permissions()","bundler::uri::generic#check_host()","bundler::definition#check_missing_lockfile_dep()","bundler::uri::generic#check_opaque()","bundler::uri::file#check_password()","bundler::uri::generic#check_password()","bundler::uri::generic#check_path()","bundler::dsl#check_path_source_safety()","bundler::uri::generic#check_port()","bundler::dsl#check_primary_source_safety()","bundler::dsl#check_rubygems_source_safety()","bundler::uri::generic#check_scheme()","bundler::plugin::installer#check_sources_consistency!()","bundler::uri::mailto#check_to()","bundler::cli::install#check_trust_policy()","bundler::uri::ftp#check_typecode()","bundler::thor::check_unknown_options!()","bundler::thor::base::classmethods#check_unknown_options!()","bundler::uri::file#check_user()","bundler::uri::generic#check_user()","bundler::uri::file#check_userinfo()","bundler::uri::generic#check_userinfo()","bundler::connectionpool#checkin()","bundler::connectionpool#checkout()","bundler::source::git::gitproxy#checkout()","bundler::compactindexclient::updater#checksum_for_file()","bundler::rubygemsgeminstaller#checksum_type()","bundler::compactindexclient::cache#checksums()","bundler::fileutils#chmod()","bundler::fileutils::chmod()","bundler::thor::actions#chmod()","bundler::fileutils#chmod_r()","bundler::fileutils::chmod_r()","bundler::pubgrub::versionsolver#choose_package_version()","bundler::fileutils#chown()","bundler::fileutils::chown()","bundler::fileutils#chown_r()","bundler::fileutils::chown_r()","bundler::env::chruby_version()","bundler::persistent::net::http::persistent#ciphers=()","bundler::fetcher#cis()","bundler::thor::base::classmethods#class_option()","bundler::thor::base::classmethods#class_options()","bundler::cli#clean()","bundler::runtime#clean()","bundler::gemhelper#clean?()","bundler::cli::common::clean_after_install?()","bundler::pubgrub::staticpackagesource::dsl#clean_deps()","bundler::clean_env()","bundler::clean_exec()","bundler::sharedhelpers#clean_load_path()","bundler::clean_system()","bundler::pubgrub::incompatibility#cleanup_terms()","bundler::clear_gemspec_cache()","bundler::rubygemsintegration#clear_paths()","bundler::cli#cli_help()","bundler::fetcher::compactindex#client_fetcher()","bundler::source::git::gitproxy#clone_needs_extra_fetch?()","bundler::source::git::gitproxy#clone_needs_unshallow?()","bundler::fileutils#cmp()","bundler::fileutils::cmp()","bundler::uri::generic#coerce()","bundler::pubgrub::failurewriter#collapsible?()","bundler::fileutils::collect_method()","bundler::sourcelist#combine_rubygems_sources()","bundler::plugin::api::command()","bundler::plugin#command?()","bundler::thor::command_help()","bundler::plugin::index#command_plugin()","bundler::fileutils::commands()","bundler::thor::base::classmethods#commands()","bundler::thor::actions#comment_lines()","bundler::source::git::gitproxy#commit()","bundler::gemhelper#committed?()","bundler::fetcher::compactindex#compact_index_client()","bundler::fetcher::compactindex::compact_index_request()","bundler::fileutils#compare_file()","bundler::fileutils::compare_file()","bundler::fileutils#compare_stream()","bundler::fileutils::compare_stream()","bundler::pubgrub::versionrange#compare_version()","bundler::thor::lineeditor::readline#completion_options()","bundler::thor::lineeditor::readline#completion_proc()","bundler::uri::generic::component()","bundler::uri::generic#component()","bundler::uri::generic#component_ary()","bundler::thor::actions#concat()","bundler::settings#configs()","bundler::configure()","bundler::configure_gem_home()","bundler::configure_gem_home_and_path()","bundler::configure_gem_path()","bundler::cli::common::configure_gem_version_promoter()","bundler::configured_bundle_path()","bundler::source::git::gitproxy#configured_uri()","bundler::cli::config::base#confirm()","bundler::ui::shell#confirm()","bundler::ui::silent#confirm()","bundler::ui::shell#confirm?()","bundler::ui::silent#confirm?()","bundler::cli::config::base#confirm_all()","bundler::pubgrub::incompatibility#conflict?()","bundler::fetcher#connection()","bundler::persistent::net::http::persistent#connection_for()","bundler::connectionpool::timedstack#connection_stored?()","bundler::injector#conservative_version()","bundler::resolver::package#consider_prereleases!()","bundler::cli#console()","bundler::pubgrub::versionconstraint#constraint_string()","bundler::pubgrub::versionrange#constraints()","bundler::source::git::gitproxy#contains?()","bundler::dsl::dslerror#contents()","bundler::pubgrub::versionrange#contiguous_to?()","bundler::definition#converge_dependencies()","bundler::definition#converge_locals()","bundler::definition#converge_locked_specs()","bundler::definition#converge_path_source_to_gemspec_source()","bundler::definition#converge_path_sources_to_gemspec_sources()","bundler::definition#converge_paths()","bundler::definition#converge_sources()","bundler::definition#converge_specs()","bundler::injector#convert_autorequire()","bundler::yamlserializer#convert_to_backward_compatible_key()","bundler::uri::rfc2396_parser#convert_to_uri()","bundler::uri::rfc2396_parser#convert_to_uri()","bundler::settings#converted_value()","bundler::fileutils#copy()","bundler::fileutils::copy()","bundler::fileutils#copy_entry()","bundler::fileutils::copy_entry()","bundler::compactindexclient::updater#copy_file()","bundler::fileutils#copy_file()","bundler::fileutils::copy_file()","bundler::thor::actions#copy_file()","bundler::fileutils#copy_stream()","bundler::fileutils::copy_stream()","bundler::source::git::gitproxy#copy_to()","bundler::rubygemsintegration#correct_for_windows_path()","undefinedcommanderror::spellchecker#corrections()","unknownargumenterror::spellchecker#corrections()","bundler::pubgrub::failurewriter#count_derivations()","bundler::fileutils#cp()","bundler::fileutils::cp()","bundler::fileutils#cp_lr()","bundler::fileutils::cp_lr()","bundler::fileutils#cp_r()","bundler::fileutils::cp_r()","bundler::gemhelpers::platformmatch::cpu_match()","bundler::create_bundle_path()","bundler::thor::actions#create_file()","bundler::thor::actions#create_link()","bundler::worker#create_threads()","bundler::uricredentialsfilter#credential_filtered_string()","bundler::source::git::gitproxy#credential_filtered_uri()","bundler::uricredentialsfilter#credential_filtered_uri()","bundler::settings#credentials_for()","bundler::source::rubygems#credless_remotes()","bundler::injector#cross_check_for_errors()","bundler::gemhelper#current_branch()","bundler::source::git#current_branch()","bundler::source::git::gitproxy#current_branch()","bundler::cli#current_command()","bundler::thor::invocation#current_command_chain()","bundler::definition#current_dependencies()","bundler::dependency#current_env?()","bundler::definition#current_locked_dependencies()","bundler::dependency#current_platform?()","bundler::resolver::package#current_platform?()","bundler::definition#current_platform_locked?()","bundler::current_ruby()","bundler::definition#current_ruby_platform_locked?()","bundler::connectionpool::timedstack#current_time()","bundler::selfmanager#current_version()","bundler::compactindexclient::debug()","bundler::ui::shell#debug()","bundler::ui::silent#debug()","bundler::resolver#debug?()","bundler::ui::shell#debug?()","bundler::ui::silent#debug?()","bundler::pubgrub::partialsolution#decide()","bundler::pubgrub::assignment::decision()","bundler::pubgrub::assignment#decision?()","bundler::pubgrub::partialsolution#decision_level()","bundler::uri::decode_uri_component()","bundler::uri::decode_www_form()","bundler::uri::decode_www_form_component()","bundler::uri::generic#decoded_password()","bundler::uri::generic#decoded_user()","bundler::retry::default_attempts()","bundler::default_bundle_dir()","bundler::sharedhelpers#default_bundle_dir()","bundler::resolver#default_bundler_source()","bundler::source::rubygems#default_cache_path_for()","bundler::thor::default_command()","bundler::forceplatform#default_force_ruby_platform()","bundler::stubspecification#default_gem?()","bundler::cli::info#default_gem_spec()","bundler::default_gemfile()","bundler::sharedhelpers#default_gemfile()","bundler::source::git#default_glob?()","bundler::default_lockfile()","bundler::sharedhelpers#default_lockfile()","bundler::pubgrub::default_logger()","bundler::uri::generic::default_port()","bundler::uri::generic#default_port()","bundler::gemhelper#default_remote()","bundler::retry::default_retries()","bundler::definition#default_source()","bundler::plugin::sourcelist#default_source()","bundler::sourcelist#default_source()","bundler::rubygemsintegration#default_stubs()","bundler::thor::default_task()","bundler::plugin::events::define()","bundler::standalone#define_path_helpers()","bundler::deployment::define_task()","bundler::plugin::events::defined_event?()","bundler::definition()","bundler::runtime::definition_method()","bundler::resolver::base#delete()","bundler::specset#delete()","bundler::specset#delete_by_name()","bundler::definition#deleted_deps()","gem::specification#deleted_gem?()","bundler::compactindexclient#dependencies()","bundler::compactindexclient::cache#dependencies()","bundler::parallelinstaller::specinstallation#dependencies()","bundler::remotespecification#dependencies()","bundler::resolver::candidate#dependencies()","bundler::resolver::specgroup#dependencies()","bundler::cli::install#dependencies_count_for()","bundler::index#dependencies_eql?()","bundler::definition#dependencies_for()","bundler::pubgrub::basicpackagesource#dependencies_for()","bundler::pubgrub::staticpackagesource#dependencies_for()","bundler::definition#dependencies_for_source_changed?()","bundler::parallelinstaller::specinstallation#dependencies_installed?()","gem::specification#dependencies_to_gemfile()","bundler::definition#dependencies_with_bundler()","bundler::source::rubygems#dependency_api_available?()","bundler::fetcher::dependency#dependency_api_uri()","bundler::index#dependency_names()","bundler::source#dependency_names_to_double_check()","bundler::source::rubygems#dependency_names_to_double_check()","bundler::fetcher::dependency#dependency_specs()","bundler::cli::deprecated_ext_value?()","bundler::cli::gem#deprecated_rubocop_option()","bundler::source::git::gitproxy#depth()","bundler::source::git::gitproxy#depth_args()","bundler::worker#deq()","bundler::pubgrub::partialsolution#derive()","bundler::thor::desc()","bundler::thor::group::desc()","bundler::thor::actions#destination_root()","bundler::thor::actions#destination_root=()","bundler::persistent::net::http::persistent::detect_idle_timeout()","bundler::rubyversion#diff()","bundler::pubgrub::term#difference()","bundler::pubgrub::versionconstraint#difference()","bundler::sourcelist#different_sources?()","bundler::sharedhelpers#digest()","bundler::sourcemap#direct_requirements()","bundler::thor::actions#directory()","bundler::friendlyerrors#disable!()","bundler::thor::disable_required_check!()","bundler::friendlyerrors#disabled?()","bundler::pubgrub::versionconstraint#disjoint?()","bundler::cli::dispatch()","bundler::uri::ldap#dn()","bundler::uri::ldap#dn=()","bundler::parallelinstaller#do_install()","bundler::cli#doctor()","bundler::cli::issue#doctor()","bundler::plugin::api::source#double_check_for()","bundler::source#double_check_for()","bundler::source::rubygems#double_check_for()","bundler::source::rubygemsaggregate#double_check_for_index()","bundler::source::rubygems#download_cache_path()","bundler::rubygemsintegration#download_gem()","bundler::source::rubygems#download_gem()","bundler::fetcher#downloader()","bundler::yamlserializer#dump()","bundler::yamlserializer#dump_hash()","bundler::sourcelist#dup_with_replaced_sources()","bundler::cli::doctor#dylibs()","bundler::cli::doctor#dylibs_darwin()","bundler::cli::doctor#dylibs_ldd()","bundler::thor::shell::basic#dynamic_width()","bundler::thor::shell::basic#dynamic_width_stty()","bundler::thor::shell::basic#dynamic_width_tput()","bundler::index#each()","bundler::settings::mirrors#each()","bundler::specset#each()","bundler::tsort#each_strongly_connected_component()","bundler::tsort::each_strongly_connected_component()","bundler::tsort#each_strongly_connected_component_from()","bundler::tsort::each_strongly_connected_component_from()","bundler::source#earlier_version?()","bundler::thor::lineeditor::basic#echo?()","bundler::gemversionpromoter#either_version_older_than_locked?()","bundler::pubgrub::versionconstraint::empty()","bundler::pubgrub::versionrange::empty()","bundler::connectionpool::timedstack#empty?()","bundler::index#empty?()","bundler::pubgrub::term#empty?()","bundler::pubgrub::versionconstraint#empty?()","bundler::pubgrub::versionrange#empty?()","bundler::pubgrub::versionrange::empty#empty?()","bundler::pubgrub::versionunion#empty?()","bundler::resolver::specgroup#empty?()","bundler::specset#empty?()","bundler::thor::actions#empty_directory()","bundler::friendlyerrors#enable!()","bundler::uri::encode_uri_component()","gem::dependency#encode_with()","bundler::uri::encode_www_form()","bundler::uri::encode_www_form_component()","bundler::worker#enq()","bundler::parallelinstaller#enqueue_specs()","bundler::parallelinstaller::specinstallation#enqueued?()","bundler::cli::common::ensure_all_gems_in_lockfile!()","bundler::definition#ensure_equivalent_gemfile_and_lockfile()","bundler::cli::gem#ensure_safe_gem_name()","bundler::sharedhelpers#ensure_same_dependencies()","bundler::installer#ensure_specs_are_compatible!()","bundler::thor::nestedcontext#enter()","bundler::thor::nestedcontext#entered?()","bundler::cli#env()","bundler::dsl#env()","bundler::environmentpreserver::env_to_hash()","bundler::environment()","bundler::env::environment()","bundler::lazyspecification#eql?()","bundler::plugin::api::source#eql?()","bundler::pubgrub::incompatibility#eql?()","bundler::pubgrub::term#eql?()","bundler::pubgrub::versionconstraint#eql?()","bundler::pubgrub::versionrange#eql?()","bundler::pubgrub::versionrange::empty#eql?()","bundler::pubgrub::versionunion#eql?()","bundler::resolver::candidate#eql?()","bundler::source::git#eql?()","bundler::source::metadata#eql?()","bundler::source::path#eql?()","bundler::source::rubygems#eql?()","bundler::uri::generic#eql?()","bundler::sourcelist#equivalent_source?()","bundler::sourcelist#equivalent_sources?()","bundler::thor::shell::basic#error()","bundler::ui::shell#error()","bundler::ui::silent#error()","bundler::ui::shell#error?()","bundler::ui::silent#error?()","bundler::persistent::net::http::persistent#escape()","bundler::uri::rfc2396_parser#escape()","bundler::uri::rfc2396_parser#escape()","bundler::thor::util::escape_globs()","bundler::thor::util::escape_html()","bundler::uri::generic#escape_userpass()","bundler::compactindexclient::updater#etag_for()","bundler::dsl#eval_gemfile()","bundler::eval_gemspec()","bundler::eval_yaml_gemspec()","bundler::dsl::evaluate()","bundler::pubgrub::versionconstraint::exact()","bundler::friendlyerrors#exception_message()","bundler::cli#exec()","bundler::plugin#exec_command()","bundler::endpointspecification#executables()","bundler::compactindexclient#execution_mode()","bundler::compactindexclient#execution_mode=()","bundler::resolver::specgroup#exemplary_spec()","bundler::thor::base::classmethods#exit_on_failure?()","bundler::friendlyerrors#exit_status()","bundler::source::path#expand()","bundler::definition#expanded_dependencies()","bundler::source::path#expanded_original_path()","bundler::source::path#expanded_path()","bundler::dependency#expanded_platforms()","bundler::persistent::net::http::persistent#expired?()","bundler::sourcelist#expired_sources?()","bundler::pubgrub::solvefailure#explanation()","bundler::cli::config::base#explicit_scope?()","bundler::rubygemsintegration#ext_lock()","bundler::source#extension_cache_path()","bundler::source#extension_cache_slug()","bundler::source::git#extension_cache_slug()","bundler::source::rubygems#extension_cache_slug()","gem::specification#extension_dir()","bundler::source::git#extension_dir_name()","bundler::endpointspecification#extensions()","bundler::stubspecification#extensions()","bundler::uri::ldap#extensions()","bundler::uri::ldap#extensions=()","bundler::standalone#extensions_dir()","gem::specification#extensions_dir()","bundler::pubgrub::incompatibility#external_incompatibilities()","bundler::source::git::gitproxy#extra_clone_args()","bundler::source::git::gitproxy#extra_fetch_args()","bundler::source::git::gitproxy#extra_ref()","bundler::uri::extract()","bundler::uri::rfc2396_parser#extract()","bundler::uri::rfc2396_parser#extract()","bundler::specset#extract_circular_gems()","bundler::settings::validator::rule#fail!()","bundler::retry#fail_attempt()","bundler::parallelinstaller::specinstallation#failed?()","bundler::parallelinstaller#failed_specs()","bundler::pubgrub::incompatibility#failure?()","bundler::geminstaller#failure_message()","bundler::settings::mirror#fallback_timeout=()","bundler::feature_flag()","bundler::fetcher::downloader#fetch()","bundler::source::git#fetch()","bundler::rubygemsintegration#fetch_all_remote_specs()","bundler::connectionpool::timedstack#fetch_connection()","bundler::source::rubygems#fetch_gem()","bundler::source::rubygems#fetch_gem_if_possible()","bundler::plugin::api::source#fetch_gemspec_files()","bundler::cli::show#fetch_latest_specs()","bundler::source::rubygems#fetch_names()","bundler::endpointspecification#fetch_platform()","bundler::remotespecification#fetch_platform()","bundler::fetcher#fetch_spec()","bundler::rubygemsintegration#fetch_specs()","bundler::fetcher::base#fetch_uri()","bundler::settings::mirrors#fetch_valid_mirror_for()","bundler::fetcher#fetchers()","bundler::source::rubygems#fetchers()","bundler::thor::shell::basic#file_collision()","bundler::sharedhelpers#filesystem_access()","bundler::uri::ldap#filter()","bundler::uri::ldap#filter=()","bundler::gemversionpromoter#filter_dep_specs()","bundler::resolver#filter_matching_specs()","bundler::resolver#filter_prereleases()","bundler::definition#filter_relevant()","bundler::definition#filter_specs()","bundler::httperror#filter_uri()","bundler::cli::list#filtered_specs_by_groups()","bundler::rubygemsintegration#find_bundler()","bundler::specset#find_by_name_and_platform()","bundler::thor::util::find_by_namespace()","bundler::thor::util::find_class_and_command_by_namespace()","bundler::thor::util::find_class_and_task_by_namespace()","bundler::thor::find_command_possibilities()","bundler::sharedhelpers#find_directory()","bundler::sharedhelpers#find_file()","bundler::sharedhelpers#find_gemfile()","bundler::thor::actions#find_in_source_paths()","bundler::selfmanager#find_latest_matching_spec()","bundler::selfmanager#find_latest_matching_spec_from_collection()","bundler::source::git::gitproxy#find_local_revision()","bundler::rubygemsintegration#find_name()","bundler::resolver#find_names_to_relax()","bundler::uri::generic#find_proxy()","bundler::source::git::gitproxy#find_revision_for()","bundler::thor::find_task_possibilities()","bundler::persistent::net::http::persistent#finish()","bundler::parallelinstaller#finished_installing?()","bundler::cli#flag_deprecation()","bundler::settings::mirrors#for()","bundler::specset#for()","bundler::uri::for()","gem::dependency#force_ruby_platform()","bundler::resolver::package#force_ruby_platform?()","bundler::thor::command#formatted_usage()","bundler::thor::command#formatted_usage()","bundler::uri::generic#fragment=()","bundler::environmentpreserver::from_env()","bundler::source::git::from_lock()","bundler::source::path::from_lock()","bundler::source::rubygems::from_lock()","bundler::rubyversion::from_string()","bundler::stubspecification::from_stub()","bundler::thor::base::classmethods#from_superclass()","bundler::frozen_bundle?()","bundler::fileutils::streamutils_#fu_blksize()","bundler::fileutils#fu_clean_components()","bundler::fileutils::streamutils_#fu_default_blksize()","bundler::fileutils#fu_split_path()","bundler::fileutils#fu_starting_path?()","bundler::fileutils::streamutils_#fu_stream_blksize()","bundler::fileutils::streamutils_#fu_windows?()","bundler::source::git::gitproxy#full_clone?()","bundler::stubspecification#full_gem_path()","gem::specification#full_gem_path()","bundler::stubspecification#full_gem_path=()","bundler::lazyspecification#full_name()","bundler::remotespecification#full_name()","bundler::stubspecification#full_require_paths()","bundler::source::git::gitproxy#full_version()","bundler::source::git::gitproxy#fully_qualified_ref()","bundler::cli#fund()","bundler::graph::graphvizclient#g()","bundler::cli#gem()","bundler::dsl#gem()","bundler::rubygemsintegration#gem_bindir()","bundler::stubspecification#gem_build_complete_path()","bundler::rubygemsintegration#gem_cache()","bundler::cli::outdated#gem_column_for()","bundler::gemhelper#gem_command()","bundler::cli::info#gem_dependencies()","bundler::rubygemsintegration#gem_dir()","gem::specification#gem_dir()","bundler::plugin::api::source#gem_install_dir()","bundler::gemhelper#gem_key()","bundler::settings#gem_mirrors()","bundler::cli::common::gem_not_found_message()","bundler::rubygemsintegration#gem_path()","bundler::standalone#gem_path()","bundler::dependency#gem_platforms()","bundler::gemhelper#gem_push?()","bundler::gemhelper#gem_push_host()","bundler::rubygemsintegration#gem_remote_fetcher()","bundler::gem_version()","bundler::definition#gem_version_promoter()","bundler::cli::init#gemfile()","object#gemfile()","bundler::plugin#gemfile_install()","bundler::sharedhelpers#gemfile_names()","bundler::dsl#gemfile_root()","bundler::cli::install#gems_installed_for()","bundler::dsl#gemspec()","bundler::gemhelper::gemspec()","bundler::fetcher#gemspec_cached_path()","bundler::lockfilegenerator::generate()","bundler::standalone#generate()","bundler::lockfilegenerator#generate!()","bundler::plugin::installer::git#generate_bin()","bundler::source::path#generate_bin()","bundler::installer#generate_bundler_executable_stubs()","bundler::geminstaller#generate_executable_stubs()","bundler::rubygemsgeminstaller#generate_plugins()","bundler::digest::generate_split_buffer()","bundler::installer#generate_standalone_bundler_executable_stubs()","bundler::gemhelpers#generic()","bundler::gemhelpers::generic()","bundler::resolver::candidate#generic!()","bundler::gemhelpers#generic_local_platform()","bundler::gemhelpers::generic_local_platform()","bundler::cli::config#get()","bundler::sourcelist#get()","bundler::thor::actions#get()","bundler::cli::console#get_console()","bundler::cli::console#get_constant()","bundler::fetcher::dependency#get_formatted_specs_and_deps()","bundler::thor::lineeditor::basic#get_input()","bundler::resolver::base#get_package()","bundler::cli::outdated#get_version_semver_portion_value()","bundler::fileutils#getwd()","bundler::fileutils::getwd()","bundler::dsl#git()","bundler::source::git::gitproxy#git()","bundler::buildmetadata::git_commit_sha()","bundler::source::git::gitproxy#git_local()","bundler::source::git::gitproxy#git_null()","bundler::git_present?()","bundler::source::git#git_proxy()","bundler::gemhelper#git_push()","bundler::source::git::gitproxy#git_remote_fetch()","bundler::source::git::gitproxy#git_retry()","bundler::source::git#git_scope()","bundler::dsl#git_source()","bundler::env::git_version()","bundler::lazyspecification#git_version()","bundler::remotespecification#git_version()","gem::specification#git_version()","bundler::dsl#github()","gem#glob_files_in_dir()","bundler::source::git#glob_for_display()","bundler::thor::lineeditor::readline::pathcompletion#glob_pattern()","bundler::settings#global_config_file()","bundler::plugin::index#global_index_file()","bundler::sourcelist#global_replacement_source()","bundler::plugin#global_root()","bundler::sourcelist#global_rubygems_source()","bundler::thor::util::globs_for()","bundler::dsl#group()","bundler::thor::base::classmethods#group()","bundler::definition#groups()","gem::specification#groups()","bundler::cli::outdated#groups_text()","bundler::thor::actions#gsub_file()","bundler::gemhelper#guard_clean()","bundler::thor::command#handle_argument_error?()","bundler::thor::command#handle_argument_error?()","bundler::parallelinstaller#handle_error()","bundler::cli::handle_no_command_error()","bundler::thor::command#handle_no_method_error?()","bundler::thor::command#handle_no_method_error?()","bundler::source::git#has_app_cache?()","bundler::source::path#has_app_cache?()","bundler::parallelinstaller::specinstallation#has_post_install_message?()","bundler::source::git::gitproxy#has_revision_cached?()","bundler::lazyspecification#hash()","bundler::plugin::api::source#hash()","bundler::pubgrub::incompatibility#hash()","bundler::pubgrub::term#hash()","bundler::pubgrub::versionconstraint#hash()","bundler::pubgrub::versionrange#hash()","bundler::pubgrub::versionrange::empty#hash()","bundler::pubgrub::versionunion#hash()","bundler::resolver::candidate#hash()","bundler::resolver::package#hash()","bundler::source::git#hash()","bundler::source::metadata#hash()","bundler::source::path#hash()","bundler::source::rubygems#hash()","bundler::uri::generic#hash()","gem::requirement::correcthashforlambdaoperator#hash()","bundler::fileutils::have_option?()","bundler::source::git::gitproxy#head_revision()","bundler::uri::mailto#headers=()","bundler::cli#help()","bundler::thor::help()","bundler::thor#help()","bundler::thor::group::help()","bundler::rubygemsgeminstaller#hexdigest!()","bundler::thor::command#hidden?()","bundler::thor::command#hidden?()","bundler::thor::hiddencommand#hidden?()","bundler::thor::hiddencommand#hidden?()","bundler::uri::generic#hierarchical?()","bundler::uri::ldap#hierarchical?()","bundler::cli::gem#hint_text()","bundler::home()","bundler::plugin#hook()","bundler::plugin::api::hook()","bundler::plugin::index#hook_plugins()","bundler::rubyversion#host()","bundler::uri::generic#host=()","bundler::uri::generic#hostname()","bundler::uri::generic#hostname=()","bundler::fetcher#http_proxy()","bundler::persistent::net::http::persistent#http_version()","bundler::source::git#humanized_ref()","bundler::fileutils#identical?()","bundler::fileutils::identical?()","bundler::plugin::api::source#identifier()","bundler::source#identifier()","bundler::source::git#identifier()","bundler::source::rubygems#identifier()","bundler::source::rubygemsaggregate#identifier()","bundler::parallelinstaller::specinstallation#ignorable_dependency?()","bundler::settings#ignore_config?()","bundler::resolver::package#ignores_prereleases?()","bundler::sourcelist#implicit_global_source?()","bundler::dsl#implicit_global_source_warning()","bundler::sharedhelpers#in_bundle?()","bundler::thor::actions#in_root()","bundler::plugin::api::source#include?()","bundler::pubgrub::versionrange#include?()","bundler::pubgrub::versionrange::empty#include?()","bundler::pubgrub::versionunion#include?()","bundler::source#include?()","bundler::source::git#include?()","bundler::source::rubygems#include?()","bundler::resolver::base#include_prereleases()","bundler::thor::rakecompat::included()","bundler::pubgrub::basicpackagesource#incompatibilities_for()","bundler::resolver#incompatibilities_for()","bundler::specset#incomplete_ruby_specs?()","bundler::thor::shell::basic#indent()","bundler::plugin#index()","bundler::plugin::index#index_file()","bundler::resolver::base#indirect_pins()","bundler::rubygemsintegration#inflate()","bundler::cli#info()","bundler::ui::shell#info()","bundler::ui::silent#info()","bundler::ui::shell#info?()","bundler::ui::silent#info?()","bundler::compactindexclient::cache#info_path()","bundler::compactindexclient::cache#info_roots()","bundler::thor::base::classmethods#inherited()","bundler::cli#init()","bundler::index#initialize_copy()","bundler::uri::rfc2396_parser#initialize_pattern()","bundler::uri::rfc2396_parser#initialize_pattern()","bundler::uri::rfc2396_parser#initialize_regexp()","bundler::uri::rfc2396_parser#initialize_regexp()","bundler::cli#inject()","bundler::injector::inject()","bundler::injector#inject()","bundler::cli::add#inject_dependencies()","bundler::thor::actions#inject_into_class()","bundler::thor::actions#inject_into_file()","bundler::thor::actions#inject_into_module()","bundler::thor::actions#insert_into_file()","bundler::thor::actions#inside()","bundler::cli::config::base#inside_app?()","bundler::fetcher#inspect()","bundler::index#inspect()","bundler::pubgrub::incompatibility#inspect()","bundler::pubgrub::package#inspect()","bundler::pubgrub::term#inspect()","bundler::pubgrub::versionconstraint#inspect()","bundler::pubgrub::versionrange#inspect()","bundler::pubgrub::versionunion#inspect()","bundler::source#inspect()","bundler::uri::generic#inspect()","bundler::uri::rfc2396_parser#inspect()","bundler::uri::rfc2396_parser#inspect()","bundler::cli#install()","bundler::cli::cache#install()","bundler::cli::plugin#install()","bundler::fileutils#install()","bundler::fileutils::install()","bundler::gemhelper#install()","bundler::geminstaller#install()","bundler::installer::install()","bundler::installer#install()","bundler::plugin#install()","bundler::plugin::api::source#install()","bundler::plugin::installer#install()","bundler::rubygemsgeminstaller#install()","bundler::selfmanager#install()","bundler::source::git#install()","bundler::source::metadata#install()","bundler::source::path#install()","bundler::source::rubygems#install()","bundler::plugin::installer#install_all_sources()","bundler::selfmanager#install_and_restart_with()","bundler::plugin::installer#install_definition()","bundler::geminstaller#install_error_message()","bundler::geminstaller#install_from_spec()","bundler::plugin::installer#install_from_specs()","bundler::gemhelper#install_gem()","bundler::plugin::installer#install_git()","bundler::dsl#install_if()","bundler::installer#install_in_parallel()","bundler::plugin::installer#install_local_git()","bundler::selfmanager#install_locked_bundler_and_restart_with_it_if_needed()","bundler::install_path()","bundler::plugin::api::source#install_path()","bundler::plugin::installer::git#install_path()","bundler::source::git#install_path()","bundler::plugin::installer#install_rubygems()","bundler::parallelinstaller#install_serially()","bundler::gemhelper::install_tasks()","bundler::parallelinstaller#install_with_worker()","bundler::installer#installation_parallelization()","bundler::parallelinstaller::specinstallation#installed?()","bundler::plugin#installed?()","bundler::plugin::api::source#installed?()","bundler::plugin::index#installed?()","bundler::selfmanager#installed?()","bundler::source::rubygems#installed?()","bundler::plugin::index#installed_plugins()","bundler::source::rubygems#installed_specs()","bundler::pubgrub::term#intersect()","bundler::pubgrub::versionconstraint#intersect()","bundler::pubgrub::versionrange#intersect()","bundler::pubgrub::versionrange::empty#intersect()","bundler::pubgrub::versionunion#intersect()","bundler::pubgrub::versionrange#intersects?()","bundler::pubgrub::versionrange::empty#intersects?()","bundler::pubgrub::versionunion#intersects?()","bundler::pubgrub::term#inverse()","bundler::pubgrub::term#invert()","bundler::pubgrub::versionconstraint#invert()","bundler::pubgrub::versionrange#invert()","bundler::pubgrub::versionrange::empty#invert()","bundler::pubgrub::versionunion#invert()","bundler::thor::group::invoke()","bundler::thor::invocation#invoke()","bundler::thor::group::invoke_from_option()","bundler::thor::invocation#invoke_with_padding()","bundler::settings#is_array()","bundler::settings#is_bool()","bundler::settings#is_credential()","bundler::injector#is_not_within_comment?()","bundler::settings#is_num()","bundler::settings#is_string()","bundler::settings#is_userinfo()","bundler::cli#issue()","bundler::friendlyerrors#issues_url()","bundler::uri::join()","bundler::uri::rfc2396_parser#join()","bundler::uri::rfc2396_parser#join()","bundler::currentruby#jruby?()","bundler::cli::outdated#justify()","bundler::settings::validator::rule#k()","bundler::retry#keep_trying?()","bundler::cli::exec#kernel_exec()","bundler::cli::exec#kernel_load()","bundler::persistent::net::http::persistent#key=()","bundler::settings#key_for()","bundler::settings::key_for()","bundler::retry#last_attempt?()","bundler::cli::inject#last_version_number()","bundler::cli::doctor#ldd_available?()","bundler::connectionpool::timedstack#length()","bundler::specset#length()","bundler::ui::shell#level()","bundler::ui::silent#level()","bundler::gemversionpromoter#level=()","bundler::ui::shell#level=()","bundler::ui::silent#level=()","bundler::similaritydetector#levenshtein_distance()","bundler::cli#licenses()","bundler::compactindexclient::cache#lines()","bundler::fileutils#link()","bundler::fileutils::link()","bundler::fileutils#link_entry()","bundler::fileutils::link_entry()","bundler::thor::actions#link_file()","bundler::cli#list()","bundler::cli::config#list()","bundler::cli::plugin#list()","bundler::plugin#list()","bundler::fileutils#ln()","bundler::fileutils::ln()","bundler::fileutils#ln_s()","bundler::fileutils::ln_s()","bundler::fileutils#ln_sf()","bundler::fileutils::ln_sf()","bundler::fileutils#ln_sr()","bundler::fileutils::ln_sr()","bundler::load()","bundler::yamlserializer#load()","bundler::settings#load_config()","bundler::rubygemsintegration#load_env_plugins()","bundler::load_gemspec()","bundler::source::git#load_gemspec()","bundler::source::path#load_gemspec()","bundler::load_gemspec_uncached()","bundler::plugin::index#load_index()","bundler::load_marshal()","bundler::endpointspecification#load_paths()","bundler::plugin::index#load_paths()","bundler::stubspecification#load_paths()","gem::specification#load_paths()","bundler::plugin#load_plugin()","bundler::rubygemsintegration#load_plugin_files()","bundler::installer#load_plugins()","bundler::rubygemsintegration#load_plugins()","bundler::source::git#load_spec_files()","bundler::source::path#load_spec_files()","bundler::thor::util::load_thorfile()","bundler::stubspecification#loaded_from()","gem::specification#loaded_from()","bundler::cli::outdated#loaded_from_for()","bundler::rubygemsintegration#loaded_gem_paths()","bundler::rubygemsintegration#loaded_specs()","bundler::plugin::api::source#local!()","bundler::source#local!()","bundler::source::rubygems#local!()","bundler::source::git#local?()","bundler::settings#local_config_file()","bundler::plugin::index#local_index_file()","bundler::thor::command#local_method?()","bundler::thor::command#local_method?()","bundler::source#local_only!()","bundler::source::rubygems#local_only!()","bundler::sourcelist#local_only!()","bundler::source::git#local_override!()","bundler::settings#local_overrides()","bundler::local_platform()","bundler::gemhelpers#local_platform()","bundler::gemhelpers::local_platform()","bundler::plugin#local_root()","bundler::index#local_search()","bundler::endpointspecification#local_specification_path()","bundler::selfmanager#local_specs()","bundler::source::path#local_specs()","bundler::settings#locations()","bundler::cli#lock()","bundler::definition#lock()","bundler::installer#lock()","bundler::processlock::lock()","bundler::runtime#lock()","bundler::sourcelist#lock_other_sources()","bundler::sourcelist#lock_rubygems_sources()","bundler::sourcelist#lock_sources()","bundler::definition#locked_dependencies()","bundler::locked_gems()","bundler::sourcemap#locked_requirements()","bundler::definition#locked_ruby_version()","bundler::definition#locked_ruby_version_object()","bundler::source::path#lockfile_path()","bundler::selfmanager#lockfile_version()","bundler::definition#lockfiles_equal?()","bundler::friendlyerrors#log_error()","bundler::fetcher::base#log_specs()","bundler::pubgrub::logger()","bundler::thor::long_desc()","bundler::specset#lookup()","bundler::thor::shell::basic#lookup_color()","bundler::resolver::base#loosen_names()","bundler::currentruby#maglev?()","bundler::gemversionpromoter#major?()","bundler::sharedhelpers#major_deprecation()","bundler::featureflag#major_version()","bundler::uri::rfc2396_parser#make_regexp()","bundler::uri::rfc2396_parser#make_regexp()","bundler::fileutils#makedirs()","bundler::fileutils::makedirs()","bundler::stubspecification#manually_installed?()","bundler::thor::map()","bundler::sourcelist#map_sources()","bundler::rubygemsintegration#mark_loaded()","bundler::rubygemsintegration#marshal_spec_dir()","gem#match_gem?()","bundler::matchplatform#match_platform()","gem#match_platforms?()","gem#match_spec?()","bundler::thor::lineeditor::readline::pathcompletion#matches()","bundler::rubyversion#matches?()","bundler::fetchmetadata#matches_current_ruby?()","bundler::matchmetadata#matches_current_ruby?()","bundler::fetchmetadata#matches_current_rubygems?()","bundler::matchmetadata#matches_current_rubygems?()","bundler::stubspecification#matches_for_glob()","bundler::definition#materialize()","bundler::specset#materialize()","bundler::lazyspecification#materialize_for_installation()","bundler::specset#materialized_for_all_platforms()","bundler::persistent::net::http::persistent#max_retries=()","bundler::persistent::net::http::persistent#max_version=()","bundler::lockfileparser#may_include_redundant_platform_specific_gems?()","bundler::sharedhelpers#md5_available?()","bundler::specset#merge()","bundler::uri::generic#merge()","bundler::uri::generic#merge!()","bundler::uri::generic#merge_path()","bundler::sourcelist#merged_gem_lockfile_sections!()","bundler::sourcelist#merged_gem_lockfile_sections?()","bundler::cli::config::base#message()","bundler::compactindexclient::updater::mismatchedchecksumerror#message()","bundler::nospaceondeviceerror#message()","bundler::operationnotsupportederror#message()","bundler::permissionerror#message()","bundler::temporaryresourceerror#message()","bundler::virtualprotocolerror#message()","bundler::resolver::package#meta?()","bundler::resolver::root#meta?()","bundler::definition#metadata_dependencies()","bundler::resolver::specgroup#metadata_dependencies()","bundler::resolver::specgroup#metadata_dependency()","bundler::thor::base::classmethods#method_added()","bundler::connectionpool::wrapper#method_missing()","bundler::dsl#method_missing()","bundler::plugin::api#method_missing()","bundler::plugin::dsl#method_missing()","bundler::remotespecification#method_missing()","bundler::thor::method_option()","bundler::thor::method_options()","bundler::rubygemsintegration#method_visibility()","bundler::persistent::net::http::persistent#min_version=()","bundler::currentruby#mingw?()","bundler::gemversionpromoter#minor?()","bundler::settings#mirror_for()","bundler::stubspecification#missing_extensions?()","bundler::definition#missing_specs()","bundler::specset#missing_specs()","bundler::definition#missing_specs?()","bundler::fileutils#mkdir()","bundler::fileutils::mkdir()","bundler::mkdir_p()","bundler::fileutils#mkdir_p()","bundler::fileutils::mkdir_p()","bundler::fileutils#mkpath()","bundler::fileutils::mkpath()","bundler::definition#most_specific_locked_platform()","bundler::most_specific_locked_platform?()","bundler::fileutils#move()","bundler::fileutils::move()","bundler::gemversionpromoter#move_version_to_end()","bundler::currentruby#mri?()","bundler::currentruby#mswin64?()","bundler::currentruby#mswin?()","bundler::dsl#multiple_global_source_warning()","bundler::source::rubygems#multiple_remotes?()","bundler::thor::shell::basic#mute()","bundler::thor::shell::basic#mute?()","bundler::fileutils#mv()","bundler::fileutils::mv()","bundler::gemhelper#name()","bundler::resolver::specgroup#name()","bundler::source::git#name()","bundler::source::path#name()","bundler::source::rubygems#name()","bundler::resolver#name_for_explicit_dependency_source()","bundler::compactindexclient#names()","bundler::compactindexclient::cache#names()","bundler::compactindexclient::cache#names_path()","bundler::thor::base::classmethods#namespace()","object#namespace()","bundler::thor::util::namespace_from_thor_class()","bundler::thor::util::namespaces_in_content()","bundler::selfmanager#needs_switching?()","bundler::pubgrub::term#negative?()","bundler::cli::new()","bundler::cli::add::new()","bundler::cli::binstubs::new()","bundler::cli::cache::new()","bundler::cli::check::new()","bundler::cli::clean::new()","bundler::cli::config::base::new()","bundler::cli::console::new()","bundler::cli::doctor::new()","bundler::cli::exec::new()","bundler::cli::fund::new()","bundler::cli::gem::new()","bundler::cli::info::new()","bundler::cli::init::new()","bundler::cli::inject::new()","bundler::cli::install::new()","bundler::cli::list::new()","bundler::cli::lock::new()","bundler::cli::open::new()","bundler::cli::outdated::new()","bundler::cli::platform::new()","bundler::cli::pristine::new()","bundler::cli::remove::new()","bundler::cli::show::new()","bundler::cli::update::new()","bundler::cli::viz::new()","bundler::compactindexclient::new()","bundler::compactindexclient::cache::new()","bundler::compactindexclient::updater::new()","bundler::compactindexclient::updater::mismatchedchecksumerror::new()","bundler::connectionpool::new()","bundler::connectionpool::timedstack::new()","bundler::connectionpool::wrapper::new()","bundler::definition::new()","bundler::dependency::new()","bundler::directoryremovalerror::new()","bundler::dsl::new()","bundler::dsl::dslerror::new()","bundler::endpointspecification::new()","bundler::environmentpreserver::new()","bundler::featureflag::new()","bundler::fetcher::new()","bundler::fetcher::authenticationforbiddenerror::new()","bundler::fetcher::authenticationrequirederror::new()","bundler::fetcher::badauthenticationerror::new()","bundler::fetcher::base::new()","bundler::fetcher::certificatefailureerror::new()","bundler::fetcher::downloader::new()","bundler::fetcher::sslerror::new()","bundler::gemhelper::new()","bundler::geminstaller::new()","bundler::gemrequireerror::new()","bundler::gemversionpromoter::new()","bundler::genericsystemcallerror::new()","bundler::graph::new()","bundler::graph::graphvizclient::new()","bundler::index::new()","bundler::injector::new()","bundler::installer::new()","bundler::lazyspecification::new()","bundler::lockfilegenerator::new()","bundler::lockfileparser::new()","bundler::mirrorsockets::new()","bundler::parallelinstaller::new()","bundler::parallelinstaller::specinstallation::new()","bundler::permissionerror::new()","bundler::persistent::net::http::persistent::new()","bundler::plugin::api::source::new()","bundler::plugin::dsl::new()","bundler::plugin::index::new()","bundler::plugin::index::commandconflict::new()","bundler::plugin::index::sourceconflict::new()","bundler::pubgrub::assignment::new()","bundler::pubgrub::basicpackagesource::new()","bundler::pubgrub::failurewriter::new()","bundler::pubgrub::incompatibility::new()","bundler::pubgrub::package::new()","bundler::pubgrub::partialsolution::new()","bundler::pubgrub::solvefailure::new()","bundler::pubgrub::staticpackagesource::new()","bundler::pubgrub::staticpackagesource::dsl::new()","bundler::pubgrub::term::new()","bundler::pubgrub::versionconstraint::new()","bundler::pubgrub::versionrange::new()","bundler::pubgrub::versionrange::empty::new()","bundler::pubgrub::versionsolver::new()","bundler::pubgrub::versionunion::new()","bundler::remotespecification::new()","bundler::resolver::new()","bundler::resolver::base::new()","bundler::resolver::candidate::new()","bundler::resolver::incompatibility::new()","bundler::resolver::package::new()","bundler::resolver::root::new()","bundler::resolver::specgroup::new()","bundler::retry::new()","bundler::rubyversion::new()","bundler::rubygemsintegration::new()","bundler::runtime::new()","bundler::settings::new()","bundler::settings::mirror::new()","bundler::settings::mirrorconfig::new()","bundler::settings::mirrors::new()","bundler::settings::validator::rule::new()","bundler::similaritydetector::new()","bundler::socketaddress::new()","bundler::source::gemspec::new()","bundler::source::git::new()","bundler::source::git::gitcommanderror::new()","bundler::source::git::gitnotallowederror::new()","bundler::source::git::gitnotinstallederror::new()","bundler::source::git::gitproxy::new()","bundler::source::git::missinggitrevisionerror::new()","bundler::source::path::new()","bundler::source::path::installer::new()","bundler::source::rubygems::new()","bundler::source::rubygems::remote::new()","bundler::source::rubygemsaggregate::new()","bundler::sourcelist::new()","bundler::sourcemap::new()","bundler::specset::new()","bundler::standalone::new()","bundler::thor::actions::new()","bundler::thor::base::new()","bundler::thor::command::new()","bundler::thor::command::new()","bundler::thor::dynamiccommand::new()","bundler::thor::dynamiccommand::new()","bundler::thor::lineeditor::basic::new()","bundler::thor::lineeditor::readline::pathcompletion::new()","bundler::thor::nestedcontext::new()","bundler::thor::shell::new()","bundler::ui::rgproxy::new()","bundler::ui::shell::new()","bundler::ui::silent::new()","bundler::uri::ftp::new()","bundler::uri::generic::new()","bundler::uri::ldap::new()","bundler::uri::mailto::new()","bundler::uri::rfc2396_parser::new()","bundler::uri::rfc2396_parser::new()","bundler::worker::new()","bundler::worker::wrappedexception::new()","bundler::yamlsyntaxerror::new()","undefinedcommanderror::new()","undefinedcommanderror::new()","undefinedcommanderror::spellchecker::new()","unknownargumenterror::new()","unknownargumenterror::spellchecker::new()","bundler::definition#new_deps()","bundler::friendlyerrors#new_issue_url()","bundler::definition#new_specs()","bundler::cli::config::base#new_value()","bundler::pubgrub::versionsolver#next_package_to_try()","bundler::thor::shell::basic#no?()","bundler::ui::shell#no?()","bundler::ui::silent#no?()","bundler::thor::base::classmethods#no_commands()","bundler::thor::base::classmethods#no_commands?()","bundler::thor::base::classmethods#no_commands_context()","bundler::source::rubygems#no_remotes?()","bundler::definition#no_resolve_needed?()","bundler::thor::base::classmethods#no_tasks()","bundler::pubgrub::basicpackagesource#no_versions_incompatibility_for()","bundler::resolver#no_versions_incompatibility_for()","bundler::sourcelist#non_default_explicit_sources()","bundler::sourcelist#non_global_rubygems_sources()","gem::specification#nondevelopment_dependencies()","bundler::uri::generic#normalize()","bundler::uri::generic#normalize!()","bundler::dsl#normalize_group_options()","bundler::cli::install#normalize_groups()","bundler::dsl#normalize_hash()","bundler::dsl#normalize_options()","bundler::pubgrub::versionunion::normalize_ranges()","bundler::cli::install#normalize_settings()","bundler::dsl#normalize_source()","bundler::urinormalizer#normalize_suffix()","bundler::persistent::net::http::persistent#normalize_uri()","bundler::settings::normalize_uri()","bundler::source::rubygems#normalize_uri()","bundler::pubgrub::term#normalized_constraint()","gem::platform#normalized_linux_version_ext()","bundler::thor::command#not_debugging?()","bundler::thor::command#not_debugging?()","bundler::source::git::gitproxy#not_pinned?()","bundler::definition#nothing_changed?()","bundler::cli::outdated#nothing_outdated_message()","bundler::uri::generic#opaque=()","bundler::cli#open()","bundler::cli::gem#open_editor()","bundler::thor::option()","bundler::fileutils::options()","bundler::source::metadata#options()","bundler::source::rubygems#options()","bundler::thor::options()","bundler::fileutils::options_of()","bundler::plugin::api::source#options_to_lock()","bundler::uri::http#origin()","bundler::original_env()","bundler::original_exec()","bundler::original_system()","bundler::gemhelpers::platformmatch::os_match()","bundler::resolver#other_specs_matching_message()","bundler::cli::doctor#otool_available?()","bundler::geminstaller#out_of_space_message()","bundler::cli#outdated()","bundler::cli::show#outdated?()","bundler::cli::common::output_fund_metadata_summary()","bundler::cli::common::output_post_install_messages()","bundler::cli::common::output_without_groups_message()","bundler::pubgrub::versionconstraint#overlap?()","bundler::source::git#override_for()","bundler::thor::package_name()","bundler::source::rubygems#package_path()","bundler::thor::shell::basic#padding=()","bundler::fetcher::compactindex#parallel_compact_index_client()","bundler::permissionerror#parent_folder()","bundler::settings#parent_setting_for()","bundler::compactindexclient::gemparser#parse()","bundler::settings::mirrors#parse()","bundler::uri::parse()","bundler::uri::rfc2396_parser#parse()","bundler::uri::rfc2396_parser#parse()","bundler::lockfileparser#parse_bundled_with()","bundler::pubgrub::rubygems#parse_constraint()","bundler::compactindexclient::gemparser#parse_dependency()","bundler::lockfileparser#parse_dependency()","bundler::pubgrub::basicpackagesource#parse_dependency()","bundler::pubgrub::staticpackagesource#parse_dependency()","bundler::resolver#parse_dependency()","bundler::uri::ldap#parse_dn()","bundler::compactindexclient::cache#parse_gem()","bundler::dsl::dslerror#parse_line_number_from_description()","bundler::endpointspecification#parse_metadata()","bundler::lockfileparser#parse_platform()","bundler::uri::ldap#parse_query()","bundler::pubgrub::rubygems#parse_range()","bundler::lockfileparser#parse_ruby()","bundler::lockfileparser#parse_source()","bundler::lockfileparser#parse_spec()","bundler::uri::generic#parser()","bundler::pubgrub::versionrange#partition_versions()","bundler::uri::generic#password()","bundler::uri::generic#password=()","bundler::cli::common::patch_level_options()","bundler::dsl#path()","bundler::rubygemsintegration#path()","bundler::settings#path()","bundler::source::git#path()","bundler::uri::ftp#path()","bundler::uri::generic#path=()","bundler::source#path?()","bundler::rubygemsintegration#path_separator()","bundler::standalone#paths()","bundler::cli::add#perform_bundle_install()","bundler::permissionerror#permission_type()","bundler::definition#pin_locally_available_names()","bundler::sourcemap#pinned_spec_names()","bundler::source::git::gitproxy#pinned_to_full_sha?()","bundler::resolver::base#pins()","bundler::rubygemsintegration#plain_specs()","bundler::rubygemsintegration#plain_specs=()","bundler::cli#platform()","bundler::dsl#platform()","bundler::resolver::candidate#platform_specific!()","bundler::gemhelpers#platform_specificity_match()","bundler::gemhelpers::platform_specificity_match()","bundler::gemhelpers::platformmatch::platform_version_match()","bundler::dsl#platforms()","bundler::matchplatform::platforms_match?()","bundler::dsl#plugin()","bundler::plugin::dsl#plugin()","bundler::plugin::index#plugin_commands()","bundler::plugin::index#plugin_path()","bundler::connectionpool::wrapper#pool_available()","bundler::connectionpool::wrapper#pool_shutdown()","bundler::connectionpool::wrapper#pool_size()","bundler::connectionpool::timedstack#pop()","bundler::thor::nestedcontext#pop()","bundler::uri::generic#port=()","bundler::pubgrub::term#positive?()","bundler::plugin::api::source#post_install()","bundler::source::path::installer#post_install()","bundler::endpointspecification#post_install_message()","bundler::rubygemsintegration#post_reset_hooks()","bundler::gemversionpromoter#post_sort()","bundler::gemversionpromoter#pre?()","bundler::rubygemsgeminstaller#pre_install_checks()","bundler::definition#precompute_source_requirements_for_indirect_dependencies?()","bundler::preferred_gemfile_name()","bundler::resolver#prepare_dependencies()","bundler::rubygemsgeminstaller#prepare_extension_build()","bundler::thor::shell::basic#prepare_message()","bundler::thor::actions#prepend_file()","bundler::thor::actions#prepend_to_file()","bundler::resolver::candidate#prerelease?()","bundler::resolver::package#prerelease_specified?()","bundler::definition#pretty_dep()","bundler::sharedhelpers#pretty_dependency()","bundler::pubgrub::incompatibility#pretty_print()","bundler::settings#pretty_values_for()","bundler::geminstaller#previous_spec()","bundler::cli#print_command()","bundler::cli::outdated#print_gem()","bundler::cli::info#print_gem_info()","bundler::cli::info#print_gem_path()","bundler::cli::info#print_gem_version()","bundler::cli::outdated#print_gems()","bundler::cli::outdated#print_gems_table()","bundler::thor::shell::basic#print_in_columns()","bundler::cli::outdated#print_indented()","bundler::sharedhelpers#print_major_deprecations!()","bundler::thor::base::classmethods#print_options()","bundler::cli::common::print_post_install_message()","bundler::thor::shell::basic#print_table()","bundler::source#print_using_message()","bundler::thor::shell::basic#print_wrapped()","bundler::thor::printable_commands()","bundler::thor::group::printable_commands()","bundler::thor::printable_tasks()","bundler::thor::group::printable_tasks()","bundler::settings#printable_value()","bundler::sharedhelpers#prints_major_deprecations?()","bundler::cli#pristine()","bundler::persistent::net::http::persistent#private_key=()","bundler::thor::command#private_method?()","bundler::thor::command#private_method?()","bundler::settings::tcpsocketprobe#probe_writtable_socket()","bundler::safemarshal::proc()","bundler::worker#process_queue()","bundler::parallelinstaller#process_specs()","bundler::cli::exec#process_title()","bundler::settings#processor_count()","bundler::pubgrub::versionsolver#propagate()","bundler::pubgrub::versionsolver#propagate_incompatibility()","bundler::rubygemsintegration#provides?()","bundler::persistent::net::http::persistent#proxy=()","bundler::persistent::net::http::persistent#proxy_bypass?()","bundler::persistent::net::http::persistent#proxy_from_env()","bundler::runtime#prune_cache()","bundler::runtime#prune_gem_cache()","bundler::runtime#prune_git_and_path_cache()","bundler::thor::base::classmethods#public_command()","bundler::thor::base::classmethods#public_task()","bundler::connectionpool::timedstack#push()","bundler::thor::nestedcontext#push()","bundler::fileutils#pwd()","bundler::fileutils::pwd()","bundler::sharedhelpers#pwd()","bundler::uri::generic#query=()","bundler::ui::shell#quiet?()","bundler::ui::silent#quiet?()","bundler::resolver#raise_not_found!()","bundler::thor::rakecompat::rake_classes()","object#rake_namespace()","bundler::pubgrub::versionrange#ranges()","bundler::stubspecification#raw_require_paths()","bundler::currentruby#rbx?()","bundler::rubygemsintegration#read_binary()","bundler::read_file()","bundler::env::read_file()","bundler::thor::lineeditor::readline()","bundler::thor::lineeditor::basic#readline()","bundler::thor::lineeditor::readline#readline()","bundler::parallelinstaller::specinstallation#ready_to_enqueue?()","bundler::persistent::net::http::persistent#reconnect()","bundler::persistent::net::http::persistent#reconnect_ssl()","bundler::source::git::gitproxy#redact_and_check_presence()","bundler::rubygemsintegration#redefine_method()","bundler::cli::reformatted_help_args()","bundler::source::git::gitproxy#refspec()","bundler::uri::regexp()","bundler::thor::register()","bundler::plugin#register_plugin()","bundler::plugin::index#register_plugin()","bundler::uri::register_scheme()","bundler::uri::generic#registry=()","bundler::pubgrub::partialsolution#relation()","bundler::pubgrub::term#relation()","bundler::pubgrub::versionconstraint#relation()","bundler::uri::generic#relative?()","bundler::thor::lineeditor::readline::pathcompletion#relative_matches()","bundler::source::path#relative_path()","bundler::thor::actions#relative_to_original_destination_root()","bundler::buildmetadata::release?()","bundler::selfmanager#released?()","bundler::connectionpool#reload()","bundler::cli#remembered_flag_deprecation()","bundler::cli#remembered_negative_flag_deprecation()","bundler::plugin::api::source#remote!()","bundler::source#remote!()","bundler::source::path#remote!()","bundler::source::rubygems#remote!()","bundler::sourcelist#remote!()","bundler::source::rubygems#remote_names()","bundler::selfmanager#remote_specs()","bundler::source::rubygems#remote_specs()","bundler::fetcher#remote_uri()","bundler::fetcher::base#remote_uri()","bundler::source::rubygems#remotes_for_spec()","bundler::cli#remove()","bundler::fileutils#remove()","bundler::fileutils::remove()","bundler::injector::remove()","bundler::injector#remove()","bundler::thor::base::classmethods#remove_argument()","bundler::source::rubygems#remove_auth()","bundler::source::rubygems::remote#remove_auth()","bundler::thor::base::classmethods#remove_class_option()","bundler::thor::base::classmethods#remove_command()","bundler::injector#remove_deps()","bundler::fileutils#remove_dir()","bundler::fileutils::remove_dir()","bundler::runtime#remove_dir()","bundler::thor::actions#remove_dir()","bundler::fileutils#remove_entry()","bundler::fileutils::remove_entry()","bundler::fileutils#remove_entry_secure()","bundler::fileutils::remove_entry_secure()","bundler::fileutils#remove_file()","bundler::fileutils::remove_file()","bundler::thor::actions#remove_file()","bundler::injector#remove_gems_from_dependencies()","bundler::injector#remove_gems_from_gemfile()","bundler::worker#remove_interrupt_handler()","bundler::thor::group::remove_invocation()","bundler::injector#remove_nested_blocks()","bundler::definition#remove_platform()","bundler::definition#remove_ruby_from_platforms_if_necessary!()","bundler::thor::base::classmethods#remove_task()","bundler::definition#removed_specs()","bundler::uri::generic#replace!()","bundler::rubygemsintegration#replace_bin_path()","bundler::rubygemsintegration#replace_entrypoints()","bundler::rubygemsintegration#replace_gem()","bundler::sourcelist#replace_sources!()","bundler::environmentpreserver#replace_with_backup()","bundler::settings::tcpsocketprobe#replies?()","bundler::env::report()","bundler::resolver#repository_for()","bundler::fetcher::downloader#request()","bundler::persistent::net::http::persistent#request()","bundler::friendlyerrors#request_issue_report_for()","bundler::uri::http#request_uri()","bundler::uri::ws#request_uri()","bundler::definition#requested_dependencies()","bundler::definition#requested_groups()","bundler::definition#requested_specs()","bundler::require()","bundler::runtime#require()","bundler::cli::clean#require_path_or_force()","bundler::endpointspecification#require_paths()","bundler::require_thor_actions()","bundler::parallelinstaller#require_tree_for_spec()","bundler::thor::command#required_arguments_for()","bundler::thor::command#required_arguments_for()","bundler::thor::command#required_options()","bundler::thor::command#required_options()","bundler::cli::gem#required_ruby_version()","gem::specification#required_ruby_version=()","bundler::resolver#requirement_satisfied_by?()","bundler::pubgrub::rubygems#requirement_to_constraint()","bundler::pubgrub::rubygems#requirement_to_range()","bundler::resolver#requirement_to_range()","bundler::source::git#requires_checkout?()","bundler::persistent::net::http::persistent#reset()","bundler::plugin::events::reset()","bundler::rubygemsintegration#reset()","bundler::reset!()","bundler::plugin#reset!()","bundler::pubgrub::partialsolution#reset!()","bundler::reset_paths!()","bundler::reset_rubygems!()","bundler::reset_settings_and_root!()","bundler::definition#resolution_mode=()","bundler::definition#resolution_packages()","bundler::definition#resolve()","bundler::pubgrub::versionsolver#resolve_conflict()","bundler::installer#resolve_if_needed()","bundler::cli::gem#resolve_name()","bundler::definition#resolve_only_locally!()","bundler::sharedhelpers#resolve_path()","bundler::definition#resolve_remotely!()","bundler::selfmanager#resolve_update_version_from()","bundler::definition#resolve_with_cache!()","bundler::definition#resolver()","bundler::connectionpool::wrapper#respond_to?()","bundler::remotespecification#respond_to?()","bundler::plugin::api#respond_to_missing?()","bundler::selfmanager#restart_with()","bundler::selfmanager#restart_with_locked_bundler_if_needed()","bundler::environmentpreserver#restore()","bundler::pubgrub::versionsolver#result()","bundler::cli::outdated#retrieve_active_spec()","bundler::rubygemsintegration#reverse_rubygems_kernel_mixin()","bundler::standalone#reverse_rubygems_kernel_mixin()","bundler::source::git#revision()","bundler::source::git::gitproxy#revision()","gem::specification#rg_extension_dir()","gem::specification#rg_full_gem_path()","gem::specification#rg_loaded_from()","bundler::fileutils#rm()","bundler::fileutils::rm()","bundler::fileutils#rm_f()","bundler::fileutils::rm_f()","bundler::fileutils#rm_r()","bundler::fileutils::rm_r()","bundler::rm_rf()","bundler::fileutils#rm_rf()","bundler::fileutils::rm_rf()","bundler::fileutils#rmdir()","bundler::fileutils::rmdir()","bundler::fileutils#rmtree()","bundler::fileutils::rmtree()","bundler::root()","bundler::plugin#root()","bundler::plugin::api::source#root()","bundler::plugin::installer::git#root()","bundler::pubgrub::package::root()","bundler::pubgrub::staticpackagesource::dsl#root()","bundler::sharedhelpers#root()","bundler::source::path#root()","bundler::pubgrub::package::root?()","bundler::resolver::package#root?()","bundler::resolver::root#root?()","bundler::pubgrub::basicpackagesource#root_dependencies()","bundler::pubgrub::staticpackagesource#root_dependencies()","bundler::pubgrub::package::root_version()","bundler::digest::rotate()","bundler::uri::generic#route_from()","bundler::uri::generic#route_to()","bundler::cli::gem#rubocop_version()","bundler::rubydsl#ruby()","bundler::currentruby#ruby?()","bundler::thor::util::ruby_command()","bundler::rubygemsintegration#ruby_engine()","bundler::lazyspecification#ruby_platform_materializes_to_ruby_platform?()","bundler::ruby_scope()","bundler::cli::exec#ruby_shebang?()","bundler::env::ruby_version()","bundler::gemhelper#rubygem_push()","bundler::rubygems()","bundler::plugin::sourcelist#rubygems_aggregate_class()","bundler::sourcelist#rubygems_aggregate_class()","bundler::plugin::installer::rubygems#rubygems_dir()","bundler::source::rubygems#rubygems_dir()","bundler::sourcelist#rubygems_remotes()","bundler::sourcelist#rubygems_sources()","bundler::settings::validator::rule()","bundler::settings::validator::rules()","bundler::cli::add#run()","bundler::cli::binstubs#run()","bundler::cli::cache#run()","bundler::cli::check#run()","bundler::cli::clean#run()","bundler::cli::config::base#run()","bundler::cli::console#run()","bundler::cli::doctor#run()","bundler::cli::exec#run()","bundler::cli::fund#run()","bundler::cli::gem#run()","bundler::cli::info#run()","bundler::cli::init#run()","bundler::cli::inject#run()","bundler::cli::install#run()","bundler::cli::issue#run()","bundler::cli::list#run()","bundler::cli::lock#run()","bundler::cli::open#run()","bundler::cli::outdated#run()","bundler::cli::platform#run()","bundler::cli::pristine#run()","bundler::cli::remove#run()","bundler::cli::show#run()","bundler::cli::update#run()","bundler::cli::viz#run()","bundler::graph::graphvizclient#run()","bundler::installer#run()","bundler::retry#run()","bundler::thor::actions#run()","bundler::thor::command#run()","bundler::thor::command#run()","bundler::thor::dynamiccommand#run()","bundler::thor::dynamiccommand#run()","bundler::source::git::gitproxy#run_command()","bundler::source::path::installer#run_hooks()","bundler::thor::actions#run_ruby_script()","bundler::selfmanager#running?()","bundler::selfmanager#running_older_than?()","bundler::cli::gem#rust_builder_required_rubygems_version()","bundler::safe_load_marshal()","bundler::fileutils#safe_unlink()","bundler::fileutils::safe_unlink()","bundler::gemhelpers#same_deps()","bundler::gemhelpers::same_deps()","bundler::gemhelpers#same_specificity()","bundler::gemhelpers::same_specificity()","bundler::pubgrub::partialsolution#satisfier()","bundler::lazyspecification#satisfies?()","bundler::pubgrub::partialsolution#satisfies?()","bundler::pubgrub::term#satisfies?()","bundler::plugin::index#save_index()","bundler::plugin#save_plugin()","bundler::plugin#save_plugins()","bundler::thor::shell::basic#say()","bundler::ui::rgproxy#say()","bundler::thor::shell::basic#say_error()","bundler::thor::shell::basic#say_status()","bundler::uri::generic#scheme=()","bundler::uri::scheme_list()","bundler::uri::ldap#scope()","bundler::uri::ldap#scope=()","bundler::cli::config::scope_options()","bundler::index#search()","bundler::index#search_all()","bundler::index#search_by_spec()","bundler::sharedhelpers#search_up()","bundler::lockfileparser::sections_in_lockfile()","bundler::lockfileparser::sections_to_ignore()","bundler::rubygemsintegration#security_policies()","bundler::rubygemsintegration#security_policy_keys()","bundler::resolver::candidate#segments()","bundler::gemversionpromoter#segments_do_not_match?()","bundler::uri::generic#select()","bundler::gemhelpers#select_best_platform_match()","bundler::gemhelpers::select_best_platform_match()","bundler::cli::common::select_spec()","bundler::pubgrub::versionrange#select_versions()","bundler::pubgrub::versionrange::empty#select_versions()","bundler::pubgrub::versionunion#select_versions()","bundler::self_manager()","bundler::compactindexclient#sequential_execution_mode!()","bundler::compactindexclient#sequentially()","bundler::fetcher::compactindex#serial_compact_index_client()","bundler::source::git#serialize_gemspecs_in()","bundler::friendlyerrors#serialized_exception_for()","bundler::cli::config#set()","bundler::settings::validator::rule#set()","bundler::uri::ldap#set_attributes()","bundler::sharedhelpers#set_bundle_environment()","bundler::sharedhelpers#set_bundle_variables()","bundler::thor::shell::color#set_color()","bundler::thor::shell::html#set_color()","bundler::settings#set_command_option()","bundler::settings#set_command_option_if_given()","bundler::uri::ldap#set_dn()","bundler::sharedhelpers#set_env()","bundler::thor::actions::capturableerb#set_eoutvar()","bundler::uri::ldap#set_extensions()","bundler::uri::ldap#set_filter()","bundler::settings#set_global()","bundler::uri::mailto#set_headers()","bundler::uri::file#set_host()","bundler::uri::generic#set_host()","bundler::rubygemsintegration#set_installed_by_version()","bundler::settings#set_key()","bundler::settings#set_local()","bundler::source::git#set_local!()","bundler::uri::generic#set_opaque()","bundler::uri::file#set_password()","bundler::uri::generic#set_password()","bundler::sharedhelpers#set_path()","bundler::uri::ftp#set_path()","bundler::uri::generic#set_path()","bundler::uri::file#set_port()","bundler::uri::generic#set_port()","bundler::sharedhelpers#set_rubylib()","bundler::sharedhelpers#set_rubyopt()","bundler::uri::generic#set_scheme()","bundler::uri::ldap#set_scope()","bundler::uri::mailto#set_to()","bundler::uri::ftp#set_typecode()","bundler::uri::file#set_user()","bundler::uri::generic#set_user()","bundler::uri::file#set_userinfo()","bundler::uri::generic#set_userinfo()","bundler::settings()","bundler::featureflag::settings_flag()","bundler::featureflag::settings_method()","bundler::featureflag::settings_option()","bundler::setup()","bundler::runtime#setup()","bundler::cli::cache#setup_cache_all()","bundler::runtime#setup_manpath()","bundler::resolver#setup_solver()","bundler::definition#setup_sources_for_resolve()","bundler::gemhelper#sh()","bundler::gemhelper#sh_with_input()","bundler::gemhelper#sh_with_status()","bundler::digest::sha1()","bundler::thor::base::shell()","bundler::thor::shell#shell()","bundler::source::git#shortref_for_display()","bundler::source::git#shortref_for_path()","bundler::dependency#should_include?()","bundler::cli#show()","bundler::cli::config::base#show_pretty_values_for()","bundler::injector#show_warning()","bundler::connectionpool#shutdown()","bundler::connectionpool::timedstack#shutdown()","bundler::persistent::net::http::persistent#shutdown()","bundler::connectionpool::timedstack#shutdown_connections()","bundler::ui::shell#silence()","bundler::ui::silent#silence()","bundler::similaritydetector#similar_word_list()","bundler::similaritydetector#similar_words()","bundler::pubgrub::failurewriter#single_line?()","bundler::rubyversion#single_version_string()","bundler::index#size()","bundler::specset#size()","bundler::deprecate::skip()","bundler::deprecate::skip=()","bundler::deprecate::skip_during()","bundler::compactindexclient::updater#slice_body()","bundler::thor::util::snake_case()","bundler::pubgrub::versionsolver#solve()","bundler::resolver#solve_versions()","bundler::pubgrub::versionsolver#solved?()","bundler::specset#sort!()","bundler::gemhelpers#sort_best_platform_match()","bundler::gemhelpers::sort_best_platform_match()","bundler::gemversionpromoter#sort_dep_specs()","bundler::remotespecification#sort_obj()","bundler::resolver::candidate#sort_obj()","bundler::gemversionpromoter#sort_versions()","bundler::resolver#sort_versions()","bundler::pubgrub::basicpackagesource#sort_versions_by_preferred()","bundler::specset#sorted()","bundler::resolver::specgroup#sorted_spec_names()","bundler::dsl#source()","bundler::plugin#source()","bundler::plugin::api::source()","bundler::plugin::dsl#source()","bundler::resolver::specgroup#source()","gem::specification#source()","bundler::stubspecification#source=()","bundler::plugin#source?()","bundler::plugin::index#source?()","bundler::resolver#source_for()","bundler::plugin#source_from_lock()","bundler::sourcelist#source_list_for()","bundler::definition#source_map()","bundler::thor::actions#source_paths()","bundler::thor::actions::classmethods#source_paths()","bundler::thor::actions::classmethods#source_paths_for_search()","bundler::plugin::index#source_plugin()","bundler::definition#source_requirements()","bundler::cli::source_root()","bundler::thor::actions::classmethods#source_root()","bundler::pubgrub::versionrange#span()","bundler::rubygemsgeminstaller#spec()","bundler::rubygemsintegration#spec_cache_dirs()","bundler::graph#spec_for_dependency()","bundler::cli::info#spec_for_gem()","bundler::rubygemsintegration#spec_from_gem()","bundler::definition#spec_git_paths()","bundler::rubygemsintegration#spec_matches_for_glob()","bundler::rubygemsintegration#spec_missing_extensions?()","bundler::index#spec_names()","bundler::plugin::api::source#spec_names()","bundler::source#spec_names()","bundler::source::rubygems#spec_names()","bundler::cli::info#spec_not_found()","bundler::geminstaller#spec_settings()","bundler::dependency#specific?()","bundler::geminstaller#specific_failure_message()","bundler::settings#specific_gem_for()","bundler::gemhelpers::platformmatch::specificity_score()","bundler::definition#specs()","bundler::fetcher#specs()","bundler::fetcher::compactindex#specs()","bundler::fetcher::dependency#specs()","bundler::fetcher::index#specs()","bundler::plugin::api::source#specs()","bundler::source::git#specs()","bundler::source::metadata#specs()","bundler::source::path#specs()","bundler::source::rubygems#specs()","bundler::source::rubygemsaggregate#specs()","bundler::index#specs_by_name()","bundler::index#specs_by_name_and_version()","bundler::definition#specs_changed?()","bundler::definition#specs_for()","bundler::specset#specs_for_dependency()","bundler::fetcher::compactindex#specs_for_names()","bundler::definition#specs_for_source_changed?()","bundler::specs_path()","bundler::fetcher#specs_with_retry()","undefinedcommanderror::spellchecker#spell_checker()","unknownargumenterror::spellchecker#spell_checker()","bundler::uri::split()","bundler::uri::rfc2396_parser#split()","bundler::uri::rfc2396_parser#split()","bundler::uri::generic#split_path()","bundler::settings#split_specific_setting_for()","bundler::uri::generic#split_userinfo()","bundler::persistent::net::http::persistent#ssl()","bundler::persistent::net::http::persistent#ssl_timeout=()","bundler::persistent::net::http::persistent#ssl_version=()","bundler::cli::gem#standard_version()","bundler::cli::start()","bundler::persistent::net::http::persistent#start()","bundler::resolver#start()","bundler::thor::base::classmethods#start()","bundler::definition#start_resolution()","bundler::bundlererror::status_code()","bundler::dsl::dslerror#status_code()","bundler::thor::shell::basic#stderr()","bundler::thor::shell::basic#stdout()","bundler::worker#stop()","bundler::thor::stop_on_unknown_option!()","bundler::worker#stop_threads()","bundler::connectionpool::timedstack#store_connection()","bundler::thor::base::classmethods#strict_args_position!()","bundler::rubygemsgeminstaller#strict_rm_rf()","bundler::pubgrub::versionrange#strictly_higher?()","bundler::pubgrub::versionrange#strictly_lower?()","bundler::ui::shell#strip_leading_spaces()","bundler::tsort#strongly_connected_components()","bundler::tsort::strongly_connected_components()","bundler::rubygemsintegration#stub_rubygems()","bundler::rubygemsintegration#stub_set_spec()","bundler::thor::base::subclass_files()","bundler::thor::base::subclasses()","bundler::thor::subcommand()","bundler::thor::subcommand_classes()","bundler::thor::subcommand_help()","bundler::thor::subcommands()","bundler::pubgrub::versionconstraint#subset?()","bundler::thor::subtask()","bundler::thor::subtask_help()","bundler::thor::subtasks()","bundler::rubygemsintegration#suffix_pattern()","bundler::rubygemsintegration#supports_bundler_trampolining?()","bundler::source::git::gitproxy#supports_cloning_with_no_tags?()","bundler::source::git::gitproxy#supports_fetching_unreachable_refs?()","bundler::source::git::gitproxy#supports_minus_c?()","bundler::source::rubygems#suppress_configured_credentials()","bundler::fileutils#symlink()","bundler::fileutils::symlink()","bundler::compactindexclient#synchronize()","bundler::rubyversion::system()","bundler::system_bindir()","bundler::cli::outdated#table_header()","bundler::gemhelper::tag_prefix=()","bundler::gemhelper#tag_version()","object#task()","bundler::thor::task_help()","bundler::thor::base::classmethods#tasks()","bundler::ui::shell#tell_err()","bundler::ui::shell#tell_me()","bundler::thor::actions#template()","bundler::settings#temporary()","bundler::thor::shell::basic#terminal_width()","bundler::connectionpool#then()","bundler::thor::actions#thor()","bundler::thor::util::thor_classes_in()","bundler::thor::util::thor_root()","bundler::thor::util::thor_root_glob()","bundler::tmp()","bundler::plugin::api#tmp()","bundler::tmp_home_path()","bundler::uri::mailto#to=()","bundler::specset#to_a()","bundler::settings#to_array()","bundler::remotespecification#to_ary()","bundler::settings#to_bool()","bundler::dsl#to_definition()","bundler::resolver#to_dependency_hash()","bundler::source::git#to_gemfile()","bundler::source::rubygems#to_gemfile()","gem::specification#to_gemfile()","bundler::buildmetadata::to_h()","bundler::specset#to_hash()","bundler::definition#to_lock()","bundler::dependency#to_lock()","bundler::lazyspecification#to_lock()","bundler::plugin::api::source#to_lock()","bundler::source::git#to_lock()","bundler::source::path#to_lock()","bundler::source::rubygems#to_lock()","gem::dependency#to_lock()","bundler::uri::mailto#to_mailtext()","bundler::uri::mailto#to_rfc822text()","bundler::dsl::dslerror#to_s()","bundler::lazyspecification#to_s()","bundler::parallelinstaller::specinstallation#to_s()","bundler::plugin::api::source#to_s()","bundler::pubgrub::incompatibility#to_s()","bundler::pubgrub::package#to_s()","bundler::pubgrub::solvefailure#to_s()","bundler::pubgrub::term#to_s()","bundler::pubgrub::versionconstraint#to_s()","bundler::pubgrub::versionrange#to_s()","bundler::pubgrub::versionrange::empty#to_s()","bundler::pubgrub::versionunion#to_s()","bundler::remotespecification#to_s()","bundler::resolver::candidate#to_s()","bundler::resolver::package#to_s()","bundler::resolver::specgroup#to_s()","bundler::rubyversion#to_s()","bundler::source::git#to_s()","bundler::source::metadata#to_s()","bundler::source::path#to_s()","bundler::source::rubygems#to_s()","bundler::source::rubygems::remote#to_s()","bundler::source::rubygemsaggregate#to_s()","bundler::uri::ftp#to_s()","bundler::uri::generic#to_s()","bundler::uri::mailto#to_s()","bundler::socketaddress#to_socket_address()","bundler::resolver::candidate#to_specs()","bundler::resolver::specgroup#to_specs()","bundler::stubspecification#to_yaml()","gem::specification::yamlbackfiller#to_yaml()","gem::dependency#to_yaml_properties()","bundler::fileutils#touch()","bundler::fileutils::touch()","bundler::ui::shell#trace()","bundler::ui::silent#trace()","bundler::cli::gem#travis_removal_info()","bundler::currentruby#truffleruby?()","bundler::thor::shell::basic#truncate()","bundler::connectionpool::timedstack#try_create()","bundler::tsort#tsort()","bundler::tsort::tsort()","bundler::tsort#tsort_each()","bundler::tsort::tsort_each()","bundler::specset#tsort_each_child()","bundler::tsort#tsort_each_child()","bundler::specset#tsort_each_node()","bundler::tsort#tsort_each_node()","bundler::uri::ftp#typecode=()","bundler::ui()","bundler::ui=()","bundler::rubygemsintegration#ui=()","bundler::unbundled_env()","bundler::unbundled_exec()","bundler::unbundled_system()","bundler::thor::actions#uncomment_lines()","bundler::rubygemsintegration#undo_replacements()","bundler::persistent::net::http::persistent#unescape()","bundler::uri::rfc2396_parser#unescape()","bundler::uri::rfc2396_parser#unescape()","bundler::cli::plugin#uninstall()","bundler::plugin#uninstall()","bundler::pubgrub::versionconstraint#union()","bundler::pubgrub::versionrange#union()","bundler::pubgrub::versionunion::union()","bundler::pubgrub::versionunion#union()","bundler::thor::shell::basic#unix?()","bundler::lockfileparser::unknown_sections_in_lockfile()","bundler::plugin::api::source#unlock!()","bundler::source::git#unlock!()","bundler::resolver::package#unlock?()","bundler::resolver::base#unlock_names()","bundler::definition#unlocking?()","bundler::fetcher::dependency#unmarshalled_dep_gems()","bundler::index#unmet_dependency_names()","bundler::plugin::api::source#unmet_deps()","bundler::source#unmet_deps()","bundler::source::rubygems#unmet_deps()","bundler::ui::shell#unprinted_warnings()","bundler::ui::silent#unprinted_warnings()","bundler::plugin::index#unregister_plugin()","bundler::resolver::base#unrestrict_names()","bundler::pubgrub::partialsolution#unsatisfied()","bundler::cli::config#unset()","bundler::cli#update()","bundler::compactindexclient#update()","bundler::compactindexclient::updater#update()","bundler::compactindexclient#update_and_parse_checksums!()","bundler::selfmanager#update_bundler_and_restart_with_it_if_needed()","bundler::compactindexclient#update_info()","bundler::settings::mirrorconfig#update_mirror()","bundler::cli::outdated#update_present_via_semver_portions()","bundler::selfmanager#updating?()","bundler::pubgrub::versionrange#upper_invert()","bundler::pubgrub::versionunion#upper_invert()","bundler::fileutils#uptodate?()","bundler::fileutils::uptodate?()","bundler::fetcher#uri()","bundler::settings::mirror#uri=()","bundler::plugin::api::source#uri_hash()","bundler::source::git#uri_hash()","bundler::source::git#uri_with_specifiers()","bundler::compactindexclient#url()","bundler::index#use()","bundler::fetcher#use_api()","bundler::lazyspecification#use_exact_resolved_specifications?()","bundler::thor::lineeditor::readline#use_path_completion?()","bundler::use_system_gems?()","bundler::uri::generic#user()","bundler::uri::generic#user=()","bundler::fetcher#user_agent()","bundler::user_bundle_path()","bundler::user_cache()","bundler::user_home()","bundler::rubygemsintegration#user_home()","bundler::thor::util::user_home()","bundler::uri::generic#userinfo()","bundler::uri::generic#userinfo=()","bundler::settings::mirror#valid?()","bundler::dsl#valid_keys()","bundler::rubygemsintegration#validate()","bundler::settings#validate!()","bundler::settings::mirror#validate!()","bundler::settings::validator::validate!()","bundler::settings::validator::rule#validate!()","bundler::sharedhelpers#validate_bundle_path()","bundler::rubygemsgeminstaller#validate_bundler_checksum()","bundler::cli::exec#validate_cmd!()","bundler::cli::gem#validate_ext_name()","bundler::dsl#validate_keys()","bundler::cli::add#validate_options!()","bundler::definition#validate_platforms!()","bundler::plugin#validate_plugin!()","bundler::definition#validate_ruby!()","bundler::definition#validate_runtime!()","bundler::cli::gem#validate_rust_builder_rubygems_version()","bundler::cli::config::base#validate_scope!()","bundler::source::git#validate_spec()","bundler::source::path#validate_spec()","bundler::fetcher::downloader#validate_uri_scheme!()","bundler::settings#value_for()","bundler::cli::common::verbalize_groups()","bundler::source::git::gitproxy#verify()","bundler::persistent::net::http::persistent#verify_callback=()","bundler::definition#verify_changed_sources!()","bundler::persistent::net::http::persistent#verify_depth=()","bundler::cli::list#verify_group_exists()","bundler::persistent::net::http::persistent#verify_mode=()","bundler::cli#version()","bundler::gemhelper#version()","bundler::resolver::specgroup#version()","bundler::rubygemsintegration#version()","bundler::source::git::gitproxy#version()","bundler::source#version_color()","bundler::standalone#version_dir()","bundler::source#version_message()","bundler::source::metadata#version_message()","bundler::env::version_of()","bundler::injector#version_prefix()","bundler::gemhelper#version_tag()","bundler::compactindexclient#versions()","bundler::compactindexclient::cache#versions()","bundler::pubgrub::basicpackagesource#versions_for()","bundler::resolver#versions_for()","bundler::compactindexclient::cache#versions_path()","bundler::rubyversion#versions_string()","bundler::pubgrub::failurewriter#visit()","bundler::cli#viz()","bundler::graph#viz()","bundler::settings::tcpsocketprobe#wait_for_writtable_socket()","bundler::ui::shell#warn()","bundler::ui::silent#warn()","bundler::ui::shell#warn?()","bundler::ui::silent#warn?()","bundler::cli::install#warn_ambiguous_gems()","bundler::cli::install#warn_if_root()","bundler::sourcelist#warn_on_git_protocol()","bundler::cli#warn_on_outdated_bundler()","bundler::cli::config::base#warn_unused_scope()","bundler::specset#what_required()","bundler::which()","bundler::currentruby#windows?()","bundler::connectionpool#with()","bundler::connectionpool::wrapper#with()","bundler::with_clean_env()","bundler::sharedhelpers#with_clean_git_env()","bundler::with_env()","bundler::with_friendly_errors()","bundler::ui::shell#with_level()","bundler::with_original_env()","bundler::thor::shell#with_padding()","bundler::source::git::gitproxy#with_path()","bundler::dsl#with_source()","bundler::with_unbundled_env()","bundler::cli::common::without_groups_message()","bundler::ui::shell#word_wrap()","bundler::pubgrub::versionsolver#work()","bundler::parallelinstaller#worker_pool()","bundler::connectionpool::wrap()","bundler::connectionpool::wrapper#wrapped_pool()","bundler::env::write()","bundler::pubgrub::failurewriter#write()","bundler::pubgrub::failurewriter#write_line()","bundler::sharedhelpers#write_to_gemfile()","bundler::currentruby#x64_mingw?()","bundler::thor::shell::basic#yes?()","bundler::ui::shell#yes?()","bundler::ui::silent#yes?()"],"info":[["AmbiguousCommandError","","AmbiguousCommandError.html","",""],["AmbiguousTaskError","","AmbiguousTaskError.html","",""],["Bundler","","Bundler.html","","<p>Bundler provides a consistent environment for Ruby projects by tracking and installing the exact gems …\n"],["Bundler::APIResponseInvalidDependenciesError","","Bundler/APIResponseInvalidDependenciesError.html","",""],["Bundler::APIResponseMismatchError","","Bundler/APIResponseMismatchError.html","",""],["Bundler::BuildMetadata","","Bundler/BuildMetadata.html","","<p>Represents metadata from when the Bundler gem was built.\n"],["Bundler::BundlerError","","Bundler/BundlerError.html","",""],["Bundler::CLI","","Bundler/CLI.html","",""],["Bundler::CLI::Add","","Bundler/CLI/Add.html","",""],["Bundler::CLI::Binstubs","","Bundler/CLI/Binstubs.html","",""],["Bundler::CLI::Cache","","Bundler/CLI/Cache.html","",""],["Bundler::CLI::Check","","Bundler/CLI/Check.html","",""],["Bundler::CLI::Clean","","Bundler/CLI/Clean.html","",""],["Bundler::CLI::Common","","Bundler/CLI/Common.html","",""],["Bundler::CLI::Config","","Bundler/CLI/Config.html","",""],["Bundler::CLI::Config::Base","","Bundler/CLI/Config/Base.html","",""],["Bundler::CLI::Console","","Bundler/CLI/Console.html","",""],["Bundler::CLI::Doctor","","Bundler/CLI/Doctor.html","",""],["Bundler::CLI::Exec","","Bundler/CLI/Exec.html","",""],["Bundler::CLI::Fund","","Bundler/CLI/Fund.html","",""],["Bundler::CLI::Gem","","Bundler/CLI/Gem.html","",""],["Bundler::CLI::Info","","Bundler/CLI/Info.html","",""],["Bundler::CLI::Init","","Bundler/CLI/Init.html","",""],["Bundler::CLI::Inject","","Bundler/CLI/Inject.html","",""],["Bundler::CLI::Install","","Bundler/CLI/Install.html","",""],["Bundler::CLI::Issue","","Bundler/CLI/Issue.html","",""],["Bundler::CLI::List","","Bundler/CLI/List.html","",""],["Bundler::CLI::Lock","","Bundler/CLI/Lock.html","",""],["Bundler::CLI::Open","","Bundler/CLI/Open.html","",""],["Bundler::CLI::Outdated","","Bundler/CLI/Outdated.html","",""],["Bundler::CLI::Platform","","Bundler/CLI/Platform.html","",""],["Bundler::CLI::Plugin","","Bundler/CLI/Plugin.html","",""],["Bundler::CLI::Pristine","","Bundler/CLI/Pristine.html","",""],["Bundler::CLI::Remove","","Bundler/CLI/Remove.html","",""],["Bundler::CLI::Show","","Bundler/CLI/Show.html","",""],["Bundler::CLI::Update","","Bundler/CLI/Update.html","",""],["Bundler::CLI::Viz","","Bundler/CLI/Viz.html","",""],["Bundler::CompactIndexClient","","Bundler/CompactIndexClient.html","",""],["Bundler::CompactIndexClient::Cache","","Bundler/CompactIndexClient/Cache.html","",""],["Bundler::CompactIndexClient::Error","","Bundler/CompactIndexClient/Error.html","",""],["Bundler::CompactIndexClient::GemParser","","Bundler/CompactIndexClient/GemParser.html","",""],["Bundler::CompactIndexClient::Updater","","Bundler/CompactIndexClient/Updater.html","",""],["Bundler::CompactIndexClient::Updater::MisMatchedChecksumError","","Bundler/CompactIndexClient/Updater/MisMatchedChecksumError.html","",""],["Bundler::ConnectionPool","","Bundler/ConnectionPool.html","","<p>Generic connection pool class for sharing a limited number of objects or network connections among many …\n"],["Bundler::ConnectionPool::Error","","Bundler/ConnectionPool/Error.html","",""],["Bundler::ConnectionPool::PoolShuttingDownError","","Bundler/ConnectionPool/PoolShuttingDownError.html","",""],["Bundler::ConnectionPool::TimedStack","","Bundler/ConnectionPool/TimedStack.html","","<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ts</span> = <span class=\"ruby-constant\">TimedStack</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>) { <span class=\"ruby-constant\">MyConnection</span>.<span class=\"ruby-identifier\">new</span> }\n\n<span class=\"ruby-comment\"># fetch a connection</span>\n<span class=\"ruby-identifier\">conn</span> = <span class=\"ruby-identifier\">ts</span>.<span class=\"ruby-identifier\">pop</span>\n\n<span class=\"ruby-comment\"># return a ...</span>\n</pre>\n"],["Bundler::ConnectionPool::TimeoutError","","Bundler/ConnectionPool/TimeoutError.html","",""],["Bundler::ConnectionPool::Wrapper","","Bundler/ConnectionPool/Wrapper.html","",""],["Bundler::CurrentRuby","","Bundler/CurrentRuby.html","",""],["Bundler::CyclicDependencyError","","Bundler/CyclicDependencyError.html","",""],["Bundler::Definition","","Bundler/Definition.html","",""],["Bundler::Dependency","","Bundler/Dependency.html","",""],["Bundler::Deployment","","Bundler/Deployment.html","",""],["Bundler::Deprecate","","Bundler/Deprecate.html","",""],["Bundler::DeprecatedError","","Bundler/DeprecatedError.html","",""],["Bundler::Digest","","Bundler/Digest.html","",""],["Bundler::DirectoryRemovalError","","Bundler/DirectoryRemovalError.html","",""],["Bundler::Dsl","","Bundler/Dsl.html","",""],["Bundler::Dsl::DSLError","","Bundler/Dsl/DSLError.html","",""],["Bundler::EndpointSpecification","","Bundler/EndpointSpecification.html","","<p>used for Creating Specifications from the Gemcutter Endpoint\n"],["Bundler::Env","","Bundler/Env.html","",""],["Bundler::EnvironmentPreserver","","Bundler/EnvironmentPreserver.html","",""],["Bundler::FeatureFlag","","Bundler/FeatureFlag.html","",""],["Bundler::FetchMetadata","","Bundler/FetchMetadata.html","",""],["Bundler::Fetcher","","Bundler/Fetcher.html","","<p>Handles all the fetching with the rubygems server\n"],["Bundler::Fetcher::AuthenticationForbiddenError","","Bundler/Fetcher/AuthenticationForbiddenError.html","","<p>This error is raised if HTTP authentication is correct, but lacks necessary permissions.\n"],["Bundler::Fetcher::AuthenticationRequiredError","","Bundler/Fetcher/AuthenticationRequiredError.html","","<p>This error is raised if HTTP authentication is required, but not provided.\n"],["Bundler::Fetcher::BadAuthenticationError","","Bundler/Fetcher/BadAuthenticationError.html","","<p>This error is raised if HTTP authentication is provided, but incorrect.\n"],["Bundler::Fetcher::Base","","Bundler/Fetcher/Base.html","",""],["Bundler::Fetcher::CertificateFailureError","","Bundler/Fetcher/CertificateFailureError.html","","<p>This is the error raised if OpenSSL fails the cert verification\n"],["Bundler::Fetcher::CompactIndex","","Bundler/Fetcher/CompactIndex.html","",""],["Bundler::Fetcher::Dependency","","Bundler/Fetcher/Dependency.html","",""],["Bundler::Fetcher::Downloader","","Bundler/Fetcher/Downloader.html","",""],["Bundler::Fetcher::FallbackError","","Bundler/Fetcher/FallbackError.html","","<p>This error is raised if the API returns a 413 (only printed in verbose)\n"],["Bundler::Fetcher::Index","","Bundler/Fetcher/Index.html","",""],["Bundler::Fetcher::NetworkDownError","","Bundler/Fetcher/NetworkDownError.html","","<p>This error is raised when it looks like the network is down\n"],["Bundler::Fetcher::SSLError","","Bundler/Fetcher/SSLError.html","","<p>This is the error raised when a source is HTTPS and OpenSSL didn’t load\n"],["Bundler::Fetcher::TooManyRequestsError","","Bundler/Fetcher/TooManyRequestsError.html","","<p>This error is raised if we should rate limit our requests to the API\n"],["Bundler::FileUtils","","Bundler/FileUtils.html","","<p>Namespace for file utility methods for copying, moving, removing, etc.\n<p>What’s Here\n<p>First, what’s elsewhere. …\n"],["Bundler::FileUtils::DryRun","","Bundler/FileUtils/DryRun.html","","<p>This module has all methods of Bundler::FileUtils module, but never changes files/directories, with printing …\n"],["Bundler::FileUtils::NoWrite","","Bundler/FileUtils/NoWrite.html","","<p>This module has all methods of Bundler::FileUtils module, but never changes files/directories.  This …\n"],["Bundler::FileUtils::StreamUtils_","","Bundler/FileUtils/StreamUtils_.html","",""],["Bundler::FileUtils::Verbose","","Bundler/FileUtils/Verbose.html","","<p>This module has all methods of Bundler::FileUtils module, but it outputs messages before acting.  This …\n"],["Bundler::ForcePlatform","","Bundler/ForcePlatform.html","",""],["Bundler::FriendlyErrors","","Bundler/FriendlyErrors.html","",""],["Bundler::GemHelper","","Bundler/GemHelper.html","",""],["Bundler::GemHelpers","","Bundler/GemHelpers.html","",""],["Bundler::GemHelpers::PlatformMatch","","Bundler/GemHelpers/PlatformMatch.html","",""],["Bundler::GemInstaller","","Bundler/GemInstaller.html","",""],["Bundler::GemNotFound","","Bundler/GemNotFound.html","",""],["Bundler::GemRequireError","","Bundler/GemRequireError.html","",""],["Bundler::GemVersionPromoter","","Bundler/GemVersionPromoter.html","","<p>This class contains all of the logic for determining the next version of a Gem to update to based on …\n"],["Bundler::GemfileError","","Bundler/GemfileError.html","",""],["Bundler::GemfileEvalError","","Bundler/GemfileEvalError.html","",""],["Bundler::GemfileLockNotFound","","Bundler/GemfileLockNotFound.html","",""],["Bundler::GemfileNotFound","","Bundler/GemfileNotFound.html","",""],["Bundler::GemspecError","","Bundler/GemspecError.html","",""],["Bundler::GenericSystemCallError","","Bundler/GenericSystemCallError.html","",""],["Bundler::GitError","","Bundler/GitError.html","",""],["Bundler::Graph","","Bundler/Graph.html","",""],["Bundler::Graph::GraphVizClient","","Bundler/Graph/GraphVizClient.html","",""],["Bundler::HTTPError","","Bundler/HTTPError.html","",""],["Bundler::Index","","Bundler/Index.html","",""],["Bundler::Injector","","Bundler/Injector.html","",""],["Bundler::InstallError","","Bundler/InstallError.html","",""],["Bundler::InstallHookError","","Bundler/InstallHookError.html","",""],["Bundler::Installer","","Bundler/Installer.html","",""],["Bundler::InvalidOption","","Bundler/InvalidOption.html","",""],["Bundler::LazySpecification","","Bundler/LazySpecification.html","",""],["Bundler::LockfileError","","Bundler/LockfileError.html","",""],["Bundler::LockfileGenerator","","Bundler/LockfileGenerator.html","",""],["Bundler::LockfileParser","","Bundler/LockfileParser.html","",""],["Bundler::MarshalError","","Bundler/MarshalError.html","",""],["Bundler::MatchMetadata","","Bundler/MatchMetadata.html","",""],["Bundler::MatchPlatform","","Bundler/MatchPlatform.html","",""],["Bundler::MatchRemoteMetadata","","Bundler/MatchRemoteMetadata.html","",""],["Bundler::MirrorSockets","","Bundler/MirrorSockets.html","","<p>Class used to build the list of sockets that correspond to\n\n<pre>a given mirror.</pre>\n<p>One mirror may correspond to …\n"],["Bundler::NoSpaceOnDeviceError","","Bundler/NoSpaceOnDeviceError.html","",""],["Bundler::OperationNotSupportedError","","Bundler/OperationNotSupportedError.html","",""],["Bundler::ParallelInstaller","","Bundler/ParallelInstaller.html","",""],["Bundler::ParallelInstaller::SpecInstallation","","Bundler/ParallelInstaller/SpecInstallation.html","",""],["Bundler::PathError","","Bundler/PathError.html","",""],["Bundler::PermissionError","","Bundler/PermissionError.html","",""],["Bundler::Persistent","","Bundler/Persistent.html","",""],["Bundler::Persistent::Net","","Bundler/Persistent/Net.html","",""],["Bundler::Persistent::Net::HTTP","","Bundler/Persistent/Net/HTTP.html","",""],["Bundler::Persistent::Net::HTTP::Persistent","","Bundler/Persistent/Net/HTTP/Persistent.html","","<p>Persistent connections for Net::HTTP\n<p>Bundler::Persistent::Net::HTTP::Persistent maintains persistent connections …\n"],["Bundler::Persistent::Net::HTTP::Persistent::Error","","Bundler/Persistent/Net/HTTP/Persistent/Error.html","","<p>Error class for errors raised by Bundler::Persistent::Net::HTTP::Persistent.  Various SystemCallErrors …\n"],["Bundler::Plugin","","Bundler/Plugin.html","","<p>This is the interfacing class represents the API that we intend to provide the plugins to use.\n<p>For plugins …\n"],["Bundler::Plugin::API","","Bundler/Plugin/API.html","",""],["Bundler::Plugin::API::Source","","Bundler/Plugin/API/Source.html","","<p>This class provides the base to build source plugins All the method here are required to build a source …\n"],["Bundler::Plugin::DSL","","Bundler/Plugin/DSL.html","","<p>Dsl to parse the Gemfile looking for plugins to install\n"],["Bundler::Plugin::DSL::PluginGemfileError","","Bundler/Plugin/DSL/PluginGemfileError.html","",""],["Bundler::Plugin::Events","","Bundler/Plugin/Events.html","",""],["Bundler::Plugin::Index","","Bundler/Plugin/Index.html","",""],["Bundler::Plugin::Index::CommandConflict","","Bundler/Plugin/Index/CommandConflict.html","",""],["Bundler::Plugin::Index::SourceConflict","","Bundler/Plugin/Index/SourceConflict.html","",""],["Bundler::Plugin::Installer","","Bundler/Plugin/Installer.html","",""],["Bundler::Plugin::Installer::Git","","Bundler/Plugin/Installer/Git.html","",""],["Bundler::Plugin::Installer::Rubygems","","Bundler/Plugin/Installer/Rubygems.html","",""],["Bundler::Plugin::MalformattedPlugin","","Bundler/Plugin/MalformattedPlugin.html","",""],["Bundler::Plugin::PluginInstallError","","Bundler/Plugin/PluginInstallError.html","",""],["Bundler::Plugin::SourceList","","Bundler/Plugin/SourceList.html","",""],["Bundler::Plugin::UndefinedCommandError","","Bundler/Plugin/UndefinedCommandError.html","",""],["Bundler::Plugin::UnknownSourceError","","Bundler/Plugin/UnknownSourceError.html","",""],["Bundler::PluginError","","Bundler/PluginError.html","",""],["Bundler::ProcessLock","","Bundler/ProcessLock.html","",""],["Bundler::ProductionError","","Bundler/ProductionError.html","",""],["Bundler::PubGrub","","Bundler/PubGrub.html","",""],["Bundler::PubGrub::Assignment","","Bundler/PubGrub/Assignment.html","",""],["Bundler::PubGrub::BasicPackageSource","","Bundler/PubGrub/BasicPackageSource.html","","<p>Types:\n<p>Where possible, Bundler::PubGrub will accept user-defined types, so long as they quack.\n<p>## “Package”: …\n"],["Bundler::PubGrub::FailureWriter","","Bundler/PubGrub/FailureWriter.html","",""],["Bundler::PubGrub::Incompatibility","","Bundler/PubGrub/Incompatibility.html","",""],["Bundler::PubGrub::Package","","Bundler/PubGrub/Package.html","",""],["Bundler::PubGrub::PartialSolution","","Bundler/PubGrub/PartialSolution.html","",""],["Bundler::PubGrub::RubyGems","","Bundler/PubGrub/RubyGems.html","",""],["Bundler::PubGrub::SolveFailure","","Bundler/PubGrub/SolveFailure.html","",""],["Bundler::PubGrub::StaticPackageSource","","Bundler/PubGrub/StaticPackageSource.html","",""],["Bundler::PubGrub::StaticPackageSource::DSL","","Bundler/PubGrub/StaticPackageSource/DSL.html","",""],["Bundler::PubGrub::Term","","Bundler/PubGrub/Term.html","",""],["Bundler::PubGrub::VersionConstraint","","Bundler/PubGrub/VersionConstraint.html","",""],["Bundler::PubGrub::VersionRange","","Bundler/PubGrub/VersionRange.html","",""],["Bundler::PubGrub::VersionRange::Empty","","Bundler/PubGrub/VersionRange/Empty.html","",""],["Bundler::PubGrub::VersionSolver","","Bundler/PubGrub/VersionSolver.html","",""],["Bundler::PubGrub::VersionUnion","","Bundler/PubGrub/VersionUnion.html","",""],["Bundler::RemoteSpecification","","Bundler/RemoteSpecification.html","","<p>Represents a lazily loaded gem specification, where the full specification is on the source server in …\n"],["Bundler::Resolver","","Bundler/Resolver.html","","<p>This class implements the interface needed by PubGrub for resolution. It is equivalent to the ‘PubGrub::BasicPackageSource` …\n"],["Bundler::Resolver::Base","","Bundler/Resolver/Base.html","",""],["Bundler::Resolver::Candidate","","Bundler/Resolver/Candidate.html","","<p>This class is a PubGrub compatible “Version” class that takes Bundler resolution complexities …\n"],["Bundler::Resolver::Incompatibility","","Bundler/Resolver/Incompatibility.html","",""],["Bundler::Resolver::Package","","Bundler/Resolver/Package.html","","<p>Represents a gem being resolved, in a format PubGrub likes.\n<p>The class holds the following information: …\n"],["Bundler::Resolver::Root","","Bundler/Resolver/Root.html","","<p>Represents the Gemfile from the resolver’s perspective. It’s the root package and Gemfile entries …\n"],["Bundler::Resolver::SpecGroup","","Bundler/Resolver/SpecGroup.html","",""],["Bundler::Retry","","Bundler/Retry.html","","<p>General purpose class for retrying code that may fail\n"],["Bundler::RubyDsl","","Bundler/RubyDsl.html","",""],["Bundler::RubyGemsGemInstaller","","Bundler/RubyGemsGemInstaller.html","",""],["Bundler::RubyVersion","","Bundler/RubyVersion.html","",""],["Bundler::RubyVersionMismatch","","Bundler/RubyVersionMismatch.html","",""],["Bundler::RubygemsIntegration","","Bundler/RubygemsIntegration.html","",""],["Bundler::RubygemsIntegration::Gem","","Bundler/RubygemsIntegration/Gem.html","",""],["Bundler::Runtime","","Bundler/Runtime.html","",""],["Bundler::SafeMarshal","","Bundler/SafeMarshal.html","",""],["Bundler::SecurityError","","Bundler/SecurityError.html","",""],["Bundler::SelfManager","","Bundler/SelfManager.html","","<p>This class handles installing and switching to the version of bundler needed by an application.\n"],["Bundler::Settings","","Bundler/Settings.html","",""],["Bundler::Settings::Mirror","","Bundler/Settings/Mirror.html","","<p>A mirror\n<p>Contains both the uri that should be used as a mirror and the\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fallback</span> <span class=\"ruby-identifier\">timeout</span> <span class=\"ruby-identifier\">which</span> <span class=\"ruby-identifier\">will</span> <span class=\"ruby-identifier\">be</span> <span class=\"ruby-identifier\">used</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Bundler::Settings::MirrorConfig","","Bundler/Settings/MirrorConfig.html","","<p>Class used to parse one configuration line\n<p>Gets the configuration line and the value.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">This</span> <span class=\"ruby-identifier\">object</span> <span class=\"ruby-identifier\">provides</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Bundler::Settings::Mirrors","","Bundler/Settings/Mirrors.html","","<p>Class used to build the mirror set and then find a mirror for a given URI\n<p>@param prober [Prober object, …\n"],["Bundler::Settings::TCPSocketProbe","","Bundler/Settings/TCPSocketProbe.html","","<p>Class used for probing TCP availability for a given mirror.\n"],["Bundler::Settings::Validator","","Bundler/Settings/Validator.html","",""],["Bundler::Settings::Validator::Rule","","Bundler/Settings/Validator/Rule.html","",""],["Bundler::SharedHelpers","","Bundler/SharedHelpers.html","",""],["Bundler::SimilarityDetector","","Bundler/SimilarityDetector.html","",""],["Bundler::SocketAddress","","Bundler/SocketAddress.html","","<p>Socket address builder.\n<p>Given a socket type, a host and a port,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">provides</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">method</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">build</span> <span class=\"ruby-identifier\">sockaddr</span> <span class=\"ruby-identifier\">string</span>\n</pre>\n"],["Bundler::SolveFailure","","Bundler/SolveFailure.html","","<p>Internal error, should be rescued\n"],["Bundler::Source","","Bundler/Source.html","",""],["Bundler::Source::Gemspec","","Bundler/Source/Gemspec.html","",""],["Bundler::Source::Git","","Bundler/Source/Git.html","",""],["Bundler::Source::Git::GitCommandError","","Bundler/Source/Git/GitCommandError.html","",""],["Bundler::Source::Git::GitNotAllowedError","","Bundler/Source/Git/GitNotAllowedError.html","",""],["Bundler::Source::Git::GitNotInstalledError","","Bundler/Source/Git/GitNotInstalledError.html","",""],["Bundler::Source::Git::GitProxy","","Bundler/Source/Git/GitProxy.html","","<p>The GitProxy is responsible to interact with git repositories. All actions required by the Git source …\n"],["Bundler::Source::Git::MissingGitRevisionError","","Bundler/Source/Git/MissingGitRevisionError.html","",""],["Bundler::Source::Metadata","","Bundler/Source/Metadata.html","",""],["Bundler::Source::Path","","Bundler/Source/Path.html","",""],["Bundler::Source::Path::Installer","","Bundler/Source/Path/Installer.html","",""],["Bundler::Source::Rubygems","","Bundler/Source/Rubygems.html","",""],["Bundler::Source::Rubygems::Remote","","Bundler/Source/Rubygems/Remote.html","",""],["Bundler::Source::RubygemsAggregate","","Bundler/Source/RubygemsAggregate.html","",""],["Bundler::SourceList","","Bundler/SourceList.html","",""],["Bundler::SourceMap","","Bundler/SourceMap.html","",""],["Bundler::SpecSet","","Bundler/SpecSet.html","",""],["Bundler::Standalone","","Bundler/Standalone.html","",""],["Bundler::StubSpecification","","Bundler/StubSpecification.html","",""],["Bundler::TSort","","Bundler/TSort.html","","<p>Bundler::TSort implements topological sorting using Tarjan’s algorithm for strongly connected components. …\n"],["Bundler::TSort::Cyclic","","Bundler/TSort/Cyclic.html","",""],["Bundler::TemporaryResourceError","","Bundler/TemporaryResourceError.html","",""],["Bundler::Thor","","Bundler/Thor.html","",""],["Bundler::Thor::Actions","","Bundler/Thor/Actions.html","",""],["Bundler::Thor::Actions::CapturableERB","","Bundler/Thor/Actions/CapturableERB.html","","<p>Bundler::Thor::Actions#capture depends on what kind of buffer is used in ERB. Thus CapturableERB fixes …\n"],["Bundler::Thor::Actions::ClassMethods","","Bundler/Thor/Actions/ClassMethods.html","",""],["Bundler::Thor::Base","","Bundler/Thor/Base.html","",""],["Bundler::Thor::Base::ClassMethods","","Bundler/Thor/Base/ClassMethods.html","",""],["Bundler::Thor::Command","","Bundler/Thor/Command.html","",""],["Bundler::Thor::DynamicCommand","","Bundler/Thor/DynamicCommand.html","","<p>A dynamic command that handles method missing scenarios.\n"],["Bundler::Thor::DynamicTask","","Bundler/Thor/DynamicCommand.html","","<p>A dynamic command that handles method missing scenarios.\n"],["Bundler::Thor::Group","","Bundler/Thor/Group.html","","<p>Bundler::Thor has a special class called Bundler::Thor::Group. The main difference to Bundler::Thor class …\n"],["Bundler::Thor::HiddenCommand","","Bundler/Thor/HiddenCommand.html","","<p>A command that is hidden in help messages but still invocable.\n"],["Bundler::Thor::HiddenTask","","Bundler/Thor/HiddenCommand.html","","<p>A command that is hidden in help messages but still invocable.\n"],["Bundler::Thor::Invocation","","Bundler/Thor/Invocation.html","",""],["Bundler::Thor::Invocation::ClassMethods","","Bundler/Thor/Invocation/ClassMethods.html","",""],["Bundler::Thor::LineEditor","","Bundler/Thor/LineEditor.html","",""],["Bundler::Thor::LineEditor::Basic","","Bundler/Thor/LineEditor/Basic.html","",""],["Bundler::Thor::LineEditor::Readline","","Bundler/Thor/LineEditor/Readline.html","",""],["Bundler::Thor::LineEditor::Readline::PathCompletion","","Bundler/Thor/LineEditor/Readline/PathCompletion.html","",""],["Bundler::Thor::NestedContext","","Bundler/Thor/NestedContext.html","",""],["Bundler::Thor::RakeCompat","","Bundler/Thor/RakeCompat.html","","<p>Adds a compatibility layer to your Bundler::Thor classes which allows you to use rake package tasks. …\n"],["Bundler::Thor::Shell","","Bundler/Thor/Shell.html","",""],["Bundler::Thor::Shell::Basic","","Bundler/Thor/Shell/Basic.html","",""],["Bundler::Thor::Shell::Color","","Bundler/Thor/Shell/Color.html","","<p>Inherit from Bundler::Thor::Shell::Basic and add set_color behavior. Check Bundler::Thor::Shell::Basic …\n"],["Bundler::Thor::Shell::HTML","","Bundler/Thor/Shell/HTML.html","","<p>Inherit from Bundler::Thor::Shell::Basic and add set_color behavior. Check Bundler::Thor::Shell::Basic …\n"],["Bundler::Thor::Task","","Bundler/Thor/Command.html","",""],["Bundler::Thor::Util","","Bundler/Thor/Util.html","","<p>This module holds several utilities:\n<p>1) Methods to convert thor namespaces to constants and vice-versa. …\n"],["Bundler::ThreadCreationError","","Bundler/ThreadCreationError.html","",""],["Bundler::UI","","Bundler/UI.html","",""],["Bundler::UI::RGProxy","","Bundler/UI/RGProxy.html","",""],["Bundler::UI::Shell","","Bundler/UI/Shell.html","",""],["Bundler::UI::Silent","","Bundler/UI/Silent.html","",""],["Bundler::URI","","Bundler/URI.html","","<p>Bundler::URI is a module providing classes to handle Uniform Resource Identifiers (RFC2396).\n<p>Features …\n"],["Bundler::URI::BadURIError","","Bundler/URI/BadURIError.html","","<p>Bundler::URI is valid, bad usage is not.\n"],["Bundler::URI::Error","","Bundler/URI/Error.html","","<p>Base class for all Bundler::URI exceptions.\n"],["Bundler::URI::FTP","","Bundler/URI/FTP.html","","<p>FTP Bundler::URI syntax is defined by RFC1738 section 3.2.\n<p>This class will be redesigned because of difference …\n"],["Bundler::URI::File","","Bundler/URI/File.html","","<p>The “file” Bundler::URI is defined by RFC8089.\n"],["Bundler::URI::Generic","","Bundler/URI/Generic.html","","<p>Base class for all Bundler::URI classes. Implements generic Bundler::URI syntax as per RFC 2396.\n"],["Bundler::URI::HTTP","","Bundler/URI/HTTP.html","","<p>The syntax of HTTP URIs is defined in RFC1738 section 3.3.\n<p>Note that the Ruby Bundler::URI library allows …\n"],["Bundler::URI::HTTPS","","Bundler/URI/HTTPS.html","","<p>The default port for HTTPS URIs is 443, and the scheme is ‘https:’ rather than ‘http:’. …\n"],["Bundler::URI::InvalidComponentError","","Bundler/URI/InvalidComponentError.html","","<p>Not a Bundler::URI component.\n"],["Bundler::URI::InvalidURIError","","Bundler/URI/InvalidURIError.html","","<p>Not a Bundler::URI.\n"],["Bundler::URI::LDAP","","Bundler/URI/LDAP.html","","<p>LDAP Bundler::URI SCHEMA (described in RFC2255).\n"],["Bundler::URI::LDAPS","","Bundler/URI/LDAPS.html","","<p>The default port for LDAPS URIs is 636, and the scheme is ‘ldaps:’ rather than ‘ldap:’. …\n"],["Bundler::URI::MailTo","","Bundler/URI/MailTo.html","","<p>RFC6068, the mailto URL scheme.\n"],["Bundler::URI::Parser","","Bundler/URI/RFC2396_Parser.html","","<p>Class that parses String’s into Bundler::URI’s.\n<p>It contains a Hash set of patterns and Regexp’s …\n"],["Bundler::URI::REGEXP","","Bundler/URI/RFC2396_REGEXP.html","","<p>Includes Bundler::URI::REGEXP::PATTERN\n"],["Bundler::URI::RFC2396_Parser","","Bundler/URI/RFC2396_Parser.html","","<p>Class that parses String’s into Bundler::URI’s.\n<p>It contains a Hash set of patterns and Regexp’s …\n"],["Bundler::URI::RFC2396_REGEXP","","Bundler/URI/RFC2396_REGEXP.html","","<p>Includes Bundler::URI::REGEXP::PATTERN\n"],["Bundler::URI::RFC2396_REGEXP::PATTERN","","Bundler/URI/RFC2396_REGEXP/PATTERN.html","","<p>Patterns used to parse Bundler::URI’s\n"],["Bundler::URI::Schemes","","Bundler/URI/Schemes.html","",""],["Bundler::URI::WS","","Bundler/URI/WS.html","","<p>The syntax of WS URIs is defined in RFC6455 section 3.\n<p>Note that the Ruby Bundler::URI library allows …\n"],["Bundler::URI::WSS","","Bundler/URI/WSS.html","","<p>The default port for WSS URIs is 443, and the scheme is ‘wss:’ rather than ‘ws:’. Other …\n"],["Bundler::URICredentialsFilter","","Bundler/URICredentialsFilter.html","",""],["Bundler::URINormalizer","","Bundler/URINormalizer.html","",""],["Bundler::VirtualProtocolError","","Bundler/VirtualProtocolError.html","",""],["Bundler::Worker","","Bundler/Worker.html","",""],["Bundler::Worker::WrappedException","","Bundler/Worker/WrappedException.html","",""],["Bundler::YAMLSerializer","","Bundler/YAMLSerializer.html","","<p>A stub yaml serializer that can handle only hashes and strings (as of now).\n"],["Bundler::YamlSyntaxError","","Bundler/YamlSyntaxError.html","",""],["Error","","Error.html","","<p>Bundler::Thor::Error is raised when it’s caused by wrong usage of thor classes. Those errors have …\n"],["Gem","","Gem.html","",""],["Gem::Dependency","","Gem/Dependency.html","",""],["Gem::Platform","","Gem/Platform.html","",""],["Gem::Requirement","","Gem/Requirement.html","",""],["Gem::Requirement::CorrectHashForLambdaOperator","","Gem/Requirement/CorrectHashForLambdaOperator.html","",""],["Gem::Requirement::OrderIndependentComparison","","Gem/Requirement/OrderIndependentComparison.html","",""],["Gem::Specification","","Gem/Specification.html","","<p>On universal Rubies, resolve the “universal” arch to the real CPU arch, without changing the …\n"],["Gem::Specification::YamlBackfiller","","Gem/Specification/YamlBackfiller.html","","<p>Backfill missing YAML require when not defined. Fixed since 3.1.0.pre1.\n"],["InvocationError","","InvocationError.html","","<p>Raised when a command was found, but not invoked properly.\n"],["Kernel","","Kernel.html","",""],["MalformattedArgumentError","","MalformattedArgumentError.html","",""],["Object","","Object.html","",""],["RequiredArgumentMissingError","","RequiredArgumentMissingError.html","",""],["UndefinedCommandError","","UndefinedCommandError.html","","<p>Raised when a command was not found.\n"],["UndefinedCommandError::SpellChecker","","UndefinedCommandError/SpellChecker.html","",""],["UndefinedTaskError","","UndefinedTaskError.html","","<p>Raised when a command was not found.\n"],["UnknownArgumentError","","UnknownArgumentError.html","",""],["UnknownArgumentError::SpellChecker","","UnknownArgumentError/SpellChecker.html","",""],["+","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-2B","(oth)",""],["-","Bundler::SpecSet","Bundler/SpecSet.html#method-i-2D","(other)",""],["-","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-2D","(oth)",""],["<<","Bundler::ConnectionPool::TimedStack","Bundler/ConnectionPool/TimedStack.html#method-i-3C-3C","(obj, options = {})",""],["<<","Bundler::Index","Bundler/Index.html#method-i-3C-3C","(spec)",""],["<<","Bundler::SpecSet","Bundler/SpecSet.html#method-i-3C-3C","(spec)",""],["<=>","Bundler::PubGrub::Package","Bundler/PubGrub/Package.html#method-i-3C-3D-3E","(other)",""],["<=>","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-3C-3D-3E","(other)","<p>Compare this specification against another object. Using sort_obj is compatible with Gem::Specification …\n"],["<=>","Bundler::Resolver::Candidate","Bundler/Resolver/Candidate.html#method-i-3C-3D-3E","(other)",""],["==","Bundler::Index","Bundler/Index.html#method-i-3D-3D","(other)","<p>Whether all the specs in self are in other TODO: rename to #include?\n"],["==","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-3D-3D","(other)",""],["==","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-3D-3D","(other)","<p>This shall check if two source object represent the same source.\n<p>The comparison shall take place only …\n"],["==","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-3D-3D","(other)",""],["==","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-3D-3D","(other)",""],["==","Bundler::PubGrub::VersionRange::Empty","Bundler/PubGrub/VersionRange/Empty.html#method-i-3D-3D","(other)",""],["==","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-3D-3D","(other)",""],["==","Bundler::Resolver::Candidate","Bundler/Resolver/Candidate.html#method-i-3D-3D","(other)",""],["==","Bundler::Resolver::Package","Bundler/Resolver/Package.html#method-i-3D-3D","(other)",""],["==","Bundler::RubyVersion","Bundler/RubyVersion.html#method-i-3D-3D","(other)",""],["==","Bundler::Settings::Mirror","Bundler/Settings/Mirror.html#method-i-3D-3D","(other)",""],["==","Bundler::Source::Git","Bundler/Source/Git.html#method-i-3D-3D","(other)",""],["==","Bundler::Source::Metadata","Bundler/Source/Metadata.html#method-i-3D-3D","(other)",""],["==","Bundler::Source::Path","Bundler/Source/Path.html#method-i-3D-3D","(other)",""],["==","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-3D-3D","(other)",""],["==","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-3D-3D","(oth)","<p>Compares two URIs.\n"],["==","Gem::Requirement::OrderIndependentComparison","Gem/Requirement/OrderIndependentComparison.html#method-i-3D-3D","(other)",""],["===","Gem::Platform","Gem/Platform.html#method-i-3D-3D-3D","(other)",""],["URI","Bundler","Bundler.html#method-i-URI","(uri)","<p>Returns <code>uri</code> converted to an Bundler::URI object.\n"],["URI","Bundler","Bundler.html#method-c-URI","(uri)","<p>Returns <code>uri</code> converted to an Bundler::URI object.\n"],["[]","Bundler::Index","Bundler/Index.html#method-i-5B-5D","(query)",""],["[]","Bundler::Resolver::Base","Bundler/Resolver/Base.html#method-i-5B-5D","(name)",""],["[]","Bundler::Settings","Bundler/Settings.html#method-i-5B-5D","(name)",""],["[]","Bundler::SpecSet","Bundler/SpecSet.html#method-i-5B-5D","(key)",""],["[]=","Bundler::SpecSet","Bundler/SpecSet.html#method-i-5B-5D-3D","(key, value)",""],["__dependencies","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-__dependencies","(spec)",""],["__materialize__","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-__materialize__","(candidates, fallback_to_non_installable: Bundler.frozen_bundle?)","<p>If in frozen mode, we fallback to a non-installable candidate because by doing this we avoid re-resolving …\n"],["__swap__","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-__swap__","(spec)",""],["__swap__","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-__swap__","(spec)","<p>Because Rubyforge cannot be trusted to provide valid specifications once the remote gem is downloaded, …\n"],["_decode_uri_component","Bundler::URI","Bundler/URI.html#method-c-_decode_uri_component","(regexp, str, enc)",""],["_encode_uri_component","Bundler::URI","Bundler/URI.html#method-c-_encode_uri_component","(regexp, table, str, enc)",""],["_groups","Bundler::Graph","Bundler/Graph.html#method-i-_groups","()",""],["_local_specification","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-_local_specification","()",""],["_make_label","Bundler::Graph","Bundler/Graph.html#method-i-_make_label","(symbol_or_string_or_dependency, element_type)",""],["_populate_relations","Bundler::Graph","Bundler/Graph.html#method-i-_populate_relations","()",""],["_remote_specification","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-_remote_specification","()",""],["_remote_specification","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-_remote_specification","()",""],["_remote_specification","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-_remote_specification","()",""],["_requirements_sorted?","Gem::Requirement::OrderIndependentComparison","Gem/Requirement/OrderIndependentComparison.html#method-i-_requirements_sorted-3F","()",""],["_with_sorted_requirements","Gem::Requirement::OrderIndependentComparison","Gem/Requirement/OrderIndependentComparison.html#method-i-_with_sorted_requirements","()",""],["abort_threads","Bundler::Worker","Bundler/Worker.html#method-i-abort_threads","()",""],["absolute","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-absolute","()",""],["absolute?","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-absolute-3F","()","<p>Returns true if Bundler::URI has a scheme (e.g. http:// or https://) specified.\n"],["absolute_matches","Bundler::Thor::LineEditor::Readline::PathCompletion","Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-i-absolute_matches","()",""],["action","Bundler::PermissionError","Bundler/PermissionError.html#method-i-action","()",""],["activated","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-activated","()",""],["activated=","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-activated-3D","(activated)",""],["add","Bundler::CLI","Bundler/CLI.html#method-i-add","(*gems)",""],["add","Bundler::PubGrub::StaticPackageSource::DSL","Bundler/PubGrub/StaticPackageSource/DSL.html#method-i-add","(name, version, deps: {})",""],["add_assignment","Bundler::PubGrub::PartialSolution","Bundler/PubGrub/PartialSolution.html#method-i-add_assignment","(assignment)",""],["add_bundled_with","Bundler::LockfileGenerator","Bundler/LockfileGenerator.html#method-i-add_bundled_with","()",""],["add_color","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-add_color","(string, *color)",""],["add_color","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-add_color","(string, color)",""],["add_command","Bundler::Plugin","Bundler/Plugin.html#method-i-add_command","(command, cls)","<p>To be called via the API to register to handle a command\n"],["add_current_platform","Bundler::Definition","Bundler/Definition.html#method-i-add_current_platform","()",""],["add_default_gems_to","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-add_default_gems_to","(specs)","<p>Add default gems not already present in specs, and return them as a hash.\n"],["add_dependencies","Bundler::LockfileGenerator","Bundler/LockfileGenerator.html#method-i-add_dependencies","()",""],["add_dependency_names","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-add_dependency_names","(names)","<p>Used by definition.\n<p>Note: Do not override if you don’t know what you are doing.\n"],["add_dependency_names","Bundler::Source","Bundler/Source.html#method-i-add_dependency_names","(names)",""],["add_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-add_file","(destination, *args, &block)",""],["add_git_source","Bundler::Plugin::SourceList","Bundler/Plugin/SourceList.html#method-i-add_git_source","(options = {})",""],["add_git_source","Bundler::SourceList","Bundler/SourceList.html#method-i-add_git_source","(options = {})",""],["add_git_sources","Bundler::Dsl","Bundler/Dsl.html#method-i-add_git_sources","()",""],["add_global_rubygems_remote","Bundler::SourceList","Bundler/SourceList.html#method-i-add_global_rubygems_remote","(uri)",""],["add_hook","Bundler::Plugin","Bundler/Plugin.html#method-i-add_hook","(event, &block)","<p>To be called via the API to register a hooks and corresponding block that will be called to handle the …\n"],["add_incompatibility","Bundler::PubGrub::VersionSolver","Bundler/PubGrub/VersionSolver.html#method-i-add_incompatibility","(incompatibility)",""],["add_interrupt_handler","Bundler::Worker","Bundler/Worker.html#method-i-add_interrupt_handler","()",""],["add_link","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-add_link","(destination, *args)",""],["add_locked_ruby_version","Bundler::LockfileGenerator","Bundler/LockfileGenerator.html#method-i-add_locked_ruby_version","()",""],["add_path_source","Bundler::SourceList","Bundler/SourceList.html#method-i-add_path_source","(options = {})",""],["add_platform","Bundler::Definition","Bundler/Definition.html#method-i-add_platform","(platform)",""],["add_platforms","Bundler::LockfileGenerator","Bundler/LockfileGenerator.html#method-i-add_platforms","()",""],["add_plugin_source","Bundler::SourceList","Bundler/SourceList.html#method-i-add_plugin_source","(source, options = {})",""],["add_remote","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-add_remote","(source)",""],["add_rubygems_source","Bundler::Plugin::SourceList","Bundler/Plugin/SourceList.html#method-i-add_rubygems_source","(options = {})",""],["add_rubygems_source","Bundler::SourceList","Bundler/SourceList.html#method-i-add_rubygems_source","(options = {})",""],["add_runtime_options!","Bundler::Thor::Actions::ClassMethods","Bundler/Thor/Actions/ClassMethods.html#method-i-add_runtime_options-21","()","<p>Add runtime options that help actions execution.\n"],["add_section","Bundler::LockfileGenerator","Bundler/LockfileGenerator.html#method-i-add_section","(name, value)",""],["add_source","Bundler::Index","Bundler/Index.html#method-i-add_source","(index)",""],["add_source","Bundler::Plugin","Bundler/Plugin.html#method-i-add_source","(source, cls)","<p>To be called via the API to register to handle a source plugin\n"],["add_source_to_list","Bundler::SourceList","Bundler/SourceList.html#method-i-add_source_to_list","(source, list)",""],["add_sources","Bundler::LockfileGenerator","Bundler/LockfileGenerator.html#method-i-add_sources","()",""],["add_specs","Bundler::LockfileGenerator","Bundler/LockfileGenerator.html#method-i-add_specs","(specs)",""],["add_to_history?","Bundler::Thor::LineEditor::Readline","Bundler/Thor/LineEditor/Readline.html#method-i-add_to_history-3F","()",""],["add_to_load_path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-add_to_load_path","(paths)",""],["additional_base_requirements_for_resolve","Bundler::Definition","Bundler/Definition.html#method-i-additional_base_requirements_for_resolve","(resolution_packages, last_resolve)",""],["aggregate_global_source?","Bundler::SourceList","Bundler/SourceList.html#method-i-aggregate_global_source-3F","()",""],["aliases_for","Bundler::CLI","Bundler/CLI.html#method-c-aliases_for","(command_name)",""],["all","Bundler::Settings","Bundler/Settings.html#method-i-all","()",""],["all?","Bundler::Settings::MirrorConfig","Bundler/Settings/MirrorConfig.html#method-i-all-3F","()",""],["all_aliases","Bundler::CLI","Bundler/CLI.html#method-c-all_aliases","()",""],["all_commands","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-all_commands","()","<p>Returns the commands for this Bundler::Thor class and all subclasses.\n<p>Returns\n<p>Hash &mdash; An ordered hash with …\n"],["all_dependencies","Bundler::ParallelInstaller::SpecInstallation","Bundler/ParallelInstaller/SpecInstallation.html#method-i-all_dependencies","()","<p>Represents all dependencies\n"],["all_errors","Bundler::BundlerError","Bundler/BundlerError.html#method-c-all_errors","()",""],["all_requirements","Bundler::SourceMap","Bundler/SourceMap.html#method-i-all_requirements","()",""],["all_sources","Bundler::Plugin::SourceList","Bundler/Plugin/SourceList.html#method-i-all_sources","()",""],["all_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-all_sources","()",""],["all_specs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-all_specs","()",""],["all_tasks","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-all_tasks","()",""],["all_versions_for","Bundler::PubGrub::BasicPackageSource","Bundler/PubGrub/BasicPackageSource.html#method-i-all_versions_for","(package)","<p>Override me!\n<p>This is called per package to find all possible versions of a package.\n<p>It is called at most …\n"],["all_versions_for","Bundler::PubGrub::StaticPackageSource","Bundler/PubGrub/StaticPackageSource.html#method-i-all_versions_for","(package)",""],["all_versions_for","Bundler::Resolver","Bundler/Resolver.html#method-i-all_versions_for","(package)",""],["allow?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-allow-3F","()",""],["allow_git_ops?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-allow_git_ops-3F","()",""],["allow_incompatible_default_type!","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-allow_incompatible_default_type-21","()","<p>If you want to use defaults that don’t match the type of an option, either specify ‘check_default_type: …\n"],["allowed_push_host","Bundler::GemHelper","Bundler/GemHelper.html#method-i-allowed_push_host","()",""],["allowed_with_path","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-allowed_with_path","()",""],["allows_all?","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-allows_all-3F","(other)",""],["allows_all?","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-allows_all-3F","(other)",""],["allows_all?","Bundler::PubGrub::VersionRange::Empty","Bundler/PubGrub/VersionRange/Empty.html#method-i-allows_all-3F","(other)",""],["allows_all?","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-allows_all-3F","(other)",""],["allows_any?","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-allows_any-3F","(other)",""],["allows_any?","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-allows_any-3F","(other)",""],["allows_any?","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-allows_any-3F","(other)",""],["already_tagged?","Bundler::GemHelper","Bundler/GemHelper.html#method-i-already_tagged-3F","()",""],["answer_match","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-answer_match","(possibilities, answer, case_insensitive)",""],["any","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-c-any","(package)",""],["any","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-c-any","()",""],["any?","Bundler::MirrorSockets","Bundler/MirrorSockets.html#method-i-any-3F","()",""],["any?","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-any-3F","()","<p>Does this match every version of the package\n"],["any?","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-any-3F","()",""],["any?","Bundler::PubGrub::VersionRange::Empty","Bundler/PubGrub/VersionRange/Empty.html#method-i-any-3F","()",""],["any?","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-any-3F","()",""],["api_fetcher?","Bundler::Fetcher::Base","Bundler/Fetcher/Base.html#method-i-api_fetcher-3F","()",""],["api_fetcher?","Bundler::Fetcher::CompactIndex","Bundler/Fetcher/CompactIndex.html#method-i-api_fetcher-3F","()",""],["api_fetcher?","Bundler::Fetcher::Dependency","Bundler/Fetcher/Dependency.html#method-i-api_fetcher-3F","()",""],["api_fetchers","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-api_fetchers","()",""],["app_cache","Bundler","Bundler.html#method-c-app_cache","(custom_path = nil)",""],["app_cache_dirname","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-app_cache_dirname","()","<p>Name of directory where plugin the is expected to cache the gems when #cache is called.\n<p>Also this name …\n"],["app_cache_dirname","Bundler::Source::Git","Bundler/Source/Git.html#method-i-app_cache_dirname","()",""],["app_cache_dirname","Bundler::Source::Path","Bundler/Source/Path.html#method-i-app_cache_dirname","()",""],["app_cache_path","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-app_cache_path","(custom_path = nil)","<p>The full path where the plugin should cache the gem so that it can be installed latter.\n<p>Note: Do not override …\n"],["app_cache_path","Bundler::Settings","Bundler/Settings.html#method-i-app_cache_path","()",""],["app_cache_path","Bundler::Source::Path","Bundler/Source/Path.html#method-i-app_cache_path","(custom_path = nil)",""],["app_config_path","Bundler","Bundler.html#method-c-app_config_path","()",""],["append_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-append_file","(path, *args, &block)",""],["append_formatted_table","Bundler::Env","Bundler/Env.html#method-c-append_formatted_table","(title, pairs, out)",""],["append_to","Bundler::Injector","Bundler/Injector.html#method-i-append_to","(gemfile_path, new_gem_lines)",""],["append_to_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-append_to_file","(path, *args, &block)","<p>Append text to a file. Since it depends on insert_into_file, it’s reversible.\n<p>Parameters\n<p>path&lt;String&gt; … &mdash; "],["apply","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-apply","(path, config = {})","<p>Loads an external file and execute it in the instance binding.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; The path to …\n"],["apply_auth","Bundler::Source::Rubygems::Remote","Bundler/Source/Rubygems/Remote.html#method-i-apply_auth","(uri, auth)",""],["apply_func","Bundler::Worker","Bundler/Worker.html#method-i-apply_func","(obj, i)",""],["are_colors_disabled?","Bundler::Thor::Shell::Color","Bundler/Thor/Shell/Color.html#method-i-are_colors_disabled-3F","()",""],["are_colors_supported?","Bundler::Thor::Shell::Color","Bundler/Thor/Shell/Color.html#method-i-are_colors_supported-3F","()",""],["argument","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-argument","(name, options = {})","<p>Adds an argument to the class and creates an attr_accessor for it.\n<p>Arguments are different from options …\n"],["arguments","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-arguments","()","<p>Returns this class arguments, looking up in the ancestors chain.\n<p>Returns\n<p>Array\n"],["array_to_s","Bundler::Settings","Bundler/Settings.html#method-i-array_to_s","(array)",""],["as_path_source","Bundler::Source::Gemspec","Bundler/Source/Gemspec.html#method-i-as_path_source","()",""],["as_unicode","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-as_unicode","()",""],["ask","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-ask","(statement, *args)","<p>Asks something to the user and receives a response.\n<p>If a default value is specified it will be presented …\n"],["ask","Bundler::Thor::Shell::HTML","Bundler/Thor/Shell/HTML.html#method-i-ask","(statement, color = nil)","<p>Ask something to the user and receives a response.\n<p>Example\n<p>ask(“What is your name?”)\n"],["ask","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-ask","(msg)",""],["ask","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-ask","(message)",""],["ask_and_set","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-ask_and_set","(key, header, message)",""],["ask_and_set_ci","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-ask_and_set_ci","()",""],["ask_and_set_linter","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-ask_and_set_linter","()",""],["ask_and_set_test_framework","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-ask_and_set_test_framework","()",""],["ask_filtered","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-ask_filtered","(statement, color, options)",""],["ask_for_spec_from","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-ask_for_spec_from","(specs)",""],["ask_simply","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-ask_simply","(statement, color, options)",""],["attempt","Bundler::Retry","Bundler/Retry.html#method-i-attempt","(&block)",""],["attempts","Bundler::Retry","Bundler/Retry.html#method-c-attempts","()",""],["attempts","Bundler::Retry","Bundler/Retry.html#method-i-attempts","(&block)",""],["attributes","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-attributes","()","<p>Returns attributes.\n"],["attributes=","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-attributes-3D","(val)","<p>Setter for attributes <code>val</code>.\n"],["authority","Bundler::URI::HTTP","Bundler/URI/HTTP.html#method-i-authority","()","<p>Description\n<p>Returns the authority for an HTTP uri, as defined in datatracker.ietf.org/doc/html/rfc3986/#section-3.2 …\n"],["auto_install","Bundler::CLI","Bundler/CLI.html#method-i-auto_install","()","<p>Automatically invoke ‘bundle install` and resume if Bundler.settings exists. This is set through config …\n"],["autoswitching_applies?","Bundler::SelfManager","Bundler/SelfManager.html#method-i-autoswitching_applies-3F","()",""],["available","Bundler::ConnectionPool","Bundler/ConnectionPool.html#method-i-available","()","<p>Number of pool entries available for checkout at this instant.\n"],["available?","Bundler::Fetcher::Base","Bundler/Fetcher/Base.html#method-i-available-3F","()",""],["available?","Bundler::Fetcher::CompactIndex","Bundler/Fetcher/CompactIndex.html#method-i-available-3F","()",""],["available?","Bundler::Fetcher::Dependency","Bundler/Fetcher/Dependency.html#method-i-available-3F","()",""],["available?","Bundler::Thor::LineEditor::Basic","Bundler/Thor/LineEditor/Basic.html#method-c-available-3F","()",""],["available?","Bundler::Thor::LineEditor::Readline","Bundler/Thor/LineEditor/Readline.html#method-c-available-3F","()",""],["backport_ext_builder_monitor","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-backport_ext_builder_monitor","()",""],["backtrack","Bundler::PubGrub::PartialSolution","Bundler/PubGrub/PartialSolution.html#method-i-backtrack","(previous_level)",""],["backup","Bundler::EnvironmentPreserver","Bundler/EnvironmentPreserver.html#method-i-backup","()","<p>@return [Hash]\n"],["banner","Bundler::Thor","Bundler/Thor.html#method-c-banner","(command, namespace = nil, subcommand = false)","<p>The banner for this class. You can customize it if you are invoking the thor class by another ways which …\n"],["banner","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-banner","()","<p>The banner for this class. You can customize it if you are invoking the thor class by another ways which …\n"],["base","Bundler::CLI::Config","Bundler/CLI/Config.html#method-i-base","(name = nil, *value)",""],["base64digest!","Bundler::RubyGemsGemInstaller","Bundler/RubyGemsGemInstaller.html#method-i-base64digest-21","(digest)",""],["base_name","Bundler::Source::Git","Bundler/Source/Git.html#method-i-base_name","()",""],["base_path","Bundler::Thor::LineEditor::Readline::PathCompletion","Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-i-base_path","()",""],["base_requirements","Bundler::Resolver","Bundler/Resolver.html#method-i-base_requirements","()",""],["base_requirements","Bundler::Resolver::Base","Bundler/Resolver/Base.html#method-i-base_requirements","()",""],["basename","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-basename","()","<p>The basename of the program invoking the thor class.\n"],["best_available","Bundler::Thor::LineEditor","Bundler/Thor/LineEditor.html#method-c-best_available","()",""],["bin_path","Bundler","Bundler.html#method-c-bin_path","()","<p>Returns absolute location of where binstubs are installed to.\n"],["bin_path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-bin_path","(gem, bin, ver)",""],["bindir","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-bindir","()","<p>needed for bundle clean\n"],["binstubs","Bundler::CLI","Bundler/CLI.html#method-i-binstubs","(*gems)",""],["build","Bundler::Definition","Bundler/Definition.html#method-c-build","(gemfile, lockfile, unlock)","<p>Given a gemfile and lockfile creates a Bundler definition\n<p>@param gemfile [Pathname] Path to Gemfile @param …\n"],["build","Bundler::Index","Bundler/Index.html#method-c-build","()",""],["build","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-build","(spec, skip_validation = false)",""],["build","Bundler::URI::FTP","Bundler/URI/FTP.html#method-c-build","(args)","<p>Description\n<p>Creates a new Bundler::URI::FTP object from components, with syntax checking.\n<p>The components …\n"],["build","Bundler::URI::File","Bundler/URI/File.html#method-c-build","(args)","<p>Description\n<p>Creates a new Bundler::URI::File object from components, with syntax checking.\n<p>The components …\n"],["build","Bundler::URI::Generic","Bundler/URI/Generic.html#method-c-build","(args)","<p>Synopsis\n<p>See ::new.\n<p>Description\n"],["build","Bundler::URI::HTTP","Bundler/URI/HTTP.html#method-c-build","(args)","<p>Description\n<p>Creates a new Bundler::URI::HTTP object from components, with syntax checking.\n<p>The components …\n"],["build","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-c-build","(args)","<p>Description\n<p>Creates a new Bundler::URI::LDAP object from components, with syntax checking.\n<p>The components …\n"],["build","Bundler::URI::MailTo","Bundler/URI/MailTo.html#method-c-build","(args)","<p>Description\n<p>Creates a new Bundler::URI::MailTo object from components, with syntax checking.\n<p>Components …\n"],["build","Bundler::URI::WS","Bundler/URI/WS.html#method-c-build","(args)","<p>Description\n<p>Creates a new Bundler::URI::WS object from components, with syntax checking.\n<p>The components …\n"],["build2","Bundler::URI::Generic","Bundler/URI/Generic.html#method-c-build2","(args)","<p>Synopsis\n<p>See ::new.\n<p>Description\n"],["build_args","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-build_args","()",""],["build_args=","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-build_args-3D","(args)",""],["build_base_requirements","Bundler::Resolver::Base","Bundler/Resolver/Base.html#method-i-build_base_requirements","()",""],["build_checksum","Bundler::GemHelper","Bundler/GemHelper.html#method-i-build_checksum","(built_gem_path = nil)",""],["build_dependency","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-build_dependency","(name, requirements)",""],["build_extensions","Bundler::RubyGemsGemInstaller","Bundler/RubyGemsGemInstaller.html#method-i-build_extensions","()",""],["build_gem","Bundler::GemHelper","Bundler/GemHelper.html#method-i-build_gem","()",""],["build_gem","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-build_gem","(gem_dir, spec)",""],["build_gem_lines","Bundler::Injector","Bundler/Injector.html#method-i-build_gem_lines","(conservative_versioning)",""],["build_index","Bundler::Source::RubygemsAggregate","Bundler/Source/RubygemsAggregate.html#method-i-build_index","()",""],["build_path_query","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-build_path_query","()","<p>Private method to assemble <code>query</code> from <code>attributes</code>, <code>scope</code>, <code>filter</code>, and <code>extensions</code>.\n"],["built_at","Bundler::BuildMetadata","Bundler/BuildMetadata.html#method-c-built_at","()","<p>A string representing the date the bundler gem was built.\n"],["built_gem_path","Bundler::GemHelper","Bundler/GemHelper.html#method-i-built_gem_path","()",""],["bundle_path","Bundler","Bundler.html#method-c-bundle_path","()","<p>Returns absolute path of where gems are installed on the filesystem.\n"],["bundle_worker","Bundler::Fetcher::CompactIndex","Bundler/Fetcher/CompactIndex.html#method-i-bundle_worker","(func = nil)",""],["bundled_with","Bundler::LockfileParser","Bundler/LockfileParser.html#method-c-bundled_with","()",""],["bundler_cert_store","Bundler::Fetcher","Bundler/Fetcher.html#method-i-bundler_cert_store","()",""],["bundler_dependency_version","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-bundler_dependency_version","()",""],["bundler_major_version","Bundler","Bundler.html#method-c-bundler_major_version","()",""],["bundler_not_found_message","Bundler::Resolver","Bundler/Resolver.html#method-i-bundler_not_found_message","(conflict_dependencies)",""],["bundler_path","Bundler::Standalone","Bundler/Standalone.html#method-i-bundler_path","()",""],["bundler_pinned_to_current_version?","Bundler::Resolver","Bundler/Resolver.html#method-i-bundler_pinned_to_current_version-3F","()",""],["bundler_ruby_lib","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-bundler_ruby_lib","()",""],["bundler_version_to_lock","Bundler::Definition","Bundler/Definition.html#method-i-bundler_version_to_lock","()",""],["bundles_for_gem","Bundler::CLI::Doctor","Bundler/CLI/Doctor.html#method-i-bundles_for_gem","(spec)",""],["ca_file=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-ca_file-3D","(file)","<p>Sets the SSL certificate authority file.\n"],["ca_path=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-ca_path-3D","(path)","<p>Sets the SSL certificate authority path.\n"],["cache","Bundler::CLI","Bundler/CLI.html#method-i-cache","()",""],["cache","Bundler::Plugin","Bundler/Plugin.html#method-i-cache","()","<p>The cache directory for plugin stuffs\n"],["cache","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-cache","(spec, custom_path = nil)","<p>This method is called while caching to save copy of the gems that the source can resolve to path provided …\n"],["cache","Bundler::Runtime","Bundler/Runtime.html#method-i-cache","(custom_path = nil, local = false)",""],["cache","Bundler::Source::Git","Bundler/Source/Git.html#method-i-cache","(spec, custom_path = nil)",""],["cache","Bundler::Source::Path","Bundler/Source/Path.html#method-i-cache","(spec, custom_path = nil)",""],["cache","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cache","(spec, custom_path = nil)",""],["cache_dir","Bundler::Plugin::API","Bundler/Plugin/API.html#method-i-cache_dir","()","<p>The cache dir to be used by the plugins for storage\n<p>@return [Pathname] path of the cache dir\n"],["cache_path","Bundler::Fetcher::CompactIndex","Bundler/Fetcher/CompactIndex.html#method-i-cache_path","()",""],["cache_path","Bundler::Plugin::Installer::Git","Bundler/Plugin/Installer/Git.html#method-i-cache_path","()",""],["cache_path","Bundler::Plugin::Installer::Rubygems","Bundler/Plugin/Installer/Rubygems.html#method-i-cache_path","()",""],["cache_path","Bundler::Source::Git","Bundler/Source/Git.html#method-i-cache_path","()","<p>This is the path which is going to contain a cache of the git repository. When using the same git repository …\n"],["cache_path","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cache_path","()",""],["cache_slug","Bundler::Source::Rubygems::Remote","Bundler/Source/Rubygems/Remote.html#method-i-cache_slug","()","<p>@return [String] A slug suitable for use as a cache key for this\n\n<pre>remote.</pre>\n"],["cached!","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-cached-21","()","<p>Set internal representation to fetch the gems/specs from app cache.\n<p>When this is called, the source should …\n"],["cached!","Bundler::Source","Bundler/Source.html#method-i-cached-21","()",""],["cached!","Bundler::Source::Path","Bundler/Source/Path.html#method-i-cached-21","()",""],["cached!","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cached-21","()",""],["cached!","Bundler::SourceList","Bundler/SourceList.html#method-i-cached-21","()",""],["cached?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-cached-3F","()",""],["cached_built_in_gem","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cached_built_in_gem","(spec)",""],["cached_gem","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cached_gem","(spec)",""],["cached_path","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cached_path","(spec)",""],["cached_revision","Bundler::Source::Git","Bundler/Source/Git.html#method-i-cached_revision","()",""],["cached_revision_checked_out?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-cached_revision_checked_out-3F","()",""],["cached_specs","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cached_specs","()",""],["caches","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-caches","()",""],["call","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-c-call","(*args)",""],["call","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-i-call","()",""],["camel_case","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-camel_case","(str)","<p>Receives a string and convert it to camel case. camel_case returns CamelCase.\n<p>Parameters\n<p>String\n"],["can_display_colors?","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-can_display_colors-3F","()",""],["can_display_colors?","Bundler::Thor::Shell::Color","Bundler/Thor/Shell/Color.html#method-i-can_display_colors-3F","()",""],["can_display_colors?","Bundler::Thor::Shell::HTML","Bundler/Thor/Shell/HTML.html#method-i-can_display_colors-3F","()",""],["can_lock?","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-can_lock-3F","(spec)","<p>NOTE: Do not override if you don’t know what you are doing.\n"],["can_lock?","Bundler::Source","Bundler/Source.html#method-i-can_lock-3F","(spec)",""],["can_lock?","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-can_lock-3F","(spec)",""],["capture","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-capture","(cmd, dir, ignore_err: false)",""],["capture","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-capture","(*args)",""],["capture3_args_for","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-capture3_args_for","(cmd, dir)",""],["cd","Bundler::FileUtils","Bundler/FileUtils.html#method-i-cd","(dir, verbose: nil)","<p>Changes the working directory to the given <code>dir</code>, which should be interpretable as a path:\n<p>With no block …\n"],["cd","Bundler::FileUtils","Bundler/FileUtils.html#method-c-cd","(dir, verbose: nil)","<p>Changes the working directory to the given <code>dir</code>, which should be interpretable as a path:\n<p>With no block …\n"],["cert=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-cert-3D","(certificate)","<p>For Net::HTTP parity\n"],["cert_store=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-cert_store-3D","(store)","<p>Overrides the default SSL certificate store used for verifying connections.\n"],["certificate=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-certificate-3D","(certificate)","<p>Sets this client’s OpenSSL::X509::Certificate\n"],["change_reason","Bundler::Definition","Bundler/Definition.html#method-i-change_reason","()",""],["chdir","Bundler::FileUtils","Bundler/FileUtils.html#method-i-chdir","(dir, verbose: nil)",""],["chdir","Bundler::FileUtils","Bundler/FileUtils.html#method-c-chdir","(dir, verbose: nil)",""],["chdir","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-chdir","(dir, &blk)",""],["check","Bundler::CLI","Bundler/CLI.html#method-i-check","()",""],["check!","Bundler::CLI::Doctor","Bundler/CLI/Doctor.html#method-i-check-21","()",""],["check_allowed","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-check_allowed","(command)",""],["check_default_type!","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-check_default_type-21","()","<p>If you want to raise an error when the default value of an option does not match the type call check_default_type …\n"],["check_deprecated_ext_option","Bundler::CLI","Bundler/CLI.html#method-c-check_deprecated_ext_option","(arguments)",""],["check_executable_overwrite","Bundler::RubyGemsGemInstaller","Bundler/RubyGemsGemInstaller.html#method-i-check_executable_overwrite","(filename)",""],["check_for_activated_spec!","Bundler::Runtime","Bundler/Runtime.html#method-i-check_for_activated_spec-21","(spec)",""],["check_for_deployment_mode!","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-check_for_deployment_mode-21","()",""],["check_for_group_conflicts_in_cli_options","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-check_for_group_conflicts_in_cli_options","()",""],["check_for_options_conflicts","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-check_for_options_conflicts","()",""],["check_for_unmet_dependencies","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-i-check_for_unmet_dependencies","()",""],["check_headers","Bundler::URI::MailTo","Bundler/URI/MailTo.html#method-i-check_headers","(v)","<p>Checks the headers <code>v</code> component against either\n<p>HEADER_REGEXP\n\n"],["check_home_permissions","Bundler::CLI::Doctor","Bundler/CLI/Doctor.html#method-i-check_home_permissions","()",""],["check_host","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-check_host","(v)","<p>Checks the host <code>v</code> component for RFC2396 compliance and against the Bundler::URI::Parser Regexp for :HOST. …\n"],["check_missing_lockfile_dep","Bundler::Definition","Bundler/Definition.html#method-i-check_missing_lockfile_dep","()",""],["check_opaque","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-check_opaque","(v)","<p>Checks the opaque <code>v</code> component for RFC2396 compliance and against the Bundler::URI::Parser Regexp for …\n"],["check_password","Bundler::URI::File","Bundler/URI/File.html#method-i-check_password","(user)","<p>raise InvalidURIError\n"],["check_password","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-check_password","(v, user = @user)","<p>Checks the password <code>v</code> component for RFC2396 compliance and against the Bundler::URI::Parser Regexp for …\n"],["check_path","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-check_path","(v)","<p>Checks the path <code>v</code> component for RFC2396 compliance and against the Bundler::URI::Parser Regexp for :ABS_PATH …\n"],["check_path_source_safety","Bundler::Dsl","Bundler/Dsl.html#method-i-check_path_source_safety","()",""],["check_port","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-check_port","(v)","<p>Checks the port <code>v</code> component for RFC2396 compliance and against the Bundler::URI::Parser Regexp for :PORT. …\n"],["check_primary_source_safety","Bundler::Dsl","Bundler/Dsl.html#method-i-check_primary_source_safety","()",""],["check_rubygems_source_safety","Bundler::Dsl","Bundler/Dsl.html#method-i-check_rubygems_source_safety","()",""],["check_scheme","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-check_scheme","(v)","<p>Checks the scheme <code>v</code> component against the Bundler::URI::Parser Regexp for :SCHEME.\n"],["check_sources_consistency!","Bundler::Plugin::Installer","Bundler/Plugin/Installer.html#method-i-check_sources_consistency-21","(options)",""],["check_to","Bundler::URI::MailTo","Bundler/URI/MailTo.html#method-i-check_to","(v)","<p>Checks the to <code>v</code> component.\n"],["check_trust_policy","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-check_trust_policy","()",""],["check_typecode","Bundler::URI::FTP","Bundler/URI/FTP.html#method-i-check_typecode","(v)","<p>Validates typecode <code>v</code>, returns <code>true</code> or <code>false</code>.\n"],["check_unknown_options!","Bundler::Thor","Bundler/Thor.html#method-c-check_unknown_options-21","(options = {})","<p>Extend check unknown options to accept a hash of conditions.\n<p>Parameters\n<p>options&lt;Hash&gt;: A hash containing …\n"],["check_unknown_options!","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-check_unknown_options-21","()","<p>If you want to raise an error for unknown options, call check_unknown_options! This is disabled by default …\n"],["check_user","Bundler::URI::File","Bundler/URI/File.html#method-i-check_user","(user)","<p>raise InvalidURIError\n"],["check_user","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-check_user","(v)","<p>Checks the user <code>v</code> component for RFC2396 compliance and against the Bundler::URI::Parser Regexp for :USERINFO. …\n"],["check_userinfo","Bundler::URI::File","Bundler/URI/File.html#method-i-check_userinfo","(user)","<p>raise InvalidURIError\n"],["check_userinfo","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-check_userinfo","(user, password = nil)","<p>Checks the <code>user</code> and <code>password</code>.\n<p>If <code>password</code> is not provided, then <code>user</code> is split, using Bundler::URI::Generic.split_userinfo …\n"],["checkin","Bundler::ConnectionPool","Bundler/ConnectionPool.html#method-i-checkin","()",""],["checkout","Bundler::ConnectionPool","Bundler/ConnectionPool.html#method-i-checkout","(options = {})",""],["checkout","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-checkout","()",""],["checksum_for_file","Bundler::CompactIndexClient::Updater","Bundler/CompactIndexClient/Updater.html#method-i-checksum_for_file","(path)",""],["checksum_type","Bundler::RubyGemsGemInstaller","Bundler/RubyGemsGemInstaller.html#method-i-checksum_type","(checksum)",""],["checksums","Bundler::CompactIndexClient::Cache","Bundler/CompactIndexClient/Cache.html#method-i-checksums","()",""],["chmod","Bundler::FileUtils","Bundler/FileUtils.html#method-i-chmod","(mode, list, noop: nil, verbose: nil)","<p>Changes permissions on the entries at the paths given in <code>list</code> (a single path or an array of paths) to …\n"],["chmod","Bundler::FileUtils","Bundler/FileUtils.html#method-c-chmod","(mode, list, noop: nil, verbose: nil)","<p>Changes permissions on the entries at the paths given in <code>list</code> (a single path or an array of paths) to …\n"],["chmod","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-chmod","(path, mode, config = {})","<p>Changes the mode of the given file or directory.\n<p>Parameters\n<p>mode&lt;Integer&gt; &mdash; the file mode\n"],["chmod_R","Bundler::FileUtils","Bundler/FileUtils.html#method-i-chmod_R","(mode, list, noop: nil, verbose: nil, force: nil)","<p>Like Bundler::FileUtils.chmod, but changes permissions recursively.\n"],["chmod_R","Bundler::FileUtils","Bundler/FileUtils.html#method-c-chmod_R","(mode, list, noop: nil, verbose: nil, force: nil)","<p>Like Bundler::FileUtils.chmod, but changes permissions recursively.\n"],["choose_package_version","Bundler::PubGrub::VersionSolver","Bundler/PubGrub/VersionSolver.html#method-i-choose_package_version","()",""],["chown","Bundler::FileUtils","Bundler/FileUtils.html#method-i-chown","(user, group, list, noop: nil, verbose: nil)","<p>Changes the owner and group on the entries at the paths given in <code>list</code> (a single path or an array of paths) …\n"],["chown","Bundler::FileUtils","Bundler/FileUtils.html#method-c-chown","(user, group, list, noop: nil, verbose: nil)","<p>Changes the owner and group on the entries at the paths given in <code>list</code> (a single path or an array of paths) …\n"],["chown_R","Bundler::FileUtils","Bundler/FileUtils.html#method-i-chown_R","(user, group, list, noop: nil, verbose: nil, force: nil)","<p>Like Bundler::FileUtils.chown, but changes owner and group recursively.\n"],["chown_R","Bundler::FileUtils","Bundler/FileUtils.html#method-c-chown_R","(user, group, list, noop: nil, verbose: nil, force: nil)","<p>Like Bundler::FileUtils.chown, but changes owner and group recursively.\n"],["chruby_version","Bundler::Env","Bundler/Env.html#method-c-chruby_version","()",""],["ciphers=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-ciphers-3D","(ciphers)","<p>The ciphers allowed for SSL connections\n"],["cis","Bundler::Fetcher","Bundler/Fetcher.html#method-i-cis","()",""],["class_option","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-class_option","(name, options = {})","<p>Adds an option to the set of class options\n<p>Parameters\n<p>name&lt;Symbol&gt; &mdash; The name of the argument.\n"],["class_options","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-class_options","(options = nil)","<p>Adds a bunch of options to the set of class options.\n\n<pre>class_options :foo =&gt; false, :bar =&gt; :required, :baz ...</pre>\n"],["clean","Bundler::CLI","Bundler/CLI.html#method-i-clean","()",""],["clean","Bundler::Runtime","Bundler/Runtime.html#method-i-clean","(dry_run = false)",""],["clean?","Bundler::GemHelper","Bundler/GemHelper.html#method-i-clean-3F","()",""],["clean_after_install?","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-clean_after_install-3F","()",""],["clean_deps","Bundler::PubGrub::StaticPackageSource::DSL","Bundler/PubGrub/StaticPackageSource/DSL.html#method-i-clean_deps","(name, version, deps)","<p>Exclude redundant self-referencing dependencies\n"],["clean_env","Bundler","Bundler.html#method-c-clean_env","()","<p>@deprecated Use ‘unbundled_env` instead\n"],["clean_exec","Bundler","Bundler.html#method-c-clean_exec","(*args)","<p>@deprecated Use ‘unbundled_exec` instead\n"],["clean_load_path","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-clean_load_path","()",""],["clean_system","Bundler","Bundler.html#method-c-clean_system","(*args)","<p>@deprecated Use ‘unbundled_system` instead\n"],["cleanup_terms","Bundler::PubGrub::Incompatibility","Bundler/PubGrub/Incompatibility.html#method-i-cleanup_terms","(terms)",""],["clear_gemspec_cache","Bundler","Bundler.html#method-c-clear_gemspec_cache","()",""],["clear_paths","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-clear_paths","()",""],["cli_help","Bundler::CLI","Bundler/CLI.html#method-i-cli_help","()",""],["client_fetcher","Bundler::Fetcher::CompactIndex","Bundler/Fetcher/CompactIndex.html#method-i-client_fetcher","()",""],["clone_needs_extra_fetch?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-clone_needs_extra_fetch-3F","()",""],["clone_needs_unshallow?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-clone_needs_unshallow-3F","()",""],["cmp","Bundler::FileUtils","Bundler/FileUtils.html#method-i-cmp","(a, b)",""],["cmp","Bundler::FileUtils","Bundler/FileUtils.html#method-c-cmp","(a, b)",""],["coerce","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-coerce","(oth)","<p>Args\n<p><code>v</code> &mdash; Bundler::URI or String\n\n<p>Description\n"],["collapsible?","Bundler::PubGrub::FailureWriter","Bundler/PubGrub/FailureWriter.html#method-i-collapsible-3F","(incompatibility)",""],["collect_method","Bundler::FileUtils","Bundler/FileUtils.html#method-c-collect_method","(opt)","<p>Returns an array of the string method names of the methods that accept the given keyword option <code>opt</code>; …\n"],["combine_rubygems_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-combine_rubygems_sources","()",""],["command","Bundler::Plugin::API","Bundler/Plugin/API.html#method-c-command","(command, cls = self)","<p>The plugins should declare that they handle a command through this helper.\n<p>@param [String] command being …\n"],["command?","Bundler::Plugin","Bundler/Plugin.html#method-i-command-3F","(command)","<p>Checks if any plugin handles the command\n"],["command_help","Bundler::Thor","Bundler/Thor.html#method-c-command_help","(shell, command_name)","<p>Prints help information for the given command.\n<p>Parameters\n<p>shell&lt;Bundler::Thor::Shell&gt; command_name …\n"],["command_plugin","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-command_plugin","(command)","<p>Fetch the name of plugin handling the command\n"],["commands","Bundler::FileUtils","Bundler/FileUtils.html#method-c-commands","()","<p>Returns an array of the string names of Bundler::FileUtils methods that accept one or more keyword arguments: …\n"],["commands","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-commands","()","<p>Returns the commands for this Bundler::Thor class.\n<p>Returns\n<p>Hash &mdash; An ordered hash with commands names as …\n"],["comment_lines","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-comment_lines","(path, flag, *args)","<p>Comment all lines matching a given regex.  It will leave the space which existed before the beginning …\n"],["commit","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-commit","()",""],["committed?","Bundler::GemHelper","Bundler/GemHelper.html#method-i-committed-3F","()",""],["compact_index_client","Bundler::Fetcher::CompactIndex","Bundler/Fetcher/CompactIndex.html#method-i-compact_index_client","()",""],["compact_index_request","Bundler::Fetcher::CompactIndex","Bundler/Fetcher/CompactIndex.html#method-c-compact_index_request","(method_name)",""],["compare_file","Bundler::FileUtils","Bundler/FileUtils.html#method-i-compare_file","(a, b)","<p>Returns <code>true</code> if the contents of files <code>a</code> and <code>b</code> are identical, <code>false</code> otherwise.\n<p>Arguments <code>a</code> and <code>b</code> should …\n"],["compare_file","Bundler::FileUtils","Bundler/FileUtils.html#method-c-compare_file","(a, b)","<p>Returns <code>true</code> if the contents of files <code>a</code> and <code>b</code> are identical, <code>false</code> otherwise.\n<p>Arguments <code>a</code> and <code>b</code> should …\n"],["compare_stream","Bundler::FileUtils","Bundler/FileUtils.html#method-i-compare_stream","(a, b)","<p>Returns <code>true</code> if the contents of streams <code>a</code> and <code>b</code> are identical, <code>false</code> otherwise.\n<p>Arguments <code>a</code> and <code>b</code> should …\n"],["compare_stream","Bundler::FileUtils","Bundler/FileUtils.html#method-c-compare_stream","(a, b)","<p>Returns <code>true</code> if the contents of streams <code>a</code> and <code>b</code> are identical, <code>false</code> otherwise.\n<p>Arguments <code>a</code> and <code>b</code> should …\n"],["compare_version","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-compare_version","(version)",""],["completion_options","Bundler::Thor::LineEditor::Readline","Bundler/Thor/LineEditor/Readline.html#method-i-completion_options","()",""],["completion_proc","Bundler::Thor::LineEditor::Readline","Bundler/Thor/LineEditor/Readline.html#method-i-completion_proc","()",""],["component","Bundler::URI::Generic","Bundler/URI/Generic.html#method-c-component","()","<p>Components of the Bundler::URI in the order.\n"],["component","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-component","()","<p>Components of the Bundler::URI in the order.\n"],["component_ary","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-component_ary","()","<p>Returns an Array of the components defined from the COMPONENT Array.\n"],["concat","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-concat","(string)",""],["configs","Bundler::Settings","Bundler/Settings.html#method-i-configs","()",""],["configure","Bundler","Bundler.html#method-c-configure","()",""],["configure_gem_home","Bundler","Bundler.html#method-c-configure_gem_home","(path)",""],["configure_gem_home_and_path","Bundler","Bundler.html#method-c-configure_gem_home_and_path","(path = bundle_path)",""],["configure_gem_path","Bundler","Bundler.html#method-c-configure_gem_path","()",""],["configure_gem_version_promoter","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-configure_gem_version_promoter","(definition, options)",""],["configured_bundle_path","Bundler","Bundler.html#method-c-configured_bundle_path","()",""],["configured_uri","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-configured_uri","()","<p>Adds credentials to the URI\n"],["confirm","Bundler::CLI::Config::Base","Bundler/CLI/Config/Base.html#method-i-confirm","(name)",""],["confirm","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-confirm","(msg = nil, newline = nil)",""],["confirm","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-confirm","(message = nil, newline = nil)",""],["confirm?","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-confirm-3F","()",""],["confirm?","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-confirm-3F","()",""],["confirm_all","Bundler::CLI::Config::Base","Bundler/CLI/Config/Base.html#method-i-confirm_all","()",""],["conflict?","Bundler::PubGrub::Incompatibility","Bundler/PubGrub/Incompatibility.html#method-i-conflict-3F","()",""],["connection","Bundler::Fetcher","Bundler/Fetcher.html#method-i-connection","()",""],["connection_for","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-connection_for","(uri)","<p>Creates a new connection for <code>uri</code>\n"],["connection_stored?","Bundler::ConnectionPool::TimedStack","Bundler/ConnectionPool/TimedStack.html#method-i-connection_stored-3F","(options = nil)","<p>This is an extension point for TimedStack and is called with a mutex.\n<p>This method must returns true if …\n"],["conservative_version","Bundler::Injector","Bundler/Injector.html#method-i-conservative_version","(spec)",""],["consider_prereleases!","Bundler::Resolver::Package","Bundler/Resolver/Package.html#method-i-consider_prereleases-21","()",""],["console","Bundler::CLI","Bundler/CLI.html#method-i-console","(group = nil)",""],["constraint_string","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-constraint_string","()",""],["constraints","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-constraints","()",""],["contains?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-contains-3F","(commit)",""],["contents","Bundler::Dsl::DSLError","Bundler/Dsl/DSLError.html#method-i-contents","()","<p>@return [String] the contents of the DSL that cause the exception to\n\n<pre>be raised.</pre>\n"],["contiguous_to?","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-contiguous_to-3F","(other)",""],["converge_dependencies","Bundler::Definition","Bundler/Definition.html#method-i-converge_dependencies","()",""],["converge_locals","Bundler::Definition","Bundler/Definition.html#method-i-converge_locals","()","<p>Get all locals and override their matching sources. Return true if any of the locals changed (for example, …\n"],["converge_locked_specs","Bundler::Definition","Bundler/Definition.html#method-i-converge_locked_specs","()","<p>Remove elements from the locked specs that are expired. This will most commonly happen if the Gemfile …\n"],["converge_path_source_to_gemspec_source","Bundler::Definition","Bundler/Definition.html#method-i-converge_path_source_to_gemspec_source","(source)",""],["converge_path_sources_to_gemspec_sources","Bundler::Definition","Bundler/Definition.html#method-i-converge_path_sources_to_gemspec_sources","()",""],["converge_paths","Bundler::Definition","Bundler/Definition.html#method-i-converge_paths","()",""],["converge_sources","Bundler::Definition","Bundler/Definition.html#method-i-converge_sources","()",""],["converge_specs","Bundler::Definition","Bundler/Definition.html#method-i-converge_specs","(specs)",""],["convert_autorequire","Bundler::Injector","Bundler/Injector.html#method-i-convert_autorequire","(autorequire)",""],["convert_to_backward_compatible_key","Bundler::YAMLSerializer","Bundler/YAMLSerializer.html#method-i-convert_to_backward_compatible_key","(key)","<p>for settings’ keys\n"],["convert_to_uri","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-convert_to_uri","(uri)",""],["convert_to_uri","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-convert_to_uri","(uri)",""],["converted_value","Bundler::Settings","Bundler/Settings.html#method-i-converted_value","(value, key)",""],["copy","Bundler::FileUtils","Bundler/FileUtils.html#method-i-copy","(src, dest, preserve: nil, noop: nil, verbose: nil)",""],["copy","Bundler::FileUtils","Bundler/FileUtils.html#method-c-copy","(src, dest, preserve: nil, noop: nil, verbose: nil)",""],["copy_entry","Bundler::FileUtils","Bundler/FileUtils.html#method-i-copy_entry","(src, dest, preserve = false, dereference_root = false, remove_destination = false)","<p>Recursively copies files from <code>src</code> to <code>dest</code>.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable as paths.\n<p>If …\n"],["copy_entry","Bundler::FileUtils","Bundler/FileUtils.html#method-c-copy_entry","(src, dest, preserve = false, dereference_root = false, remove_destination = false)","<p>Recursively copies files from <code>src</code> to <code>dest</code>.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable as paths.\n<p>If …\n"],["copy_file","Bundler::CompactIndexClient::Updater","Bundler/CompactIndexClient/Updater.html#method-i-copy_file","(source, dest)",""],["copy_file","Bundler::FileUtils","Bundler/FileUtils.html#method-i-copy_file","(src, dest, preserve = false, dereference = true)","<p>Copies file from <code>src</code> to <code>dest</code>, which should not be directories.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable …\n"],["copy_file","Bundler::FileUtils","Bundler/FileUtils.html#method-c-copy_file","(src, dest, preserve = false, dereference = true)","<p>Copies file from <code>src</code> to <code>dest</code>, which should not be directories.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable …\n"],["copy_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-copy_file","(source, *args, &block)","<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">copy_file</span> <span class=\"ruby-string\">&quot;README&quot;</span>, <span class=\"ruby-string\">&quot;doc/README&quot;</span>\n\n<span class=\"ruby-identifier\">copy_file</span> <span class=\"ruby-string\">&quot;doc/README&quot;</span>\n</pre>\n"],["copy_stream","Bundler::FileUtils","Bundler/FileUtils.html#method-i-copy_stream","(src, dest)","<p>Copies IO stream <code>src</code> to IO stream <code>dest</code> via IO.copy_stream.\n<p>Related: methods for copying.\n"],["copy_stream","Bundler::FileUtils","Bundler/FileUtils.html#method-c-copy_stream","(src, dest)","<p>Copies IO stream <code>src</code> to IO stream <code>dest</code> via IO.copy_stream.\n<p>Related: methods for copying.\n"],["copy_to","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-copy_to","(destination, submodules = false)",""],["correct_for_windows_path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-correct_for_windows_path","(path)",""],["corrections","UndefinedCommandError::SpellChecker","UndefinedCommandError/SpellChecker.html#method-i-corrections","()",""],["corrections","UnknownArgumentError::SpellChecker","UnknownArgumentError/SpellChecker.html#method-i-corrections","()",""],["count_derivations","Bundler::PubGrub::FailureWriter","Bundler/PubGrub/FailureWriter.html#method-i-count_derivations","(incompatibility)",""],["cp","Bundler::FileUtils","Bundler/FileUtils.html#method-i-cp","(src, dest, preserve: nil, noop: nil, verbose: nil)","<p>Copies files.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should be interpretable …\n"],["cp","Bundler::FileUtils","Bundler/FileUtils.html#method-c-cp","(src, dest, preserve: nil, noop: nil, verbose: nil)","<p>Copies files.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should be interpretable …\n"],["cp_lr","Bundler::FileUtils","Bundler/FileUtils.html#method-i-cp_lr","(src, dest, noop: nil, verbose: nil, dereference_root: true, remove_destination: false)","<p>Creates hard links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["cp_lr","Bundler::FileUtils","Bundler/FileUtils.html#method-c-cp_lr","(src, dest, noop: nil, verbose: nil, dereference_root: true, remove_destination: false)","<p>Creates hard links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["cp_r","Bundler::FileUtils","Bundler/FileUtils.html#method-i-cp_r","(src, dest, preserve: nil, noop: nil, verbose: nil, dereference_root: true, remove_destination: nil)","<p>Recursively copies files.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) …\n"],["cp_r","Bundler::FileUtils","Bundler/FileUtils.html#method-c-cp_r","(src, dest, preserve: nil, noop: nil, verbose: nil, dereference_root: true, remove_destination: nil)","<p>Recursively copies files.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) …\n"],["cpu_match","Bundler::GemHelpers::PlatformMatch","Bundler/GemHelpers/PlatformMatch.html#method-c-cpu_match","(spec_platform, user_platform)",""],["create_bundle_path","Bundler","Bundler.html#method-c-create_bundle_path","()",""],["create_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-create_file","(destination, *args, &block)","<p>Create a new file relative to the destination root with the given data, which is the return value of …\n"],["create_link","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-create_link","(destination, *args)","<p>Create a new file relative to the destination root from the given source.\n<p>Parameters\n<p>destination&lt;String&gt; … &mdash; "],["create_threads","Bundler::Worker","Bundler/Worker.html#method-i-create_threads","()",""],["credential_filtered_string","Bundler::URICredentialsFilter","Bundler/URICredentialsFilter.html#method-i-credential_filtered_string","(str_to_filter, uri)",""],["credential_filtered_uri","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-credential_filtered_uri","()","<p>Removes credentials from the URI\n"],["credential_filtered_uri","Bundler::URICredentialsFilter","Bundler/URICredentialsFilter.html#method-i-credential_filtered_uri","(uri_to_anonymize)",""],["credentials_for","Bundler::Settings","Bundler/Settings.html#method-i-credentials_for","(uri)",""],["credless_remotes","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-credless_remotes","()",""],["cross_check_for_errors","Bundler::Injector","Bundler/Injector.html#method-i-cross_check_for_errors","(gemfile_path, original_deps, removed_deps, initial_gemfile)","<p>@param [Pathname] gemfile_path   The Gemfile from which to remove dependencies. @param [Array] original_deps …\n"],["current_branch","Bundler::GemHelper","Bundler/GemHelper.html#method-i-current_branch","()",""],["current_branch","Bundler::Source::Git","Bundler/Source/Git.html#method-i-current_branch","()",""],["current_branch","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-current_branch","()",""],["current_command","Bundler::CLI","Bundler/CLI.html#method-i-current_command","()",""],["current_command_chain","Bundler::Thor::Invocation","Bundler/Thor/Invocation.html#method-i-current_command_chain","()","<p>Make the current command chain accessible with in a Bundler::Thor-(sub)command\n"],["current_dependencies","Bundler::Definition","Bundler/Definition.html#method-i-current_dependencies","()",""],["current_env?","Bundler::Dependency","Bundler/Dependency.html#method-i-current_env-3F","()",""],["current_locked_dependencies","Bundler::Definition","Bundler/Definition.html#method-i-current_locked_dependencies","()",""],["current_platform?","Bundler::Dependency","Bundler/Dependency.html#method-i-current_platform-3F","()",""],["current_platform?","Bundler::Resolver::Package","Bundler/Resolver/Package.html#method-i-current_platform-3F","()",""],["current_platform_locked?","Bundler::Definition","Bundler/Definition.html#method-i-current_platform_locked-3F","()",""],["current_ruby","Bundler","Bundler.html#method-c-current_ruby","()","<p>Returns current version of Ruby\n<p>@return [CurrentRuby] Current version of Ruby\n"],["current_ruby_platform_locked?","Bundler::Definition","Bundler/Definition.html#method-i-current_ruby_platform_locked-3F","()",""],["current_time","Bundler::ConnectionPool::TimedStack","Bundler/ConnectionPool/TimedStack.html#method-i-current_time","()",""],["current_version","Bundler::SelfManager","Bundler/SelfManager.html#method-i-current_version","()",""],["debug","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-c-debug","()",""],["debug","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-debug","(msg = nil, newline = nil)",""],["debug","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-debug","(message = nil, newline = nil)",""],["debug?","Bundler::Resolver","Bundler/Resolver.html#method-i-debug-3F","()",""],["debug?","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-debug-3F","()",""],["debug?","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-debug-3F","()",""],["decide","Bundler::PubGrub::PartialSolution","Bundler/PubGrub/PartialSolution.html#method-i-decide","(package, version)",""],["decision","Bundler::PubGrub::Assignment","Bundler/PubGrub/Assignment.html#method-c-decision","(package, version, decision_level, index)",""],["decision?","Bundler::PubGrub::Assignment","Bundler/PubGrub/Assignment.html#method-i-decision-3F","()",""],["decision_level","Bundler::PubGrub::PartialSolution","Bundler/PubGrub/PartialSolution.html#method-i-decision_level","()",""],["decode_uri_component","Bundler::URI","Bundler/URI.html#method-c-decode_uri_component","(str, enc=Encoding::UTF_8)","<p>Decodes given <code>str</code> of URL-encoded data.\n<p>This does not decode + to SP.\n"],["decode_www_form","Bundler::URI","Bundler/URI.html#method-c-decode_www_form","(str, enc=Encoding::UTF_8, separator: '&', use__charset_: false, isindex: false)","<p>Decodes URL-encoded form data from given <code>str</code>.\n<p>This decodes application/x-www-form-urlencoded data and …\n"],["decode_www_form_component","Bundler::URI","Bundler/URI.html#method-c-decode_www_form_component","(str, enc=Encoding::UTF_8)","<p>Decodes given <code>str</code> of URL-encoded form data.\n<p>This decodes + to SP.\n<p>See Bundler::URI.encode_www_form_component …\n"],["decoded_password","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-decoded_password","()","<p>Returns the password component after Bundler::URI decoding.\n"],["decoded_user","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-decoded_user","()","<p>Returns the user component after Bundler::URI decoding.\n"],["default_attempts","Bundler::Retry","Bundler/Retry.html#method-c-default_attempts","()",""],["default_bundle_dir","Bundler","Bundler.html#method-c-default_bundle_dir","()",""],["default_bundle_dir","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-default_bundle_dir","()",""],["default_bundler_source","Bundler::Resolver","Bundler/Resolver.html#method-i-default_bundler_source","()",""],["default_cache_path_for","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-default_cache_path_for","(dir)",""],["default_command","Bundler::Thor","Bundler/Thor.html#method-c-default_command","(meth = nil)","<p>Sets the default command when thor is executed without an explicit command to be called.\n<p>Parameters\n<p>meth&lt;Symbol&gt; … &mdash; "],["default_force_ruby_platform","Bundler::ForcePlatform","Bundler/ForcePlatform.html#method-i-default_force_ruby_platform","()","<p>The ‘:force_ruby_platform` value used by dependencies for resolution, and by locked specifications for …\n"],["default_gem?","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-default_gem-3F","()",""],["default_gem_spec","Bundler::CLI::Info","Bundler/CLI/Info.html#method-i-default_gem_spec","(gem_name)",""],["default_gemfile","Bundler","Bundler.html#method-c-default_gemfile","()",""],["default_gemfile","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-default_gemfile","()",""],["default_glob?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-default_glob-3F","()",""],["default_lockfile","Bundler","Bundler.html#method-c-default_lockfile","()",""],["default_lockfile","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-default_lockfile","()",""],["default_logger","Bundler::PubGrub","Bundler/PubGrub.html#method-c-default_logger","()",""],["default_port","Bundler::URI::Generic","Bundler/URI/Generic.html#method-c-default_port","()","<p>Returns default port.\n"],["default_port","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-default_port","()","<p>Returns default port.\n"],["default_remote","Bundler::GemHelper","Bundler/GemHelper.html#method-i-default_remote","()",""],["default_retries","Bundler::Retry","Bundler/Retry.html#method-c-default_retries","()",""],["default_source","Bundler::Definition","Bundler/Definition.html#method-i-default_source","()",""],["default_source","Bundler::Plugin::SourceList","Bundler/Plugin/SourceList.html#method-i-default_source","()",""],["default_source","Bundler::SourceList","Bundler/SourceList.html#method-i-default_source","()",""],["default_stubs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-default_stubs","()",""],["default_task","Bundler::Thor","Bundler/Thor.html#method-c-default_task","(meth = nil)",""],["define","Bundler::Plugin::Events","Bundler/Plugin/Events.html#method-c-define","(const, event)",""],["define_path_helpers","Bundler::Standalone","Bundler/Standalone.html#method-i-define_path_helpers","()",""],["define_task","Bundler::Deployment","Bundler/Deployment.html#method-c-define_task","(context, task_method = :task, opts = {})",""],["defined_event?","Bundler::Plugin::Events","Bundler/Plugin/Events.html#method-c-defined_event-3F","(event)","<p>Check if an event has been defined @param event [String] An event to check @return [Boolean] A boolean …\n"],["definition","Bundler","Bundler.html#method-c-definition","(unlock = nil)","<p>Returns an instance of Bundler::Definition for given Gemfile and lockfile\n<p>@param unlock [Hash, Boolean …\n"],["definition_method","Bundler::Runtime","Bundler/Runtime.html#method-c-definition_method","(meth)",""],["delete","Bundler::Resolver::Base","Bundler/Resolver/Base.html#method-i-delete","(specs)",""],["delete","Bundler::SpecSet","Bundler/SpecSet.html#method-i-delete","(specs)",""],["delete_by_name","Bundler::SpecSet","Bundler/SpecSet.html#method-i-delete_by_name","(name)",""],["deleted_deps","Bundler::Definition","Bundler/Definition.html#method-i-deleted_deps","()",""],["deleted_gem?","Gem::Specification","Gem/Specification.html#method-i-deleted_gem-3F","()",""],["dependencies","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-i-dependencies","(names)",""],["dependencies","Bundler::CompactIndexClient::Cache","Bundler/CompactIndexClient/Cache.html#method-i-dependencies","(name)",""],["dependencies","Bundler::ParallelInstaller::SpecInstallation","Bundler/ParallelInstaller/SpecInstallation.html#method-i-dependencies","()","<p>Represents only the non-development dependencies, the ones that are itself and are in the total list. …\n"],["dependencies","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-dependencies","()",""],["dependencies","Bundler::Resolver::Candidate","Bundler/Resolver/Candidate.html#method-i-dependencies","()",""],["dependencies","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-dependencies","()",""],["dependencies_count_for","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-dependencies_count_for","(definition)",""],["dependencies_eql?","Bundler::Index","Bundler/Index.html#method-i-dependencies_eql-3F","(spec, other_spec)",""],["dependencies_for","Bundler::Definition","Bundler/Definition.html#method-i-dependencies_for","(groups)",""],["dependencies_for","Bundler::PubGrub::BasicPackageSource","Bundler/PubGrub/BasicPackageSource.html#method-i-dependencies_for","(package, version)","<p>Override me!\n<p>Returns: Hash in the form of { package =&gt; requirement, … }\n"],["dependencies_for","Bundler::PubGrub::StaticPackageSource","Bundler/PubGrub/StaticPackageSource.html#method-i-dependencies_for","(package, version)",""],["dependencies_for_source_changed?","Bundler::Definition","Bundler/Definition.html#method-i-dependencies_for_source_changed-3F","(source, locked_source = source)",""],["dependencies_installed?","Bundler::ParallelInstaller::SpecInstallation","Bundler/ParallelInstaller/SpecInstallation.html#method-i-dependencies_installed-3F","(all_specs)","<p>Checks installed dependencies against spec’s dependencies to make sure needed dependencies have been …\n"],["dependencies_to_gemfile","Gem::Specification","Gem/Specification.html#method-i-dependencies_to_gemfile","(dependencies, group = nil)",""],["dependencies_with_bundler","Bundler::Definition","Bundler/Definition.html#method-i-dependencies_with_bundler","()",""],["dependency_api_available?","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-dependency_api_available-3F","()",""],["dependency_api_uri","Bundler::Fetcher::Dependency","Bundler/Fetcher/Dependency.html#method-i-dependency_api_uri","(gem_names = [])",""],["dependency_names","Bundler::Index","Bundler/Index.html#method-i-dependency_names","()",""],["dependency_names_to_double_check","Bundler::Source","Bundler/Source.html#method-i-dependency_names_to_double_check","()",""],["dependency_names_to_double_check","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-dependency_names_to_double_check","()",""],["dependency_specs","Bundler::Fetcher::Dependency","Bundler/Fetcher/Dependency.html#method-i-dependency_specs","(gem_names)",""],["deprecated_ext_value?","Bundler::CLI","Bundler/CLI.html#method-c-deprecated_ext_value-3F","(arguments)",""],["deprecated_rubocop_option","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-deprecated_rubocop_option","()",""],["depth","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-depth","()",""],["depth_args","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-depth_args","()",""],["deq","Bundler::Worker","Bundler/Worker.html#method-i-deq","()","<p>Retrieves results of job function being executed in worker pool\n"],["derive","Bundler::PubGrub::PartialSolution","Bundler/PubGrub/PartialSolution.html#method-i-derive","(term, cause)",""],["desc","Bundler::Thor","Bundler/Thor.html#method-c-desc","(usage, description, options = {})","<p>Defines the usage and the description of the next command.\n<p>Parameters\n<p>usage&lt;String&gt; description&lt;String&gt; …\n"],["desc","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-desc","(description = nil)","<p>The description for this Bundler::Thor::Group. If none is provided, but a source root exists, tries to …\n"],["destination_root","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-destination_root","()","<p>Returns the root for this thor class (also aliased as destination root).\n"],["destination_root=","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-destination_root-3D","(root)","<p>Sets the root for this thor class. Relatives path are added to the directory where the script was invoked …\n"],["detect_idle_timeout","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-c-detect_idle_timeout","(uri, max = 10)","<p>Use this method to detect the idle timeout of the host at <code>uri</code>.  The value returned can be used to configure …\n"],["diff","Bundler::RubyVersion","Bundler/RubyVersion.html#method-i-diff","(other)","<p>Returns a tuple of these things:\n\n<pre class=\"ruby\">[<span class=\"ruby-identifier\">diff</span>, <span class=\"ruby-identifier\">this</span>, <span class=\"ruby-identifier\">other</span>]\n<span class=\"ruby-constant\">The</span> <span class=\"ruby-identifier\">priority</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">attributes</span> <span class=\"ruby-identifier\">are</span>\n<span class=\"ruby-value\">1</span>. <span class=\"ruby-identifier\">engine</span>\n<span class=\"ruby-value\">2</span>. <span class=\"ruby-identifier\">ruby_version</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["difference","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-difference","(other)",""],["difference","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-difference","(other)",""],["different_sources?","Bundler::SourceList","Bundler/SourceList.html#method-i-different_sources-3F","(lock_sources, replacement_sources)",""],["digest","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-digest","(name)",""],["direct_requirements","Bundler::SourceMap","Bundler/SourceMap.html#method-i-direct_requirements","()",""],["directory","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-directory","(source, *args, &block)","<p>Copies recursively the files from source directory to root directory. If any of the files finishes with …\n"],["disable!","Bundler::FriendlyErrors","Bundler/FriendlyErrors.html#method-i-disable-21","()",""],["disable_required_check!","Bundler::Thor","Bundler/Thor.html#method-c-disable_required_check-21","(*command_names)","<p>Disable the check for required options for the given commands. This is useful if you have a command that …\n"],["disabled?","Bundler::FriendlyErrors","Bundler/FriendlyErrors.html#method-i-disabled-3F","()",""],["disjoint?","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-disjoint-3F","(other)",""],["dispatch","Bundler::CLI","Bundler/CLI.html#method-c-dispatch","(*)",""],["dn","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-dn","()","<p>Returns dn.\n"],["dn=","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-dn-3D","(val)","<p>Setter for dn <code>val</code>.\n"],["do_install","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-i-do_install","(spec_install, worker_num)",""],["doctor","Bundler::CLI","Bundler/CLI.html#method-i-doctor","()",""],["doctor","Bundler::CLI::Issue","Bundler/CLI/Issue.html#method-i-doctor","()",""],["double_check_for","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-double_check_for","(*)","<p>@private This API on source might not be stable, and for now we expect plugins to download all specs …\n"],["double_check_for","Bundler::Source","Bundler/Source.html#method-i-double_check_for","(*)","<p>it’s possible that gems from one source depend on gems from some other source, so now we download …\n"],["double_check_for","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-double_check_for","(unmet_dependency_names)",""],["double_check_for_index","Bundler::Source::RubygemsAggregate","Bundler/Source/RubygemsAggregate.html#method-i-double_check_for_index","(idx, dependency_names)","<p>Suppose the gem Foo depends on the gem Bar.  Foo exists in Source A.  Bar has some versions that exist …\n"],["download_cache_path","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-download_cache_path","(spec)","<p>Returns the global cache path of the calling Rubygems::Source object.\n<p>Note that the Source determines …\n"],["download_gem","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-download_gem","(spec, uri, cache_dir)",""],["download_gem","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-download_gem","(spec, download_cache_path, previous_spec = nil)","<p>Checks if the requested spec exists in the global cache. If it does, we copy it to the download path, …\n"],["downloader","Bundler::Fetcher","Bundler/Fetcher.html#method-i-downloader","()",""],["dump","Bundler::YAMLSerializer","Bundler/YAMLSerializer.html#method-i-dump","(hash)",""],["dump_hash","Bundler::YAMLSerializer","Bundler/YAMLSerializer.html#method-i-dump_hash","(hash)",""],["dup_with_replaced_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-dup_with_replaced_sources","(replacement_sources)",""],["dylibs","Bundler::CLI::Doctor","Bundler/CLI/Doctor.html#method-i-dylibs","(path)",""],["dylibs_darwin","Bundler::CLI::Doctor","Bundler/CLI/Doctor.html#method-i-dylibs_darwin","(path)",""],["dylibs_ldd","Bundler::CLI::Doctor","Bundler/CLI/Doctor.html#method-i-dylibs_ldd","(path)",""],["dynamic_width","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-dynamic_width","()","<p>Calculate the dynamic width of the terminal\n"],["dynamic_width_stty","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-dynamic_width_stty","()",""],["dynamic_width_tput","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-dynamic_width_tput","()",""],["each","Bundler::Index","Bundler/Index.html#method-i-each","(&blk)",""],["each","Bundler::Settings::Mirrors","Bundler/Settings/Mirrors.html#method-i-each","()",""],["each","Bundler::SpecSet","Bundler/SpecSet.html#method-i-each","(&b)",""],["each_strongly_connected_component","Bundler::TSort","Bundler/TSort.html#method-i-each_strongly_connected_component","()","<p>The iterator version of the #strongly_connected_components method. <code><em>obj</em>.each_strongly_connected_component</code> …\n"],["each_strongly_connected_component","Bundler::TSort","Bundler/TSort.html#method-c-each_strongly_connected_component","(each_node, each_child)","<p>The iterator version of the Bundler::TSort.strongly_connected_components method.\n<p>The graph is represented …\n"],["each_strongly_connected_component_from","Bundler::TSort","Bundler/TSort.html#method-i-each_strongly_connected_component_from","(node, id_map={}, stack=[])","<p>Iterates over strongly connected component in the subgraph reachable from <em>node</em>.\n<p>Return value is unspecified. …\n"],["each_strongly_connected_component_from","Bundler::TSort","Bundler/TSort.html#method-c-each_strongly_connected_component_from","(node, each_child, id_map={}, stack=[])","<p>Iterates over strongly connected components in a graph. The graph is represented by <em>node</em> and <em>each_child</em> …\n"],["earlier_version?","Bundler::Source","Bundler/Source.html#method-i-earlier_version-3F","(spec_version, locked_spec_version)",""],["echo?","Bundler::Thor::LineEditor::Basic","Bundler/Thor/LineEditor/Basic.html#method-i-echo-3F","()",""],["either_version_older_than_locked?","Bundler::GemVersionPromoter","Bundler/GemVersionPromoter.html#method-i-either_version_older_than_locked-3F","(a, b, locked_version)",""],["empty","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-c-empty","(package)",""],["empty","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-c-empty","()",""],["empty?","Bundler::ConnectionPool::TimedStack","Bundler/ConnectionPool/TimedStack.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no available connections.\n"],["empty?","Bundler::Index","Bundler/Index.html#method-i-empty-3F","()",""],["empty?","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-empty-3F","()",""],["empty?","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-empty-3F","()",""],["empty?","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-empty-3F","()",""],["empty?","Bundler::PubGrub::VersionRange::Empty","Bundler/PubGrub/VersionRange/Empty.html#method-i-empty-3F","()",""],["empty?","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-empty-3F","()",""],["empty?","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-empty-3F","()",""],["empty?","Bundler::SpecSet","Bundler/SpecSet.html#method-i-empty-3F","()",""],["empty_directory","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-empty_directory","(destination, config = {})","<p>Creates an empty directory.\n<p>Parameters\n<p>destination&lt;String&gt; &mdash; the relative path to the destination root. …\n"],["enable!","Bundler::FriendlyErrors","Bundler/FriendlyErrors.html#method-i-enable-21","()",""],["encode_uri_component","Bundler::URI","Bundler/URI.html#method-c-encode_uri_component","(str, enc=nil)","<p>Encodes <code>str</code> using URL encoding\n<p>This encodes SP to %20 instead of +.\n"],["encode_with","Gem::Dependency","Gem/Dependency.html#method-i-encode_with","(coder)",""],["encode_www_form","Bundler::URI","Bundler/URI.html#method-c-encode_www_form","(enum, enc=nil)","<p>Generates URL-encoded form data from given <code>enum</code>.\n<p>This generates application/x-www-form-urlencoded data …\n"],["encode_www_form_component","Bundler::URI","Bundler/URI.html#method-c-encode_www_form_component","(str, enc=nil)","<p>Encodes given <code>str</code> to URL-encoded form data.\n<p>This method doesn’t convert *, -, ., 0-9, A-Z, _, a-z, …\n"],["enq","Bundler::Worker","Bundler/Worker.html#method-i-enq","(obj)","<p>Enqueue a request to be executed in the worker pool\n<p>@param obj [String] mostly it is name of spec that …\n"],["enqueue_specs","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-i-enqueue_specs","()","<p>Keys in the remains hash represent uninstalled gems specs. We enqueue all gem specs that do not have …\n"],["enqueued?","Bundler::ParallelInstaller::SpecInstallation","Bundler/ParallelInstaller/SpecInstallation.html#method-i-enqueued-3F","()",""],["ensure_all_gems_in_lockfile!","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-ensure_all_gems_in_lockfile-21","(names, locked_gems = Bundler.locked_gems)",""],["ensure_equivalent_gemfile_and_lockfile","Bundler::Definition","Bundler/Definition.html#method-i-ensure_equivalent_gemfile_and_lockfile","(explicit_flag = false)",""],["ensure_safe_gem_name","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-ensure_safe_gem_name","(name, constant_array)",""],["ensure_same_dependencies","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-ensure_same_dependencies","(spec, old_deps, new_deps)",""],["ensure_specs_are_compatible!","Bundler::Installer","Bundler/Installer.html#method-i-ensure_specs_are_compatible-21","()",""],["enter","Bundler::Thor::NestedContext","Bundler/Thor/NestedContext.html#method-i-enter","()",""],["entered?","Bundler::Thor::NestedContext","Bundler/Thor/NestedContext.html#method-i-entered-3F","()",""],["env","Bundler::CLI","Bundler/CLI.html#method-i-env","()",""],["env","Bundler::Dsl","Bundler/Dsl.html#method-i-env","(name)",""],["env_to_hash","Bundler::EnvironmentPreserver","Bundler/EnvironmentPreserver.html#method-c-env_to_hash","(env)",""],["environment","Bundler","Bundler.html#method-c-environment","()",""],["environment","Bundler::Env","Bundler/Env.html#method-c-environment","()",""],["eql?","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-eql-3F","(other)",""],["eql?","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-eql-3F","(other)","<p>When overriding ‘eql?` please preserve the behaviour as mentioned in docstring for `==` method.\n"],["eql?","Bundler::PubGrub::Incompatibility","Bundler/PubGrub/Incompatibility.html#method-i-eql-3F","(other)",""],["eql?","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-eql-3F","(other)",""],["eql?","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-eql-3F","(other)",""],["eql?","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-eql-3F","(other)",""],["eql?","Bundler::PubGrub::VersionRange::Empty","Bundler/PubGrub/VersionRange/Empty.html#method-i-eql-3F","(other)",""],["eql?","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-eql-3F","(other)",""],["eql?","Bundler::Resolver::Candidate","Bundler/Resolver/Candidate.html#method-i-eql-3F","(other)",""],["eql?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-eql-3F","(other)",""],["eql?","Bundler::Source::Metadata","Bundler/Source/Metadata.html#method-i-eql-3F","(other)",""],["eql?","Bundler::Source::Path","Bundler/Source/Path.html#method-i-eql-3F","(other)",""],["eql?","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-eql-3F","(other)",""],["eql?","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-eql-3F","(oth)",""],["equivalent_source?","Bundler::SourceList","Bundler/SourceList.html#method-i-equivalent_source-3F","(source, other_source)",""],["equivalent_sources?","Bundler::SourceList","Bundler/SourceList.html#method-i-equivalent_sources-3F","(lock_sources, replacement_sources)",""],["error","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-error","(statement)","<p>Called if something goes wrong during the execution. This is used by Bundler::Thor internally and should …\n"],["error","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-error","(msg = nil, newline = nil, color = :red)",""],["error","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-error","(message = nil, newline = nil)",""],["error?","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-error-3F","()",""],["error?","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-error-3F","()",""],["escape","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-escape","(str)","<p>CGI::escape wrapper\n"],["escape","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-escape","(str, unsafe = @regexp[:UNSAFE])","<p>Args\n<p><code>str</code> &mdash; String to make safe\n<p><code>unsafe</code> &mdash; Regexp to apply. Defaults to <code>self.regexp[:UNSAFE]</code>\n"],["escape","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-escape","(str, unsafe = @regexp[:UNSAFE])","<p>Args\n<p><code>str</code> &mdash; String to make safe\n<p><code>unsafe</code> &mdash; Regexp to apply. Defaults to <code>self.regexp[:UNSAFE]</code>\n"],["escape_globs","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-escape_globs","(path)","<p>Returns a string that has had any glob characters escaped. The glob characters are ‘* ? { } [ ]`.\n<p>Examples …\n"],["escape_html","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-escape_html","(string)","<p>Returns a string that has had any HTML characters escaped.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Thor</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Util</span>.<span class=\"ruby-identifier\">escape_html</span>(<span class=\"ruby-string\">&#39;&lt;div&gt;&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["escape_userpass","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-escape_userpass","(v)","<p>Escapes ‘user:password’ <code>v</code> based on RFC 1738 section 3.1.\n"],["etag_for","Bundler::CompactIndexClient::Updater","Bundler/CompactIndexClient/Updater.html#method-i-etag_for","(path)",""],["eval_gemfile","Bundler::Dsl","Bundler/Dsl.html#method-i-eval_gemfile","(gemfile, contents = nil)",""],["eval_gemspec","Bundler","Bundler.html#method-c-eval_gemspec","(path, contents)",""],["eval_yaml_gemspec","Bundler","Bundler.html#method-c-eval_yaml_gemspec","(path, contents)",""],["evaluate","Bundler::Dsl","Bundler/Dsl.html#method-c-evaluate","(gemfile, lockfile, unlock)",""],["exact","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-c-exact","(package, version)",""],["exception_message","Bundler::FriendlyErrors","Bundler/FriendlyErrors.html#method-i-exception_message","(error)",""],["exec","Bundler::CLI","Bundler/CLI.html#method-i-exec","(*args)",""],["exec_command","Bundler::Plugin","Bundler/Plugin.html#method-i-exec_command","(command, args)","<p>To be called from Cli class to pass the command and argument to appropriate plugin class\n"],["executables","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-executables","()","<p>needed for binstubs\n"],["execution_mode","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-i-execution_mode","()","<p>@return [Lambda] A lambda that takes an array of inputs and a block, and\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">maps</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">inputs</span> <span class=\"ruby-identifier\">with</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">block</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["execution_mode=","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-i-execution_mode-3D","(block)",""],["exemplary_spec","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-exemplary_spec","()",""],["exit_on_failure?","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-exit_on_failure-3F","()","<p>A flag that makes the process exit with status 1 if any error happens.\n"],["exit_status","Bundler::FriendlyErrors","Bundler/FriendlyErrors.html#method-i-exit_status","(error)",""],["expand","Bundler::Source::Path","Bundler/Source/Path.html#method-i-expand","(somepath)",""],["expanded_dependencies","Bundler::Definition","Bundler/Definition.html#method-i-expanded_dependencies","()",""],["expanded_original_path","Bundler::Source::Path","Bundler/Source/Path.html#method-i-expanded_original_path","()",""],["expanded_path","Bundler::Source::Path","Bundler/Source/Path.html#method-i-expanded_path","()",""],["expanded_platforms","Bundler::Dependency","Bundler/Dependency.html#method-i-expanded_platforms","()",""],["expired?","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-expired-3F","(connection)","<p>Returns true if the connection should be reset due to an idle timeout, or maximum request count, false …\n"],["expired_sources?","Bundler::SourceList","Bundler/SourceList.html#method-i-expired_sources-3F","(replacement_sources)","<p>Returns true if there are changes\n"],["explanation","Bundler::PubGrub::SolveFailure","Bundler/PubGrub/SolveFailure.html#method-i-explanation","()",""],["explicit_scope?","Bundler::CLI::Config::Base","Bundler/CLI/Config/Base.html#method-i-explicit_scope-3F","()",""],["ext_lock","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-ext_lock","()",""],["extension_cache_path","Bundler::Source","Bundler/Source.html#method-i-extension_cache_path","(spec)",""],["extension_cache_slug","Bundler::Source","Bundler/Source.html#method-i-extension_cache_slug","(_)",""],["extension_cache_slug","Bundler::Source::Git","Bundler/Source/Git.html#method-i-extension_cache_slug","(_)",""],["extension_cache_slug","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-extension_cache_slug","(spec)",""],["extension_dir","Gem::Specification","Gem/Specification.html#method-i-extension_dir","()",""],["extension_dir_name","Bundler::Source::Git","Bundler/Source/Git.html#method-i-extension_dir_name","()",""],["extensions","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-extensions","()","<p>needed for “with native extensions” during install\n"],["extensions","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-extensions","()",""],["extensions","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-extensions","()","<p>Returns extensions.\n"],["extensions=","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-extensions-3D","(val)","<p>Setter for extensions <code>val</code>.\n"],["extensions_dir","Bundler::Standalone","Bundler/Standalone.html#method-i-extensions_dir","()",""],["extensions_dir","Gem::Specification","Gem/Specification.html#method-i-extensions_dir","()",""],["external_incompatibilities","Bundler::PubGrub::Incompatibility","Bundler/PubGrub/Incompatibility.html#method-i-external_incompatibilities","()","<p>Returns all external incompatibilities in this incompatibility’s derivation graph\n"],["extra_clone_args","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-extra_clone_args","()",""],["extra_fetch_args","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-extra_fetch_args","()",""],["extra_ref","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-extra_ref","()",""],["extract","Bundler::URI","Bundler/URI.html#method-c-extract","(str, schemes = nil, &block)","<p>Synopsis\n\n<pre>Bundler::URI::extract(str[, schemes][,&amp;blk])</pre>\n<p>Args\n"],["extract","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-extract","(str, schemes = nil)","<p>Args\n<p><code>str</code> &mdash; String to search\n<p><code>schemes</code> &mdash; Patterns to apply to <code>str</code>\n"],["extract","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-extract","(str, schemes = nil)","<p>Args\n<p><code>str</code> &mdash; String to search\n<p><code>schemes</code> &mdash; Patterns to apply to <code>str</code>\n"],["extract_circular_gems","Bundler::SpecSet","Bundler/SpecSet.html#method-i-extract_circular_gems","(error)",""],["fail!","Bundler::Settings::Validator::Rule","Bundler/Settings/Validator/Rule.html#method-i-fail-21","(key, value, *reasons)",""],["fail_attempt","Bundler::Retry","Bundler/Retry.html#method-i-fail_attempt","(e)",""],["failed?","Bundler::ParallelInstaller::SpecInstallation","Bundler/ParallelInstaller/SpecInstallation.html#method-i-failed-3F","()",""],["failed_specs","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-i-failed_specs","()",""],["failure?","Bundler::PubGrub::Incompatibility","Bundler/PubGrub/Incompatibility.html#method-i-failure-3F","()",""],["failure_message","Bundler::GemInstaller","Bundler/GemInstaller.html#method-i-failure_message","()",""],["fallback_timeout=","Bundler::Settings::Mirror","Bundler/Settings/Mirror.html#method-i-fallback_timeout-3D","(timeout)",""],["feature_flag","Bundler","Bundler.html#method-c-feature_flag","()",""],["fetch","Bundler::Fetcher::Downloader","Bundler/Fetcher/Downloader.html#method-i-fetch","(uri, headers = {}, counter = 0)",""],["fetch","Bundler::Source::Git","Bundler/Source/Git.html#method-i-fetch","()",""],["fetch_all_remote_specs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-fetch_all_remote_specs","(remote)",""],["fetch_connection","Bundler::ConnectionPool::TimedStack","Bundler/ConnectionPool/TimedStack.html#method-i-fetch_connection","(options = nil)","<p>This is an extension point for TimedStack and is called with a mutex.\n<p>This method must return a connection …\n"],["fetch_gem","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-fetch_gem","(spec, previous_spec = nil)",""],["fetch_gem_if_possible","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-fetch_gem_if_possible","(spec, previous_spec = nil)",""],["fetch_gemspec_files","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-fetch_gemspec_files","()","<p>This is used by the default ‘spec` method to constructs the Specification objects for the gems and versions …\n"],["fetch_latest_specs","Bundler::CLI::Show","Bundler/CLI/Show.html#method-i-fetch_latest_specs","()",""],["fetch_names","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-fetch_names","(fetchers, dependency_names, index, override_dupes)",""],["fetch_platform","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-fetch_platform","()",""],["fetch_platform","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-fetch_platform","()","<p>Needed before installs, since the arch matters then and quick specs don’t bother to include the arch …\n"],["fetch_spec","Bundler::Fetcher","Bundler/Fetcher.html#method-i-fetch_spec","(spec)","<p>fetch a gem specification\n"],["fetch_specs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-fetch_specs","(remote, name)",""],["fetch_uri","Bundler::Fetcher::Base","Bundler/Fetcher/Base.html#method-i-fetch_uri","()",""],["fetch_valid_mirror_for","Bundler::Settings::Mirrors","Bundler/Settings/Mirrors.html#method-i-fetch_valid_mirror_for","(uri)",""],["fetchers","Bundler::Fetcher","Bundler/Fetcher.html#method-i-fetchers","()",""],["fetchers","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-fetchers","()",""],["file_collision","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-file_collision","(destination)","<p>Deals with file collision and returns true if the file should be overwritten and false otherwise. If …\n"],["filesystem_access","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-filesystem_access","(path, action = :write, &block)","<p>Rescues permissions errors raised by file system operations (ie. Errno:EACCESS, Errno::EAGAIN) and raises …\n"],["filter","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-filter","()","<p>Returns filter.\n"],["filter=","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-filter-3D","(val)","<p>Setter for filter <code>val</code>.\n"],["filter_dep_specs","Bundler::GemVersionPromoter","Bundler/GemVersionPromoter.html#method-i-filter_dep_specs","(specs, package)",""],["filter_matching_specs","Bundler::Resolver","Bundler/Resolver.html#method-i-filter_matching_specs","(specs, requirements)",""],["filter_prereleases","Bundler::Resolver","Bundler/Resolver.html#method-i-filter_prereleases","(specs, package)",""],["filter_relevant","Bundler::Definition","Bundler/Definition.html#method-i-filter_relevant","(dependencies)",""],["filter_specs","Bundler::Definition","Bundler/Definition.html#method-i-filter_specs","(specs, deps)",""],["filter_uri","Bundler::HTTPError","Bundler/HTTPError.html#method-i-filter_uri","(uri)",""],["filtered_specs_by_groups","Bundler::CLI::List","Bundler/CLI/List.html#method-i-filtered_specs_by_groups","()",""],["find_bundler","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-find_bundler","(version)",""],["find_by_name_and_platform","Bundler::SpecSet","Bundler/SpecSet.html#method-i-find_by_name_and_platform","(name, platform)",""],["find_by_namespace","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-find_by_namespace","(namespace)","<p>Receives a namespace and search for it in the Bundler::Thor::Base subclasses.\n<p>Parameters\n<p>namespace&lt;String&gt; … &mdash; "],["find_class_and_command_by_namespace","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-find_class_and_command_by_namespace","(namespace, fallback = true)","<p>Receives a namespace and tries to retrieve a Bundler::Thor or Bundler::Thor::Group class from it. It …\n"],["find_class_and_task_by_namespace","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-find_class_and_task_by_namespace","(namespace, fallback = true)",""],["find_command_possibilities","Bundler::Thor","Bundler/Thor.html#method-c-find_command_possibilities","(meth)","<p>this is the logic that takes the command name passed in by the user and determines whether it is an unambiguous …\n"],["find_directory","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-find_directory","(*names)",""],["find_file","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-find_file","(*names)",""],["find_gemfile","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-find_gemfile","()",""],["find_in_source_paths","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-find_in_source_paths","(file)","<p>Receives a file or directory and search for it in the source paths.\n"],["find_latest_matching_spec","Bundler::SelfManager","Bundler/SelfManager.html#method-i-find_latest_matching_spec","(requirement)",""],["find_latest_matching_spec_from_collection","Bundler::SelfManager","Bundler/SelfManager.html#method-i-find_latest_matching_spec_from_collection","(specs, requirement)",""],["find_local_revision","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-find_local_revision","()",""],["find_name","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-find_name","(name)",""],["find_names_to_relax","Bundler::Resolver","Bundler/Resolver.html#method-i-find_names_to_relax","(incompatibility)",""],["find_proxy","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-find_proxy","(env=ENV)","<p>Returns a proxy Bundler::URI. The proxy Bundler::URI is obtained from environment variables such as  …\n"],["find_revision_for","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-find_revision_for","(reference)",""],["find_task_possibilities","Bundler::Thor","Bundler/Thor.html#method-c-find_task_possibilities","(meth)",""],["finish","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-finish","(connection)","<p>Finishes the Net::HTTP <code>connection</code>\n"],["finished_installing?","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-i-finished_installing-3F","()",""],["flag_deprecation","Bundler::CLI","Bundler/CLI.html#method-i-flag_deprecation","(name, flag_name, option)",""],["for","Bundler::Settings::Mirrors","Bundler/Settings/Mirrors.html#method-i-for","(uri)","<p>Returns a mirror for the given uri.\n<p>Depending on the uri having a valid mirror or not, it may be a\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">mirror</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["for","Bundler::SpecSet","Bundler/SpecSet.html#method-i-for","(dependencies, check = false, platforms = [nil])",""],["for","Bundler::URI","Bundler/URI.html#method-c-for","(scheme, *arguments, default: Generic)","<p>Construct a Bundler::URI instance, using the scheme to detect the appropriate class from <code>Bundler::URI.scheme_list</code> …\n"],["force_ruby_platform","Gem::Dependency","Gem/Dependency.html#method-i-force_ruby_platform","()",""],["force_ruby_platform?","Bundler::Resolver::Package","Bundler/Resolver/Package.html#method-i-force_ruby_platform-3F","()",""],["formatted_usage","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-formatted_usage","(klass, namespace = true, subcommand = false)","<p>Returns the formatted usage by injecting given required arguments and required options into the given …\n"],["formatted_usage","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-formatted_usage","(klass, namespace = true, subcommand = false)","<p>Returns the formatted usage by injecting given required arguments and required options into the given …\n"],["fragment=","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-fragment-3D","(v)","<p>Checks the fragment <code>v</code> component against the Bundler::URI::Parser Regexp for :FRAGMENT.\n<p>Args\n<p><code>v</code> &mdash; String\n"],["from_env","Bundler::EnvironmentPreserver","Bundler/EnvironmentPreserver.html#method-c-from_env","()",""],["from_lock","Bundler::Source::Git","Bundler/Source/Git.html#method-c-from_lock","(options)",""],["from_lock","Bundler::Source::Path","Bundler/Source/Path.html#method-c-from_lock","(options)",""],["from_lock","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-c-from_lock","(options)",""],["from_string","Bundler::RubyVersion","Bundler/RubyVersion.html#method-c-from_string","(string)","<p>Returns a RubyVersion from the given string. @param [String] the version string to match. @return [RubyVersion,Nil] …\n"],["from_stub","Bundler::StubSpecification","Bundler/StubSpecification.html#method-c-from_stub","(stub)",""],["from_superclass","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-from_superclass","(method, default = nil)","<p>Retrieves a value from superclass. If it reaches the baseclass, returns default.\n"],["frozen_bundle?","Bundler","Bundler.html#method-c-frozen_bundle-3F","()",""],["fu_blksize","Bundler::FileUtils::StreamUtils_","Bundler/FileUtils/StreamUtils_.html#method-i-fu_blksize","(st)",""],["fu_clean_components","Bundler::FileUtils","Bundler/FileUtils.html#method-i-fu_clean_components","(*comp)",""],["fu_default_blksize","Bundler::FileUtils::StreamUtils_","Bundler/FileUtils/StreamUtils_.html#method-i-fu_default_blksize","()",""],["fu_split_path","Bundler::FileUtils","Bundler/FileUtils.html#method-i-fu_split_path","(path)",""],["fu_starting_path?","Bundler::FileUtils","Bundler/FileUtils.html#method-i-fu_starting_path-3F","(path)",""],["fu_stream_blksize","Bundler::FileUtils::StreamUtils_","Bundler/FileUtils/StreamUtils_.html#method-i-fu_stream_blksize","(*streams)",""],["fu_windows?","Bundler::FileUtils::StreamUtils_","Bundler/FileUtils/StreamUtils_.html#method-i-fu_windows-3F","()",""],["full_clone?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-full_clone-3F","()",""],["full_gem_path","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-full_gem_path","()",""],["full_gem_path","Gem::Specification","Gem/Specification.html#method-i-full_gem_path","()",""],["full_gem_path=","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-full_gem_path-3D","(path)",""],["full_name","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-full_name","()",""],["full_name","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-full_name","()",""],["full_require_paths","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-full_require_paths","()",""],["full_version","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-full_version","()",""],["fully_qualified_ref","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-fully_qualified_ref","()",""],["fund","Bundler::CLI","Bundler/CLI.html#method-i-fund","()",""],["g","Bundler::Graph::GraphVizClient","Bundler/Graph/GraphVizClient.html#method-i-g","()",""],["gem","Bundler::CLI","Bundler/CLI.html#method-i-gem","(name)",""],["gem","Bundler::Dsl","Bundler/Dsl.html#method-i-gem","(name, *args)",""],["gem_bindir","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-gem_bindir","()",""],["gem_build_complete_path","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-gem_build_complete_path","()",""],["gem_cache","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-gem_cache","()",""],["gem_column_for","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-gem_column_for","(current_spec, active_spec, dependency, groups)",""],["gem_command","Bundler::GemHelper","Bundler/GemHelper.html#method-i-gem_command","()",""],["gem_dependencies","Bundler::CLI::Info","Bundler/CLI/Info.html#method-i-gem_dependencies","()",""],["gem_dir","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-gem_dir","()",""],["gem_dir","Gem::Specification","Gem/Specification.html#method-i-gem_dir","()",""],["gem_install_dir","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-gem_install_dir","()","<p>NOTE: Do not override if you don’t know what you are doing.\n"],["gem_key","Bundler::GemHelper","Bundler/GemHelper.html#method-i-gem_key","()",""],["gem_mirrors","Bundler::Settings","Bundler/Settings.html#method-i-gem_mirrors","()",""],["gem_not_found_message","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-gem_not_found_message","(missing_gem_name, alternatives)",""],["gem_path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-gem_path","()",""],["gem_path","Bundler::Standalone","Bundler/Standalone.html#method-i-gem_path","(path, spec)",""],["gem_platforms","Bundler::Dependency","Bundler/Dependency.html#method-i-gem_platforms","(valid_platforms)","<p>Returns the platforms this dependency is valid for, in the same order as passed in the ‘valid_platforms` …\n"],["gem_push?","Bundler::GemHelper","Bundler/GemHelper.html#method-i-gem_push-3F","()",""],["gem_push_host","Bundler::GemHelper","Bundler/GemHelper.html#method-i-gem_push_host","()",""],["gem_remote_fetcher","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-gem_remote_fetcher","()",""],["gem_version","Bundler","Bundler.html#method-c-gem_version","()",""],["gem_version_promoter","Bundler::Definition","Bundler/Definition.html#method-i-gem_version_promoter","()",""],["gemfile","Bundler::CLI::Init","Bundler/CLI/Init.html#method-i-gemfile","()",""],["gemfile","Object","Object.html#method-i-gemfile","(install = false, options = {}, &gemfile)","<p>Allows for declaring a Gemfile inline in a ruby script, optionally installing any gems that aren’t …\n"],["gemfile_install","Bundler::Plugin","Bundler/Plugin.html#method-i-gemfile_install","(gemfile = nil, &inline)","<p>Evaluates the Gemfile with a limited DSL and installs the plugins specified by plugin method\n<p>@param [Pathname] …\n"],["gemfile_names","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-gemfile_names","()",""],["gemfile_root","Bundler::Dsl","Bundler/Dsl.html#method-i-gemfile_root","()",""],["gems_installed_for","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-gems_installed_for","(definition)",""],["gemspec","Bundler::Dsl","Bundler/Dsl.html#method-i-gemspec","(opts = nil)",""],["gemspec","Bundler::GemHelper","Bundler/GemHelper.html#method-c-gemspec","(&block)",""],["gemspec_cached_path","Bundler::Fetcher","Bundler/Fetcher.html#method-i-gemspec_cached_path","(spec_file_name)","<p>cached gem specification path, if one exists\n"],["generate","Bundler::LockfileGenerator","Bundler/LockfileGenerator.html#method-c-generate","(definition)",""],["generate","Bundler::Standalone","Bundler/Standalone.html#method-i-generate","()",""],["generate!","Bundler::LockfileGenerator","Bundler/LockfileGenerator.html#method-i-generate-21","()",""],["generate_bin","Bundler::Plugin::Installer::Git","Bundler/Plugin/Installer/Git.html#method-i-generate_bin","(spec, disable_extensions = false)",""],["generate_bin","Bundler::Source::Path","Bundler/Source/Path.html#method-i-generate_bin","(spec, options = {})",""],["generate_bundler_executable_stubs","Bundler::Installer","Bundler/Installer.html#method-i-generate_bundler_executable_stubs","(spec, options = {})",""],["generate_executable_stubs","Bundler::GemInstaller","Bundler/GemInstaller.html#method-i-generate_executable_stubs","()",""],["generate_plugins","Bundler::RubyGemsGemInstaller","Bundler/RubyGemsGemInstaller.html#method-i-generate_plugins","()",""],["generate_split_buffer","Bundler::Digest","Bundler/Digest.html#method-c-generate_split_buffer","(string, &block)",""],["generate_standalone_bundler_executable_stubs","Bundler::Installer","Bundler/Installer.html#method-i-generate_standalone_bundler_executable_stubs","(spec, options = {})",""],["generic","Bundler::GemHelpers","Bundler/GemHelpers.html#method-i-generic","(p)",""],["generic","Bundler::GemHelpers","Bundler/GemHelpers.html#method-c-generic","(p)",""],["generic!","Bundler::Resolver::Candidate","Bundler/Resolver/Candidate.html#method-i-generic-21","()",""],["generic_local_platform","Bundler::GemHelpers","Bundler/GemHelpers.html#method-i-generic_local_platform","()",""],["generic_local_platform","Bundler::GemHelpers","Bundler/GemHelpers.html#method-c-generic_local_platform","()",""],["get","Bundler::CLI::Config","Bundler/CLI/Config.html#method-i-get","(name)",""],["get","Bundler::SourceList","Bundler/SourceList.html#method-i-get","(source)",""],["get","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-get","(source, *args, &block)","<p>Gets the content at the given address and places it at the given relative destination. If a block is …\n"],["get_console","Bundler::CLI::Console","Bundler/CLI/Console.html#method-i-get_console","(name)",""],["get_constant","Bundler::CLI::Console","Bundler/CLI/Console.html#method-i-get_constant","(name)",""],["get_formatted_specs_and_deps","Bundler::Fetcher::Dependency","Bundler/Fetcher/Dependency.html#method-i-get_formatted_specs_and_deps","(gem_list)",""],["get_input","Bundler::Thor::LineEditor::Basic","Bundler/Thor/LineEditor/Basic.html#method-i-get_input","()",""],["get_package","Bundler::Resolver::Base","Bundler/Resolver/Base.html#method-i-get_package","(name)",""],["get_version_semver_portion_value","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-get_version_semver_portion_value","(spec, version_portion_index)",""],["getwd","Bundler::FileUtils","Bundler/FileUtils.html#method-i-getwd","()",""],["getwd","Bundler::FileUtils","Bundler/FileUtils.html#method-c-getwd","()",""],["git","Bundler::Dsl","Bundler/Dsl.html#method-i-git","(uri, options = {}, &blk)",""],["git","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-git","(*command, dir: nil)",""],["git_commit_sha","Bundler::BuildMetadata","Bundler/BuildMetadata.html#method-c-git_commit_sha","()","<p>The SHA for the git commit the bundler gem was built from.\n"],["git_local","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-git_local","(*command, dir: nil)",""],["git_null","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-git_null","(*command, dir: nil)",""],["git_present?","Bundler","Bundler.html#method-c-git_present-3F","()",""],["git_proxy","Bundler::Source::Git","Bundler/Source/Git.html#method-i-git_proxy","()",""],["git_push","Bundler::GemHelper","Bundler/GemHelper.html#method-i-git_push","(remote = nil)",""],["git_remote_fetch","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-git_remote_fetch","(args)",""],["git_retry","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-git_retry","(*command, dir: nil)",""],["git_scope","Bundler::Source::Git","Bundler/Source/Git.html#method-i-git_scope","()",""],["git_source","Bundler::Dsl","Bundler/Dsl.html#method-i-git_source","(name, &block)",""],["git_version","Bundler::Env","Bundler/Env.html#method-c-git_version","()",""],["git_version","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-git_version","()",""],["git_version","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-git_version","()",""],["git_version","Gem::Specification","Gem/Specification.html#method-i-git_version","()",""],["github","Bundler::Dsl","Bundler/Dsl.html#method-i-github","(repo, options = {})",""],["glob_files_in_dir","Gem","Gem.html#method-i-glob_files_in_dir","(glob, base_path)",""],["glob_for_display","Bundler::Source::Git","Bundler/Source/Git.html#method-i-glob_for_display","()",""],["glob_pattern","Bundler::Thor::LineEditor::Readline::PathCompletion","Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-i-glob_pattern","()",""],["global_config_file","Bundler::Settings","Bundler/Settings.html#method-i-global_config_file","()",""],["global_index_file","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-global_index_file","()","<p>Path where the global index file is stored\n"],["global_replacement_source","Bundler::SourceList","Bundler/SourceList.html#method-i-global_replacement_source","(replacement_sources)",""],["global_root","Bundler::Plugin","Bundler/Plugin.html#method-i-global_root","()","<p>The global directory root for all plugin related data\n"],["global_rubygems_source","Bundler::SourceList","Bundler/SourceList.html#method-i-global_rubygems_source","()",""],["globs_for","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-globs_for","(path)","<p>Where to look for Bundler::Thor files.\n"],["group","Bundler::Dsl","Bundler/Dsl.html#method-i-group","(*args, &blk)",""],["group","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-group","(name = nil)","<p>Defines the group. This is used when thor list is invoked so you can specify that only commands from …\n"],["groups","Bundler::Definition","Bundler/Definition.html#method-i-groups","()",""],["groups","Gem::Specification","Gem/Specification.html#method-i-groups","()",""],["groups_text","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-groups_text","(group_text, groups)",""],["gsub_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-gsub_file","(path, flag, *args, &block)","<p>Run a regular expression replacement on a file.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; path of the file to be changed …\n"],["guard_clean","Bundler::GemHelper","Bundler/GemHelper.html#method-i-guard_clean","()",""],["handle_argument_error?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-handle_argument_error-3F","(instance, error, caller)",""],["handle_argument_error?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-handle_argument_error-3F","(instance, error, caller)",""],["handle_error","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-i-handle_error","()",""],["handle_no_command_error","Bundler::CLI","Bundler/CLI.html#method-c-handle_no_command_error","(command, has_namespace = $thor_runner)",""],["handle_no_method_error?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-handle_no_method_error-3F","(instance, error, caller)",""],["handle_no_method_error?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-handle_no_method_error-3F","(instance, error, caller)",""],["has_app_cache?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-has_app_cache-3F","()",""],["has_app_cache?","Bundler::Source::Path","Bundler/Source/Path.html#method-i-has_app_cache-3F","()",""],["has_post_install_message?","Bundler::ParallelInstaller::SpecInstallation","Bundler/ParallelInstaller/SpecInstallation.html#method-i-has_post_install_message-3F","()",""],["has_revision_cached?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-has_revision_cached-3F","()",""],["hash","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-hash","()",""],["hash","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-hash","()","<p>When overriding ‘hash` please preserve the behaviour as mentioned in docstring for `==` method, i.e. …\n"],["hash","Bundler::PubGrub::Incompatibility","Bundler/PubGrub/Incompatibility.html#method-i-hash","()",""],["hash","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-hash","()",""],["hash","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-hash","()",""],["hash","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-hash","()",""],["hash","Bundler::PubGrub::VersionRange::Empty","Bundler/PubGrub/VersionRange/Empty.html#method-i-hash","()",""],["hash","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-hash","()",""],["hash","Bundler::Resolver::Candidate","Bundler/Resolver/Candidate.html#method-i-hash","()",""],["hash","Bundler::Resolver::Package","Bundler/Resolver/Package.html#method-i-hash","()",""],["hash","Bundler::Source::Git","Bundler/Source/Git.html#method-i-hash","()",""],["hash","Bundler::Source::Metadata","Bundler/Source/Metadata.html#method-i-hash","()",""],["hash","Bundler::Source::Path","Bundler/Source/Path.html#method-i-hash","()",""],["hash","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-hash","()",""],["hash","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-hash","()",""],["hash","Gem::Requirement::CorrectHashForLambdaOperator","Gem/Requirement/CorrectHashForLambdaOperator.html#method-i-hash","()",""],["have_option?","Bundler::FileUtils","Bundler/FileUtils.html#method-c-have_option-3F","(mid, opt)","<p>Returns <code>true</code> if method <code>mid</code> accepts the given option <code>opt</code>, <code>false</code> otherwise; the arguments may be strings …\n"],["head_revision","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-head_revision","()",""],["headers=","Bundler::URI::MailTo","Bundler/URI/MailTo.html#method-i-headers-3D","(v)","<p>Setter for headers <code>v</code>.\n"],["help","Bundler::CLI","Bundler/CLI.html#method-i-help","(cli = nil)",""],["help","Bundler::Thor","Bundler/Thor.html#method-c-help","(shell, subcommand = false)","<p>Prints help information for this class.\n<p>Parameters\n<p>shell&lt;Bundler::Thor::Shell&gt;\n"],["help","Bundler::Thor","Bundler/Thor.html#method-i-help","(command = nil, subcommand = false)",""],["help","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-help","(shell)","<p>Prints help information.\n<p>Options\n<p>short &mdash; When true, shows only usage.\n"],["hexdigest!","Bundler::RubyGemsGemInstaller","Bundler/RubyGemsGemInstaller.html#method-i-hexdigest-21","(digest)",""],["hidden?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-hidden-3F","()",""],["hidden?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-hidden-3F","()",""],["hidden?","Bundler::Thor::HiddenCommand","Bundler/Thor/HiddenCommand.html#method-i-hidden-3F","()",""],["hidden?","Bundler::Thor::HiddenCommand","Bundler/Thor/HiddenCommand.html#method-i-hidden-3F","()",""],["hierarchical?","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-hierarchical-3F","()","<p>Returns true if Bundler::URI is hierarchical.\n<p>Description\n<p>Bundler::URI has components listed in order of …\n"],["hierarchical?","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-hierarchical-3F","()","<p>Checks if Bundler::URI has a path. For Bundler::URI::LDAP this will return <code>false</code>.\n"],["hint_text","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-hint_text","(setting)",""],["home","Bundler","Bundler.html#method-c-home","()",""],["hook","Bundler::Plugin","Bundler/Plugin.html#method-i-hook","(event, *args, &arg_blk)","<p>Runs all the hooks that are registered for the passed event\n<p>It passes the passed arguments and block to …\n"],["hook","Bundler::Plugin::API","Bundler/Plugin/API.html#method-c-hook","(event, &block)",""],["hook_plugins","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-hook_plugins","(event)","<p>Returns the list of plugin names handling the passed event\n"],["host","Bundler::RubyVersion","Bundler/RubyVersion.html#method-i-host","()",""],["host=","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-host-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["hostname","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-hostname","()","<p>Extract the host part of the Bundler::URI and unwrap brackets for IPv6 addresses.\n<p>This method is the same …\n"],["hostname=","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-hostname-3D","(v)","<p>Sets the host part of the Bundler::URI as the argument with brackets for IPv6 addresses.\n<p>This method is …\n"],["http_proxy","Bundler::Fetcher","Bundler/Fetcher.html#method-i-http_proxy","()",""],["http_version","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-http_version","(uri)","<p>Returns the HTTP protocol version for <code>uri</code>\n"],["humanized_ref","Bundler::Source::Git","Bundler/Source/Git.html#method-i-humanized_ref","()",""],["identical?","Bundler::FileUtils","Bundler/FileUtils.html#method-i-identical-3F","(a, b)",""],["identical?","Bundler::FileUtils","Bundler/FileUtils.html#method-c-identical-3F","(a, b)",""],["identifier","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-identifier","()",""],["identifier","Bundler::Source","Bundler/Source.html#method-i-identifier","()",""],["identifier","Bundler::Source::Git","Bundler/Source/Git.html#method-i-identifier","()",""],["identifier","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-identifier","()",""],["identifier","Bundler::Source::RubygemsAggregate","Bundler/Source/RubygemsAggregate.html#method-i-identifier","()",""],["ignorable_dependency?","Bundler::ParallelInstaller::SpecInstallation","Bundler/ParallelInstaller/SpecInstallation.html#method-i-ignorable_dependency-3F","(dep)",""],["ignore_config?","Bundler::Settings","Bundler/Settings.html#method-i-ignore_config-3F","()",""],["ignores_prereleases?","Bundler::Resolver::Package","Bundler/Resolver/Package.html#method-i-ignores_prereleases-3F","()",""],["implicit_global_source?","Bundler::SourceList","Bundler/SourceList.html#method-i-implicit_global_source-3F","()",""],["implicit_global_source_warning","Bundler::Dsl","Bundler/Dsl.html#method-i-implicit_global_source_warning","()",""],["in_bundle?","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-in_bundle-3F","()",""],["in_root","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-in_root","()","<p>Goes to the root and execute the given block.\n"],["include?","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-include-3F","(other)","<p>NOTE: Do not override if you don’t know what you are doing.\n"],["include?","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-include-3F","(version)",""],["include?","Bundler::PubGrub::VersionRange::Empty","Bundler/PubGrub/VersionRange/Empty.html#method-i-include-3F","(_)",""],["include?","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-include-3F","(version)",""],["include?","Bundler::Source","Bundler/Source.html#method-i-include-3F","(other)",""],["include?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-include-3F","(other)",""],["include?","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-include-3F","(o)",""],["include_prereleases","Bundler::Resolver::Base","Bundler/Resolver/Base.html#method-i-include_prereleases","(names)",""],["included","Bundler::Thor::RakeCompat","Bundler/Thor/RakeCompat.html#method-c-included","(base)",""],["incompatibilities_for","Bundler::PubGrub::BasicPackageSource","Bundler/PubGrub/BasicPackageSource.html#method-i-incompatibilities_for","(package, version)",""],["incompatibilities_for","Bundler::Resolver","Bundler/Resolver.html#method-i-incompatibilities_for","(package, version)",""],["incomplete_ruby_specs?","Bundler::SpecSet","Bundler/SpecSet.html#method-i-incomplete_ruby_specs-3F","(deps)",""],["indent","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-indent","(count = 1)","<p>Sets the output padding while executing a block and resets it.\n"],["index","Bundler::Plugin","Bundler/Plugin.html#method-i-index","()","<p>The index object used to store the details about the plugin\n"],["index_file","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-index_file","()","<p>Path of default index file\n"],["indirect_pins","Bundler::Resolver::Base","Bundler/Resolver/Base.html#method-i-indirect_pins","(names)",""],["inflate","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-inflate","(obj)",""],["info","Bundler::CLI","Bundler/CLI.html#method-i-info","(gem_name)",""],["info","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-info","(msg = nil, newline = nil)",""],["info","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-info","(message = nil, newline = nil)",""],["info?","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-info-3F","()",""],["info?","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-info-3F","()",""],["info_path","Bundler::CompactIndexClient::Cache","Bundler/CompactIndexClient/Cache.html#method-i-info_path","(name)",""],["info_roots","Bundler::CompactIndexClient::Cache","Bundler/CompactIndexClient/Cache.html#method-i-info_roots","()",""],["inherited","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-inherited","(klass)","<p>Everytime someone inherits from a Bundler::Thor class, register the klass and file into baseclass.\n"],["init","Bundler::CLI","Bundler/CLI.html#method-i-init","()",""],["initialize_copy","Bundler::Index","Bundler/Index.html#method-i-initialize_copy","(o)",""],["initialize_pattern","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-initialize_pattern","(opts = {})","<p>Constructs the default Hash of patterns.\n"],["initialize_pattern","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-initialize_pattern","(opts = {})","<p>Constructs the default Hash of patterns.\n"],["initialize_regexp","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-initialize_regexp","(pattern)","<p>Constructs the default Hash of Regexp’s.\n"],["initialize_regexp","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-initialize_regexp","(pattern)","<p>Constructs the default Hash of Regexp’s.\n"],["inject","Bundler::CLI","Bundler/CLI.html#method-i-inject","(name, version)",""],["inject","Bundler::Injector","Bundler/Injector.html#method-c-inject","(new_deps, options = {})",""],["inject","Bundler::Injector","Bundler/Injector.html#method-i-inject","(gemfile_path, lockfile_path)","<p>@param [Pathname] gemfile_path The Gemfile in which to inject the new dependency. @param [Pathname]  …\n"],["inject_dependencies","Bundler::CLI::Add","Bundler/CLI/Add.html#method-i-inject_dependencies","()",""],["inject_into_class","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-inject_into_class","(path, klass, *args, &block)","<p>Injects text right after the class definition. Since it depends on insert_into_file, it’s reversible. …\n"],["inject_into_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-inject_into_file","(destination, *args, &block)",""],["inject_into_module","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-inject_into_module","(path, module_name, *args, &block)","<p>Injects text right after the module definition. Since it depends on insert_into_file, it’s reversible. …\n"],["insert_into_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-insert_into_file","(destination, *args, &block)",""],["inside","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-inside","(dir = \"\", config = {}, &block)","<p>Do something in the root or on a provided subfolder. If a relative path is given it’s referenced …\n"],["inside_app?","Bundler::CLI::Config::Base","Bundler/CLI/Config/Base.html#method-i-inside_app-3F","()",""],["inspect","Bundler::Fetcher","Bundler/Fetcher.html#method-i-inspect","()",""],["inspect","Bundler::Index","Bundler/Index.html#method-i-inspect","()",""],["inspect","Bundler::PubGrub::Incompatibility","Bundler/PubGrub/Incompatibility.html#method-i-inspect","()",""],["inspect","Bundler::PubGrub::Package","Bundler/PubGrub/Package.html#method-i-inspect","()",""],["inspect","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-inspect","()",""],["inspect","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-inspect","()",""],["inspect","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-inspect","()",""],["inspect","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-inspect","()",""],["inspect","Bundler::Source","Bundler/Source.html#method-i-inspect","()",""],["inspect","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-inspect","()",""],["inspect","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-inspect","()",""],["inspect","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-inspect","()",""],["install","Bundler::CLI","Bundler/CLI.html#method-i-install","()",""],["install","Bundler::CLI::Cache","Bundler/CLI/Cache.html#method-i-install","()",""],["install","Bundler::CLI::Plugin","Bundler/CLI/Plugin.html#method-i-install","(*plugins)",""],["install","Bundler::FileUtils","Bundler/FileUtils.html#method-i-install","(src, dest, mode: nil, owner: nil, group: nil, preserve: nil, noop: nil, verbose: nil)","<p>Copies a file entry. See install(1).\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single …\n"],["install","Bundler::FileUtils","Bundler/FileUtils.html#method-c-install","(src, dest, mode: nil, owner: nil, group: nil, preserve: nil, noop: nil, verbose: nil)","<p>Copies a file entry. See install(1).\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single …\n"],["install","Bundler::GemHelper","Bundler/GemHelper.html#method-i-install","()",""],["install","Bundler::GemInstaller","Bundler/GemInstaller.html#method-i-install","()",""],["install","Bundler::Installer","Bundler/Installer.html#method-c-install","(root, definition, options = {})","<p>Begins the installation process for Bundler. For more information see the #run method on this class. …\n"],["install","Bundler::Installer","Bundler/Installer.html#method-i-install","(options)","<p>the order that the resolver provides is significant, since dependencies might affect the installation …\n"],["install","Bundler::Plugin","Bundler/Plugin.html#method-i-install","(names, options)","<p>Installs a new plugin by the given name\n<p>@param [Array&lt;String&gt;] names the name of plugin to be installed …\n"],["install","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-install","(spec, opts)","<p>Install the gem specified by the spec at appropriate path. ‘install_path` provides a sufficient default, …\n"],["install","Bundler::Plugin::Installer","Bundler/Plugin/Installer.html#method-i-install","(names, options)",""],["install","Bundler::RubyGemsGemInstaller","Bundler/RubyGemsGemInstaller.html#method-i-install","()",""],["install","Bundler::SelfManager","Bundler/SelfManager.html#method-i-install","(spec)",""],["install","Bundler::Source::Git","Bundler/Source/Git.html#method-i-install","(spec, options = {})",""],["install","Bundler::Source::Metadata","Bundler/Source/Metadata.html#method-i-install","(spec, _opts = {})",""],["install","Bundler::Source::Path","Bundler/Source/Path.html#method-i-install","(spec, options = {})",""],["install","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-install","(spec, options = {})",""],["install_all_sources","Bundler::Plugin::Installer","Bundler/Plugin/Installer.html#method-i-install_all_sources","(names, version, git_source_options, rubygems_source)",""],["install_and_restart_with","Bundler::SelfManager","Bundler/SelfManager.html#method-i-install_and_restart_with","(version)",""],["install_definition","Bundler::Plugin::Installer","Bundler/Plugin/Installer.html#method-i-install_definition","(definition)","<p>Installs the plugin from Definition object created by limited parsing of Gemfile searching for plugins …\n"],["install_error_message","Bundler::GemInstaller","Bundler/GemInstaller.html#method-i-install_error_message","()",""],["install_from_spec","Bundler::GemInstaller","Bundler/GemInstaller.html#method-i-install_from_spec","()",""],["install_from_specs","Bundler::Plugin::Installer","Bundler/Plugin/Installer.html#method-i-install_from_specs","(specs)","<p>Installs the plugins and deps from the provided specs and returns map of gems to their paths\n<p>@param specs …\n"],["install_gem","Bundler::GemHelper","Bundler/GemHelper.html#method-i-install_gem","(built_gem_path = nil, local = false)",""],["install_git","Bundler::Plugin::Installer","Bundler/Plugin/Installer.html#method-i-install_git","(names, version, options)",""],["install_if","Bundler::Dsl","Bundler/Dsl.html#method-i-install_if","(*args)",""],["install_in_parallel","Bundler::Installer","Bundler/Installer.html#method-i-install_in_parallel","(size, standalone, force = false)",""],["install_local_git","Bundler::Plugin::Installer","Bundler/Plugin/Installer.html#method-i-install_local_git","(names, version, options)",""],["install_locked_bundler_and_restart_with_it_if_needed","Bundler::SelfManager","Bundler/SelfManager.html#method-i-install_locked_bundler_and_restart_with_it_if_needed","()",""],["install_path","Bundler","Bundler.html#method-c-install_path","()",""],["install_path","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-install_path","()","<p>A default installation path to install a single gem. If the source servers multiple gems, it’s not …\n"],["install_path","Bundler::Plugin::Installer::Git","Bundler/Plugin/Installer/Git.html#method-i-install_path","()",""],["install_path","Bundler::Source::Git","Bundler/Source/Git.html#method-i-install_path","()","<p>This is the path which is going to contain a specific checkout of the git repository. When using local …\n"],["install_rubygems","Bundler::Plugin::Installer","Bundler/Plugin/Installer.html#method-i-install_rubygems","(names, version, sources)","<p>Installs the plugin from rubygems source and returns the path where the plugin was installed\n<p>@param [String] …\n"],["install_serially","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-i-install_serially","()",""],["install_tasks","Bundler::GemHelper","Bundler/GemHelper.html#method-c-install_tasks","(opts = {})",""],["install_with_worker","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-i-install_with_worker","()",""],["installation_parallelization","Bundler::Installer","Bundler/Installer.html#method-i-installation_parallelization","(options)",""],["installed?","Bundler::ParallelInstaller::SpecInstallation","Bundler/ParallelInstaller/SpecInstallation.html#method-i-installed-3F","()",""],["installed?","Bundler::Plugin","Bundler/Plugin.html#method-i-installed-3F","(plugin)","<p>currently only intended for specs\n<p>@return [String, nil] installed path\n"],["installed?","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-installed-3F","()","<p>A helper method, not necessary if not used internally.\n"],["installed?","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-installed-3F","(name)",""],["installed?","Bundler::SelfManager","Bundler/SelfManager.html#method-i-installed-3F","()",""],["installed?","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-installed-3F","(spec)",""],["installed_plugins","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-installed_plugins","()",""],["installed_specs","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-installed_specs","()",""],["intersect","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-intersect","(other)",""],["intersect","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-intersect","(other)",""],["intersect","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-intersect","(other)",""],["intersect","Bundler::PubGrub::VersionRange::Empty","Bundler/PubGrub/VersionRange/Empty.html#method-i-intersect","(other)",""],["intersect","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-intersect","(other)",""],["intersects?","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-intersects-3F","(other)",""],["intersects?","Bundler::PubGrub::VersionRange::Empty","Bundler/PubGrub/VersionRange/Empty.html#method-i-intersects-3F","(_)",""],["intersects?","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-intersects-3F","(other)",""],["inverse","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-inverse","()",""],["invert","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-invert","()",""],["invert","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-invert","()",""],["invert","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-invert","()",""],["invert","Bundler::PubGrub::VersionRange::Empty","Bundler/PubGrub/VersionRange/Empty.html#method-i-invert","()",""],["invert","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-invert","()",""],["invoke","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-invoke","(*names, &block)","<p>Invoke the given namespace or class given. It adds an instance method that will invoke the klass and …\n"],["invoke","Bundler::Thor::Invocation","Bundler/Thor/Invocation.html#method-i-invoke","(name = nil, *args)","<p>Receives a name and invokes it. The name can be a string (either “command” or “namespace:command”), …\n"],["invoke_from_option","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-invoke_from_option","(*names, &block)","<p>Invoke a thor class based on the value supplied by the user to the given option named “name”. …\n"],["invoke_with_padding","Bundler::Thor::Invocation","Bundler/Thor/Invocation.html#method-i-invoke_with_padding","(*args)","<p>Invokes using shell padding.\n"],["is_array","Bundler::Settings","Bundler/Settings.html#method-i-is_array","(key)",""],["is_bool","Bundler::Settings","Bundler/Settings.html#method-i-is_bool","(name)",""],["is_credential","Bundler::Settings","Bundler/Settings.html#method-i-is_credential","(key)",""],["is_not_within_comment?","Bundler::Injector","Bundler/Injector.html#method-i-is_not_within_comment-3F","(line, match_data)","<p>@param [String] line          Individual line of gemfile content. @param [MatchData] match_data Data …\n"],["is_num","Bundler::Settings","Bundler/Settings.html#method-i-is_num","(key)",""],["is_string","Bundler::Settings","Bundler/Settings.html#method-i-is_string","(name)",""],["is_userinfo","Bundler::Settings","Bundler/Settings.html#method-i-is_userinfo","(value)",""],["issue","Bundler::CLI","Bundler/CLI.html#method-i-issue","()",""],["issues_url","Bundler::FriendlyErrors","Bundler/FriendlyErrors.html#method-i-issues_url","(exception)",""],["join","Bundler::URI","Bundler/URI.html#method-c-join","(*str)","<p>Synopsis\n\n<pre>Bundler::URI::join(str[, str, ...])</pre>\n<p>Args\n"],["join","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-join","(*uris)","<p>Args\n<p><code>uris</code> &mdash; an Array of Strings\n\n<p>Description\n"],["join","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-join","(*uris)","<p>Args\n<p><code>uris</code> &mdash; an Array of Strings\n\n<p>Description\n"],["jruby?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-jruby-3F","()",""],["justify","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-justify","(row, sizes)",""],["k","Bundler::Settings::Validator::Rule","Bundler/Settings/Validator/Rule.html#method-i-k","(key)",""],["keep_trying?","Bundler::Retry","Bundler/Retry.html#method-i-keep_trying-3F","()",""],["kernel_exec","Bundler::CLI::Exec","Bundler/CLI/Exec.html#method-i-kernel_exec","(*args)",""],["kernel_load","Bundler::CLI::Exec","Bundler/CLI/Exec.html#method-i-kernel_load","(file, *args)",""],["key=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-key-3D","(key)","<p>For Net::HTTP parity\n"],["key_for","Bundler::Settings","Bundler/Settings.html#method-i-key_for","(key)",""],["key_for","Bundler::Settings","Bundler/Settings.html#method-c-key_for","(key)",""],["last_attempt?","Bundler::Retry","Bundler/Retry.html#method-i-last_attempt-3F","()",""],["last_version_number","Bundler::CLI::Inject","Bundler/CLI/Inject.html#method-i-last_version_number","()",""],["ldd_available?","Bundler::CLI::Doctor","Bundler/CLI/Doctor.html#method-i-ldd_available-3F","()",""],["length","Bundler::ConnectionPool::TimedStack","Bundler/ConnectionPool/TimedStack.html#method-i-length","()","<p>The number of connections available on the stack.\n"],["length","Bundler::SpecSet","Bundler/SpecSet.html#method-i-length","()",""],["level","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-level","(name = nil)",""],["level","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-level","(name = nil)",""],["level=","Bundler::GemVersionPromoter","Bundler/GemVersionPromoter.html#method-i-level-3D","(value)","<p>@param value [Symbol] One of three Symbols: :major, :minor or :patch.\n"],["level=","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-level-3D","(level)",""],["level=","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-level-3D","(name)",""],["levenshtein_distance","Bundler::SimilarityDetector","Bundler/SimilarityDetector.html#method-i-levenshtein_distance","(this, that, ins = 2, del = 2, sub = 1)","<p>www.informit.com/articles/article.aspx?p=683059&seqNum=36\n"],["licenses","Bundler::CLI","Bundler/CLI.html#method-i-licenses","()",""],["lines","Bundler::CompactIndexClient::Cache","Bundler/CompactIndexClient/Cache.html#method-i-lines","(path)",""],["link","Bundler::FileUtils","Bundler/FileUtils.html#method-i-link","(src, dest, force: nil, noop: nil, verbose: nil)",""],["link","Bundler::FileUtils","Bundler/FileUtils.html#method-c-link","(src, dest, force: nil, noop: nil, verbose: nil)",""],["link_entry","Bundler::FileUtils","Bundler/FileUtils.html#method-i-link_entry","(src, dest, dereference_root = false, remove_destination = false)","<p>Creates hard links; returns <code>nil</code>.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable as paths.\n<p>If <code>src</code> is the …\n"],["link_entry","Bundler::FileUtils","Bundler/FileUtils.html#method-c-link_entry","(src, dest, dereference_root = false, remove_destination = false)","<p>Creates hard links; returns <code>nil</code>.\n<p>Arguments <code>src</code> and <code>dest</code> should be interpretable as paths.\n<p>If <code>src</code> is the …\n"],["link_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-link_file","(source, *args)","<p>Links the file from the relative source to the relative destination. If the destination is not given …\n"],["list","Bundler::CLI","Bundler/CLI.html#method-i-list","()",""],["list","Bundler::CLI::Config","Bundler/CLI/Config.html#method-i-list","()",""],["list","Bundler::CLI::Plugin","Bundler/CLI/Plugin.html#method-i-list","()",""],["list","Bundler::Plugin","Bundler/Plugin.html#method-i-list","()","<p>List installed plugins and commands\n"],["ln","Bundler::FileUtils","Bundler/FileUtils.html#method-i-ln","(src, dest, force: nil, noop: nil, verbose: nil)","<p>Creates hard links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["ln","Bundler::FileUtils","Bundler/FileUtils.html#method-c-ln","(src, dest, force: nil, noop: nil, verbose: nil)","<p>Creates hard links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["ln_s","Bundler::FileUtils","Bundler/FileUtils.html#method-i-ln_s","(src, dest, force: nil, relative: false, target_directory: true, noop: nil, verbose: nil)","<p>Creates symbolic links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["ln_s","Bundler::FileUtils","Bundler/FileUtils.html#method-c-ln_s","(src, dest, force: nil, relative: false, target_directory: true, noop: nil, verbose: nil)","<p>Creates symbolic links.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should …\n"],["ln_sf","Bundler::FileUtils","Bundler/FileUtils.html#method-i-ln_sf","(src, dest, noop: nil, verbose: nil)","<p>Like Bundler::FileUtils.ln_s, but always with keyword argument <code>force: true</code> given.\n"],["ln_sf","Bundler::FileUtils","Bundler/FileUtils.html#method-c-ln_sf","(src, dest, noop: nil, verbose: nil)","<p>Like Bundler::FileUtils.ln_s, but always with keyword argument <code>force: true</code> given.\n"],["ln_sr","Bundler::FileUtils","Bundler/FileUtils.html#method-i-ln_sr","(src, dest, target_directory: true, force: nil, noop: nil, verbose: nil)","<p>Like Bundler::FileUtils.ln_s, but create links relative to <code>dest</code>.\n"],["ln_sr","Bundler::FileUtils","Bundler/FileUtils.html#method-c-ln_sr","(src, dest, target_directory: true, force: nil, noop: nil, verbose: nil)","<p>Like Bundler::FileUtils.ln_s, but create links relative to <code>dest</code>.\n"],["load","Bundler","Bundler.html#method-c-load","()",""],["load","Bundler::YAMLSerializer","Bundler/YAMLSerializer.html#method-i-load","(str)",""],["load_config","Bundler::Settings","Bundler/Settings.html#method-i-load_config","(config_file)",""],["load_env_plugins","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-load_env_plugins","()",""],["load_gemspec","Bundler","Bundler.html#method-c-load_gemspec","(file, validate = false)",""],["load_gemspec","Bundler::Source::Git","Bundler/Source/Git.html#method-i-load_gemspec","(file)",""],["load_gemspec","Bundler::Source::Path","Bundler/Source/Path.html#method-i-load_gemspec","(file)",""],["load_gemspec_uncached","Bundler","Bundler.html#method-c-load_gemspec_uncached","(file, validate = false)",""],["load_index","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-load_index","(index_file, global = false)","<p>Reads the index file from the directory and initializes the instance variables.\n<p>It skips the sources if …\n"],["load_marshal","Bundler","Bundler.html#method-c-load_marshal","(data, marshal_proc: nil)",""],["load_paths","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-load_paths","()","<p>needed for inline\n"],["load_paths","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-load_paths","(name)",""],["load_paths","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-load_paths","()",""],["load_paths","Gem::Specification","Gem/Specification.html#method-i-load_paths","()",""],["load_plugin","Bundler::Plugin","Bundler/Plugin.html#method-i-load_plugin","(name)","<p>Executes the plugins.rb file\n<p>@param [String] name of the plugin\n"],["load_plugin_files","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-load_plugin_files","(files)",""],["load_plugins","Bundler::Installer","Bundler/Installer.html#method-i-load_plugins","()",""],["load_plugins","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-load_plugins","()",""],["load_spec_files","Bundler::Source::Git","Bundler/Source/Git.html#method-i-load_spec_files","()",""],["load_spec_files","Bundler::Source::Path","Bundler/Source/Path.html#method-i-load_spec_files","()",""],["load_thorfile","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-load_thorfile","(path, content = nil, debug = false)","<p>Receives a path and load the thor file in the path. The file is evaluated inside the sandbox to avoid …\n"],["loaded_from","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-loaded_from","()",""],["loaded_from","Gem::Specification","Gem/Specification.html#method-i-loaded_from","()",""],["loaded_from_for","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-loaded_from_for","(spec)",""],["loaded_gem_paths","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-loaded_gem_paths","()",""],["loaded_specs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-loaded_specs","(name)",""],["local!","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-local-21","()","<p>Set internal representation to fetch the gems/specs locally.\n<p>When this is called, the source should try …\n"],["local!","Bundler::Source","Bundler/Source.html#method-i-local-21","()",""],["local!","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-local-21","()",""],["local?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-local-3F","()",""],["local_config_file","Bundler::Settings","Bundler/Settings.html#method-i-local_config_file","()",""],["local_index_file","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-local_index_file","()","<p>Path where the local index file is stored\n"],["local_method?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-local_method-3F","(instance, name)",""],["local_method?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-local_method-3F","(instance, name)",""],["local_only!","Bundler::Source","Bundler/Source.html#method-i-local_only-21","()",""],["local_only!","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-local_only-21","()",""],["local_only!","Bundler::SourceList","Bundler/SourceList.html#method-i-local_only-21","()",""],["local_override!","Bundler::Source::Git","Bundler/Source/Git.html#method-i-local_override-21","(path)",""],["local_overrides","Bundler::Settings","Bundler/Settings.html#method-i-local_overrides","()",""],["local_platform","Bundler","Bundler.html#method-c-local_platform","()",""],["local_platform","Bundler::GemHelpers","Bundler/GemHelpers.html#method-i-local_platform","()",""],["local_platform","Bundler::GemHelpers","Bundler/GemHelpers.html#method-c-local_platform","()",""],["local_root","Bundler::Plugin","Bundler/Plugin.html#method-i-local_root","()",""],["local_search","Bundler::Index","Bundler/Index.html#method-i-local_search","(query)",""],["local_specification_path","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-local_specification_path","()",""],["local_specs","Bundler::SelfManager","Bundler/SelfManager.html#method-i-local_specs","()",""],["local_specs","Bundler::Source::Path","Bundler/Source/Path.html#method-i-local_specs","(*)",""],["locations","Bundler::Settings","Bundler/Settings.html#method-i-locations","(key)",""],["lock","Bundler::CLI","Bundler/CLI.html#method-i-lock","()",""],["lock","Bundler::Definition","Bundler/Definition.html#method-i-lock","(file, preserve_unknown_sections = false)",""],["lock","Bundler::Installer","Bundler/Installer.html#method-i-lock","(opts = {})",""],["lock","Bundler::ProcessLock","Bundler/ProcessLock.html#method-c-lock","(bundle_path = Bundler.bundle_path)",""],["lock","Bundler::Runtime","Bundler/Runtime.html#method-i-lock","(opts = {})",""],["lock_other_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-lock_other_sources","()",""],["lock_rubygems_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-lock_rubygems_sources","()",""],["lock_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-lock_sources","()",""],["locked_dependencies","Bundler::Definition","Bundler/Definition.html#method-i-locked_dependencies","()",""],["locked_gems","Bundler","Bundler.html#method-c-locked_gems","()",""],["locked_requirements","Bundler::SourceMap","Bundler/SourceMap.html#method-i-locked_requirements","()",""],["locked_ruby_version","Bundler::Definition","Bundler/Definition.html#method-i-locked_ruby_version","()",""],["locked_ruby_version_object","Bundler::Definition","Bundler/Definition.html#method-i-locked_ruby_version_object","()",""],["lockfile_path","Bundler::Source::Path","Bundler/Source/Path.html#method-i-lockfile_path","()",""],["lockfile_version","Bundler::SelfManager","Bundler/SelfManager.html#method-i-lockfile_version","()",""],["lockfiles_equal?","Bundler::Definition","Bundler/Definition.html#method-i-lockfiles_equal-3F","(current, proposed, preserve_unknown_sections)",""],["log_error","Bundler::FriendlyErrors","Bundler/FriendlyErrors.html#method-i-log_error","(error)",""],["log_specs","Bundler::Fetcher::Base","Bundler/Fetcher/Base.html#method-i-log_specs","(debug_msg)",""],["logger","Bundler::PubGrub","Bundler/PubGrub.html#method-c-logger","()",""],["long_desc","Bundler::Thor","Bundler/Thor.html#method-c-long_desc","(long_description, options = {})","<p>Defines the long description of the next command.\n<p>Parameters\n<p>long description&lt;String&gt;\n"],["lookup","Bundler::SpecSet","Bundler/SpecSet.html#method-i-lookup","()",""],["lookup_color","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-lookup_color","(color)",""],["loosen_names","Bundler::Resolver::Base","Bundler/Resolver/Base.html#method-i-loosen_names","(names)",""],["maglev?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-maglev-3F","()",""],["major?","Bundler::GemVersionPromoter","Bundler/GemVersionPromoter.html#method-i-major-3F","()","<p>@return [bool] Convenience method for testing value of level variable.\n"],["major_deprecation","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-major_deprecation","(major_version, message, print_caller_location: false)",""],["major_version","Bundler::FeatureFlag","Bundler/FeatureFlag.html#method-i-major_version","()",""],["make_regexp","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-make_regexp","(schemes = nil)","<p>Returns Regexp that is default <code>self.regexp[:ABS_URI_REF]</code>, unless <code>schemes</code> is provided. Then it is a Regexp.union …\n"],["make_regexp","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-make_regexp","(schemes = nil)","<p>Returns Regexp that is default <code>self.regexp[:ABS_URI_REF]</code>, unless <code>schemes</code> is provided. Then it is a Regexp.union …\n"],["makedirs","Bundler::FileUtils","Bundler/FileUtils.html#method-i-makedirs","(list, mode: nil, noop: nil, verbose: nil)",""],["makedirs","Bundler::FileUtils","Bundler/FileUtils.html#method-c-makedirs","(list, mode: nil, noop: nil, verbose: nil)",""],["manually_installed?","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-manually_installed-3F","()","<p>@!group Stub Delegates\n"],["map","Bundler::Thor","Bundler/Thor.html#method-c-map","(mappings = nil, **kw)","<p>Maps an input to a command. If you define:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">map</span> <span class=\"ruby-string\">&quot;-T&quot;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&quot;list&quot;</span>\n</pre>\n<p>Running:\n"],["map_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-map_sources","(replacement_sources)",""],["mark_loaded","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-mark_loaded","(spec)",""],["marshal_spec_dir","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-marshal_spec_dir","()",""],["match_gem?","Gem","Gem.html#method-i-match_gem-3F","(platform, gem_name)",""],["match_platform","Bundler::MatchPlatform","Bundler/MatchPlatform.html#method-i-match_platform","(p)",""],["match_platforms?","Gem","Gem.html#method-i-match_platforms-3F","(platform, platforms)",""],["match_spec?","Gem","Gem.html#method-i-match_spec-3F","(spec)",""],["matches","Bundler::Thor::LineEditor::Readline::PathCompletion","Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-i-matches","()",""],["matches?","Bundler::RubyVersion","Bundler/RubyVersion.html#method-i-matches-3F","(requirements, version)",""],["matches_current_ruby?","Bundler::FetchMetadata","Bundler/FetchMetadata.html#method-i-matches_current_ruby-3F","()","<p>A fallback is included because the original version of the specification API didn’t include that …\n"],["matches_current_ruby?","Bundler::MatchMetadata","Bundler/MatchMetadata.html#method-i-matches_current_ruby-3F","()",""],["matches_current_rubygems?","Bundler::FetchMetadata","Bundler/FetchMetadata.html#method-i-matches_current_rubygems-3F","()",""],["matches_current_rubygems?","Bundler::MatchMetadata","Bundler/MatchMetadata.html#method-i-matches_current_rubygems-3F","()",""],["matches_for_glob","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-matches_for_glob","(glob)",""],["materialize","Bundler::Definition","Bundler/Definition.html#method-i-materialize","(dependencies)",""],["materialize","Bundler::SpecSet","Bundler/SpecSet.html#method-i-materialize","(deps)",""],["materialize_for_installation","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-materialize_for_installation","()",""],["materialized_for_all_platforms","Bundler::SpecSet","Bundler/SpecSet.html#method-i-materialized_for_all_platforms","()","<p>Materialize for all the specs in the spec set, regardless of what platform they’re for This is in …\n"],["max_retries=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-max_retries-3D","(retries)","<p>Set the maximum number of retries for a request.\n<p>Defaults to one retry.\n<p>Set this to 0 to disable retries. …\n"],["max_version=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-max_version-3D","(max_version)","<p>maximum SSL version to use\n"],["may_include_redundant_platform_specific_gems?","Bundler::LockfileParser","Bundler/LockfileParser.html#method-i-may_include_redundant_platform_specific_gems-3F","()",""],["md5_available?","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-md5_available-3F","()",""],["merge","Bundler::SpecSet","Bundler/SpecSet.html#method-i-merge","(set)",""],["merge","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-merge","(oth)","<p>Args\n<p><code>oth</code> &mdash; Bundler::URI or String\n\n<p>Description\n"],["merge!","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-merge-21","(oth)","<p>Args\n<p><code>oth</code> &mdash; Bundler::URI or String\n\n<p>Description\n"],["merge_path","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-merge_path","(base, rel)","<p>Merges a base path <code>base</code>, with relative path <code>rel</code>, returns a modified base path.\n"],["merged_gem_lockfile_sections!","Bundler::SourceList","Bundler/SourceList.html#method-i-merged_gem_lockfile_sections-21","(replacement_source)",""],["merged_gem_lockfile_sections?","Bundler::SourceList","Bundler/SourceList.html#method-i-merged_gem_lockfile_sections-3F","()",""],["message","Bundler::CLI::Config::Base","Bundler/CLI/Config/Base.html#method-i-message","()",""],["message","Bundler::CompactIndexClient::Updater::MisMatchedChecksumError","Bundler/CompactIndexClient/Updater/MisMatchedChecksumError.html#method-i-message","()",""],["message","Bundler::NoSpaceOnDeviceError","Bundler/NoSpaceOnDeviceError.html#method-i-message","()",""],["message","Bundler::OperationNotSupportedError","Bundler/OperationNotSupportedError.html#method-i-message","()",""],["message","Bundler::PermissionError","Bundler/PermissionError.html#method-i-message","()",""],["message","Bundler::TemporaryResourceError","Bundler/TemporaryResourceError.html#method-i-message","()",""],["message","Bundler::VirtualProtocolError","Bundler/VirtualProtocolError.html#method-i-message","()",""],["meta?","Bundler::Resolver::Package","Bundler/Resolver/Package.html#method-i-meta-3F","()",""],["meta?","Bundler::Resolver::Root","Bundler/Resolver/Root.html#method-i-meta-3F","()",""],["metadata_dependencies","Bundler::Definition","Bundler/Definition.html#method-i-metadata_dependencies","()",""],["metadata_dependencies","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-metadata_dependencies","(spec)",""],["metadata_dependency","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-metadata_dependency","(name, requirement)",""],["method_added","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-method_added","(meth)","<p>Fire this callback whenever a method is added. Added methods are tracked as commands by invoking the …\n"],["method_missing","Bundler::ConnectionPool::Wrapper","Bundler/ConnectionPool/Wrapper.html#method-i-method_missing","(name, *args, **kwargs, &block)",""],["method_missing","Bundler::Dsl","Bundler/Dsl.html#method-i-method_missing","(name, *args)",""],["method_missing","Bundler::Plugin::API","Bundler/Plugin/API.html#method-i-method_missing","(name, *args, &blk)",""],["method_missing","Bundler::Plugin::DSL","Bundler/Plugin/DSL.html#method-i-method_missing","(name, *args)",""],["method_missing","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-method_missing","(method, *args, &blk)",""],["method_option","Bundler::Thor","Bundler/Thor.html#method-c-method_option","(name, options = {})","<p>Adds an option to the set of method options. If :for is given as option, it allows you to change the …\n"],["method_options","Bundler::Thor","Bundler/Thor.html#method-c-method_options","(options = nil)","<p>Declares the options for the next command to be declared.\n<p>Parameters\n<p>Hash[Symbol =&gt; Object] &mdash; The hash …\n"],["method_visibility","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-method_visibility","(klass, method)",""],["min_version=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-min_version-3D","(min_version)","<p>Minimum SSL version to use\n"],["mingw?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mingw-3F","()",""],["minor?","Bundler::GemVersionPromoter","Bundler/GemVersionPromoter.html#method-i-minor-3F","()","<p>@return [bool] Convenience method for testing value of level variable.\n"],["mirror_for","Bundler::Settings","Bundler/Settings.html#method-i-mirror_for","(uri)",""],["missing_extensions?","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-missing_extensions-3F","()","<p>This is defined directly to avoid having to loading the full spec\n"],["missing_specs","Bundler::Definition","Bundler/Definition.html#method-i-missing_specs","()",""],["missing_specs","Bundler::SpecSet","Bundler/SpecSet.html#method-i-missing_specs","()",""],["missing_specs?","Bundler::Definition","Bundler/Definition.html#method-i-missing_specs-3F","()",""],["mkdir","Bundler::FileUtils","Bundler/FileUtils.html#method-i-mkdir","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates directories at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code> …\n"],["mkdir","Bundler::FileUtils","Bundler/FileUtils.html#method-c-mkdir","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates directories at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code> …\n"],["mkdir_p","Bundler","Bundler.html#method-c-mkdir_p","(path, options = {})",""],["mkdir_p","Bundler::FileUtils","Bundler/FileUtils.html#method-i-mkdir_p","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates directories at the paths in the given <code>list</code> (a single path or an array of paths), also creating …\n"],["mkdir_p","Bundler::FileUtils","Bundler/FileUtils.html#method-c-mkdir_p","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates directories at the paths in the given <code>list</code> (a single path or an array of paths), also creating …\n"],["mkpath","Bundler::FileUtils","Bundler/FileUtils.html#method-i-mkpath","(list, mode: nil, noop: nil, verbose: nil)",""],["mkpath","Bundler::FileUtils","Bundler/FileUtils.html#method-c-mkpath","(list, mode: nil, noop: nil, verbose: nil)",""],["most_specific_locked_platform","Bundler::Definition","Bundler/Definition.html#method-i-most_specific_locked_platform","()",""],["most_specific_locked_platform?","Bundler","Bundler.html#method-c-most_specific_locked_platform-3F","(platform)",""],["move","Bundler::FileUtils","Bundler/FileUtils.html#method-i-move","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)",""],["move","Bundler::FileUtils","Bundler/FileUtils.html#method-c-move","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)",""],["move_version_to_end","Bundler::GemVersionPromoter","Bundler/GemVersionPromoter.html#method-i-move_version_to_end","(result, version)",""],["mri?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mri-3F","()",""],["mswin64?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mswin64-3F","()",""],["mswin?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mswin-3F","()",""],["multiple_global_source_warning","Bundler::Dsl","Bundler/Dsl.html#method-i-multiple_global_source_warning","()",""],["multiple_remotes?","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-multiple_remotes-3F","()",""],["mute","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-mute","()","<p>Mute everything that’s inside given block\n"],["mute?","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-mute-3F","()","<p>Check if base is muted\n"],["mv","Bundler::FileUtils","Bundler/FileUtils.html#method-i-mv","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Moves entries.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should be  …\n"],["mv","Bundler::FileUtils","Bundler/FileUtils.html#method-c-mv","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Moves entries.\n<p>Arguments <code>src</code> (a single path or an array of paths) and <code>dest</code> (a single path) should be  …\n"],["name","Bundler::GemHelper","Bundler/GemHelper.html#method-i-name","()",""],["name","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-name","()",""],["name","Bundler::Source::Git","Bundler/Source/Git.html#method-i-name","()",""],["name","Bundler::Source::Path","Bundler/Source/Path.html#method-i-name","()",""],["name","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-name","()",""],["name_for_explicit_dependency_source","Bundler::Resolver","Bundler/Resolver.html#method-i-name_for_explicit_dependency_source","()",""],["names","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-i-names","()",""],["names","Bundler::CompactIndexClient::Cache","Bundler/CompactIndexClient/Cache.html#method-i-names","()",""],["names_path","Bundler::CompactIndexClient::Cache","Bundler/CompactIndexClient/Cache.html#method-i-names_path","()",""],["namespace","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-namespace","(name = nil)","<p>Sets the namespace for the Bundler::Thor or Bundler::Thor::Group class. By default the namespace is retrieved …\n"],["namespace","Object","Object.html#method-i-namespace","(name)",""],["namespace_from_thor_class","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-namespace_from_thor_class","(constant)","<p>Receives a constant and converts it to a Bundler::Thor namespace. Since Bundler::Thor commands can be …\n"],["namespaces_in_content","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-namespaces_in_content","(contents, file = __FILE__)","<p>Given the contents, evaluate it inside the sandbox and returns the namespaces defined in the sandbox. …\n"],["needs_switching?","Bundler::SelfManager","Bundler/SelfManager.html#method-i-needs_switching-3F","()",""],["negative?","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-negative-3F","()",""],["new","Bundler::CLI","Bundler/CLI.html#method-c-new","(*args)",""],["new","Bundler::CLI::Add","Bundler/CLI/Add.html#method-c-new","(options, gems)",""],["new","Bundler::CLI::Binstubs","Bundler/CLI/Binstubs.html#method-c-new","(options, gems)",""],["new","Bundler::CLI::Cache","Bundler/CLI/Cache.html#method-c-new","(options)",""],["new","Bundler::CLI::Check","Bundler/CLI/Check.html#method-c-new","(options)",""],["new","Bundler::CLI::Clean","Bundler/CLI/Clean.html#method-c-new","(options)",""],["new","Bundler::CLI::Config::Base","Bundler/CLI/Config/Base.html#method-c-new","(options, name, value, thor)",""],["new","Bundler::CLI::Console","Bundler/CLI/Console.html#method-c-new","(options, group)",""],["new","Bundler::CLI::Doctor","Bundler/CLI/Doctor.html#method-c-new","(options)",""],["new","Bundler::CLI::Exec","Bundler/CLI/Exec.html#method-c-new","(options, args)",""],["new","Bundler::CLI::Fund","Bundler/CLI/Fund.html#method-c-new","(options)",""],["new","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-c-new","(options, gem_name, thor)",""],["new","Bundler::CLI::Info","Bundler/CLI/Info.html#method-c-new","(options, gem_name)",""],["new","Bundler::CLI::Init","Bundler/CLI/Init.html#method-c-new","(options)",""],["new","Bundler::CLI::Inject","Bundler/CLI/Inject.html#method-c-new","(options, name, version)",""],["new","Bundler::CLI::Install","Bundler/CLI/Install.html#method-c-new","(options)",""],["new","Bundler::CLI::List","Bundler/CLI/List.html#method-c-new","(options)",""],["new","Bundler::CLI::Lock","Bundler/CLI/Lock.html#method-c-new","(options)",""],["new","Bundler::CLI::Open","Bundler/CLI/Open.html#method-c-new","(options, name)",""],["new","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-c-new","(options, gems)",""],["new","Bundler::CLI::Platform","Bundler/CLI/Platform.html#method-c-new","(options)",""],["new","Bundler::CLI::Pristine","Bundler/CLI/Pristine.html#method-c-new","(gems)",""],["new","Bundler::CLI::Remove","Bundler/CLI/Remove.html#method-c-new","(gems, options)",""],["new","Bundler::CLI::Show","Bundler/CLI/Show.html#method-c-new","(options, gem_name)",""],["new","Bundler::CLI::Update","Bundler/CLI/Update.html#method-c-new","(options, gems)",""],["new","Bundler::CLI::Viz","Bundler/CLI/Viz.html#method-c-new","(options)",""],["new","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-c-new","(directory, fetcher)",""],["new","Bundler::CompactIndexClient::Cache","Bundler/CompactIndexClient/Cache.html#method-c-new","(directory)",""],["new","Bundler::CompactIndexClient::Updater","Bundler/CompactIndexClient/Updater.html#method-c-new","(fetcher)",""],["new","Bundler::CompactIndexClient::Updater::MisMatchedChecksumError","Bundler/CompactIndexClient/Updater/MisMatchedChecksumError.html#method-c-new","(path, server_checksum, local_checksum)",""],["new","Bundler::ConnectionPool","Bundler/ConnectionPool.html#method-c-new","(options = {}, &block)",""],["new","Bundler::ConnectionPool::TimedStack","Bundler/ConnectionPool/TimedStack.html#method-c-new","(size = 0, &block)","<p>Creates a new pool with <code>size</code> connections that are created from the given <code>block</code>.\n"],["new","Bundler::ConnectionPool::Wrapper","Bundler/ConnectionPool/Wrapper.html#method-c-new","(options = {}, &block)",""],["new","Bundler::Definition","Bundler/Definition.html#method-c-new","(lockfile, dependencies, sources, unlock, ruby_version = nil, optional_groups = [], gemfiles = [])","<p>How does the new system work?\n<p>Load information from Gemfile and Lockfile\n<p>Invalidate stale locked specs …\n"],["new","Bundler::Dependency","Bundler/Dependency.html#method-c-new","(name, version, options = {}, &blk)",""],["new","Bundler::DirectoryRemovalError","Bundler/DirectoryRemovalError.html#method-c-new","(orig_exception, msg)",""],["new","Bundler::Dsl","Bundler/Dsl.html#method-c-new","()",""],["new","Bundler::Dsl::DSLError","Bundler/Dsl/DSLError.html#method-c-new","(description, dsl_path, backtrace, contents = nil)","<p>@param [Exception] backtrace @see backtrace @param [String]    dsl_path  @see dsl_path\n"],["new","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-c-new","(name, version, platform, spec_fetcher, dependencies, metadata = nil)",""],["new","Bundler::EnvironmentPreserver","Bundler/EnvironmentPreserver.html#method-c-new","(env, keys)","<p>@param env [Hash] @param keys [Array&lt;String&gt;]\n"],["new","Bundler::FeatureFlag","Bundler/FeatureFlag.html#method-c-new","(bundler_version)",""],["new","Bundler::Fetcher","Bundler/Fetcher.html#method-c-new","(remote)",""],["new","Bundler::Fetcher::AuthenticationForbiddenError","Bundler/Fetcher/AuthenticationForbiddenError.html#method-c-new","(remote_uri)",""],["new","Bundler::Fetcher::AuthenticationRequiredError","Bundler/Fetcher/AuthenticationRequiredError.html#method-c-new","(remote_uri)",""],["new","Bundler::Fetcher::BadAuthenticationError","Bundler/Fetcher/BadAuthenticationError.html#method-c-new","(remote_uri)",""],["new","Bundler::Fetcher::Base","Bundler/Fetcher/Base.html#method-c-new","(downloader, remote, display_uri)",""],["new","Bundler::Fetcher::CertificateFailureError","Bundler/Fetcher/CertificateFailureError.html#method-c-new","(remote_uri)",""],["new","Bundler::Fetcher::Downloader","Bundler/Fetcher/Downloader.html#method-c-new","(connection, redirect_limit)",""],["new","Bundler::Fetcher::SSLError","Bundler/Fetcher/SSLError.html#method-c-new","(msg = nil)",""],["new","Bundler::GemHelper","Bundler/GemHelper.html#method-c-new","(base = nil, name = nil)",""],["new","Bundler::GemInstaller","Bundler/GemInstaller.html#method-c-new","(spec, installer, standalone = false, worker = 0, force = false)",""],["new","Bundler::GemRequireError","Bundler/GemRequireError.html#method-c-new","(orig_exception, msg)",""],["new","Bundler::GemVersionPromoter","Bundler/GemVersionPromoter.html#method-c-new","()","<p>Creates a GemVersionPromoter instance.\n<p>@return [GemVersionPromoter]\n"],["new","Bundler::GenericSystemCallError","Bundler/GenericSystemCallError.html#method-c-new","(underlying_error, message)",""],["new","Bundler::Graph","Bundler/Graph.html#method-c-new","(env, output_file, show_version = false, show_requirements = false, output_format = \"png\", without = [])",""],["new","Bundler::Graph::GraphVizClient","Bundler/Graph/GraphVizClient.html#method-c-new","(graph_instance)",""],["new","Bundler::Index","Bundler/Index.html#method-c-new","()",""],["new","Bundler::Injector","Bundler/Injector.html#method-c-new","(deps, options = {})",""],["new","Bundler::Installer","Bundler/Installer.html#method-c-new","(root, definition)",""],["new","Bundler::LazySpecification","Bundler/LazySpecification.html#method-c-new","(name, version, platform, source = nil)",""],["new","Bundler::LockfileGenerator","Bundler/LockfileGenerator.html#method-c-new","(definition)","<p>@private\n"],["new","Bundler::LockfileParser","Bundler/LockfileParser.html#method-c-new","(lockfile)",""],["new","Bundler::MirrorSockets","Bundler/MirrorSockets.html#method-c-new","(mirror)",""],["new","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-c-new","(installer, all_specs, size, standalone, force)",""],["new","Bundler::ParallelInstaller::SpecInstallation","Bundler/ParallelInstaller/SpecInstallation.html#method-c-new","(spec)",""],["new","Bundler::PermissionError","Bundler/PermissionError.html#method-c-new","(path, permission_type = :write)",""],["new","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-c-new","(name: nil, proxy: nil, pool_size: DEFAULT_POOL_SIZE)","<p>Creates a new Bundler::Persistent::Net::HTTP::Persistent.\n<p>Set a <code>name</code> for fun.  Your library name should …\n"],["new","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-c-new","(opts)",""],["new","Bundler::Plugin::DSL","Bundler/Plugin/DSL.html#method-c-new","()",""],["new","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-c-new","()",""],["new","Bundler::Plugin::Index::CommandConflict","Bundler/Plugin/Index/CommandConflict.html#method-c-new","(plugin, commands)",""],["new","Bundler::Plugin::Index::SourceConflict","Bundler/Plugin/Index/SourceConflict.html#method-c-new","(plugin, sources)",""],["new","Bundler::PubGrub::Assignment","Bundler/PubGrub/Assignment.html#method-c-new","(term, cause, decision_level, index)",""],["new","Bundler::PubGrub::BasicPackageSource","Bundler/PubGrub/BasicPackageSource.html#method-c-new","()",""],["new","Bundler::PubGrub::FailureWriter","Bundler/PubGrub/FailureWriter.html#method-c-new","(root)",""],["new","Bundler::PubGrub::Incompatibility","Bundler/PubGrub/Incompatibility.html#method-c-new","(terms, cause:, custom_explanation: nil)",""],["new","Bundler::PubGrub::Package","Bundler/PubGrub/Package.html#method-c-new","(name)",""],["new","Bundler::PubGrub::PartialSolution","Bundler/PubGrub/PartialSolution.html#method-c-new","()",""],["new","Bundler::PubGrub::SolveFailure","Bundler/PubGrub/SolveFailure.html#method-c-new","(incompatibility)",""],["new","Bundler::PubGrub::StaticPackageSource","Bundler/PubGrub/StaticPackageSource.html#method-c-new","()",""],["new","Bundler::PubGrub::StaticPackageSource::DSL","Bundler/PubGrub/StaticPackageSource/DSL.html#method-c-new","(packages, root_deps)",""],["new","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-c-new","(constraint, positive)",""],["new","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-c-new","(package, range: nil)","<p>@param package [Bundler::PubGrub::Package] @param range [Bundler::PubGrub::VersionRange]\n"],["new","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-c-new","(min: nil, max: nil, include_min: false, include_max: false, name: nil)",""],["new","Bundler::PubGrub::VersionRange::Empty","Bundler/PubGrub/VersionRange/Empty.html#method-c-new","()",""],["new","Bundler::PubGrub::VersionSolver","Bundler/PubGrub/VersionSolver.html#method-c-new","(source:, root: Package.root, logger: Bundler::PubGrub.logger)",""],["new","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-c-new","(ranges)",""],["new","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-c-new","(name, version, platform, spec_fetcher)",""],["new","Bundler::Resolver","Bundler/Resolver.html#method-c-new","(base, gem_version_promoter)",""],["new","Bundler::Resolver::Base","Bundler/Resolver/Base.html#method-c-new","(source_requirements, dependencies, base, platforms, options)",""],["new","Bundler::Resolver::Candidate","Bundler/Resolver/Candidate.html#method-c-new","(version, specs: [])",""],["new","Bundler::Resolver::Incompatibility","Bundler/Resolver/Incompatibility.html#method-c-new","(terms, cause:, custom_explanation: nil, extended_explanation: nil)",""],["new","Bundler::Resolver::Package","Bundler/Resolver/Package.html#method-c-new","(name, platforms, locked_specs:, unlock:, prerelease: false, dependency: nil)",""],["new","Bundler::Resolver::Root","Bundler/Resolver/Root.html#method-c-new","(name)",""],["new","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-c-new","(specs)",""],["new","Bundler::Retry","Bundler/Retry.html#method-c-new","(name, exceptions = nil, retries = self.class.default_retries)",""],["new","Bundler::RubyVersion","Bundler/RubyVersion.html#method-c-new","(versions, patchlevel, engine, engine_version)",""],["new","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-c-new","()",""],["new","Bundler::Runtime","Bundler/Runtime.html#method-c-new","(root, definition)",""],["new","Bundler::Settings","Bundler/Settings.html#method-c-new","(root = nil)",""],["new","Bundler::Settings::Mirror","Bundler/Settings/Mirror.html#method-c-new","(uri = nil, fallback_timeout = 0)",""],["new","Bundler::Settings::MirrorConfig","Bundler/Settings/MirrorConfig.html#method-c-new","(config_line, value)",""],["new","Bundler::Settings::Mirrors","Bundler/Settings/Mirrors.html#method-c-new","(prober = nil)",""],["new","Bundler::Settings::Validator::Rule","Bundler/Settings/Validator/Rule.html#method-c-new","(keys, description, &validate)",""],["new","Bundler::SimilarityDetector","Bundler/SimilarityDetector.html#method-c-new","(corpus)","<p>initialize with an array of words to be matched against\n"],["new","Bundler::SocketAddress","Bundler/SocketAddress.html#method-c-new","(type, host, port)",""],["new","Bundler::Source::Gemspec","Bundler/Source/Gemspec.html#method-c-new","(options)",""],["new","Bundler::Source::Git","Bundler/Source/Git.html#method-c-new","(options)",""],["new","Bundler::Source::Git::GitCommandError","Bundler/Source/Git/GitCommandError.html#method-c-new","(command, path, extra_info = nil)",""],["new","Bundler::Source::Git::GitNotAllowedError","Bundler/Source/Git/GitNotAllowedError.html#method-c-new","(command)",""],["new","Bundler::Source::Git::GitNotInstalledError","Bundler/Source/Git/GitNotInstalledError.html#method-c-new","()",""],["new","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-c-new","(path, uri, options = {}, revision = nil, git = nil)",""],["new","Bundler::Source::Git::MissingGitRevisionError","Bundler/Source/Git/MissingGitRevisionError.html#method-c-new","(command, destination_path, ref, repo)",""],["new","Bundler::Source::Path","Bundler/Source/Path.html#method-c-new","(options)",""],["new","Bundler::Source::Path::Installer","Bundler/Source/Path/Installer.html#method-c-new","(spec, options = {})",""],["new","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-c-new","(options = {})",""],["new","Bundler::Source::Rubygems::Remote","Bundler/Source/Rubygems/Remote.html#method-c-new","(uri)",""],["new","Bundler::Source::RubygemsAggregate","Bundler/Source/RubygemsAggregate.html#method-c-new","(sources, source_map)",""],["new","Bundler::SourceList","Bundler/SourceList.html#method-c-new","()",""],["new","Bundler::SourceMap","Bundler/SourceMap.html#method-c-new","(sources, dependencies, locked_specs)",""],["new","Bundler::SpecSet","Bundler/SpecSet.html#method-c-new","(specs, incomplete_specs = [])",""],["new","Bundler::Standalone","Bundler/Standalone.html#method-c-new","(groups, definition)",""],["new","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-c-new","(args = [], options = {}, config = {})","<p>Extends initializer to add more configuration options.\n<p>Configuration\n<p>behavior&lt;Symbol&gt; &mdash; The actions …\n"],["new","Bundler::Thor::Base","Bundler/Thor/Base.html#method-c-new","(args = [], local_options = {}, config = {})","<p>It receives arguments in an Array and two hashes, one for options and other for configuration.\n<p>Notice …\n"],["new","Bundler::Thor::Command","Bundler/Thor/Command.html#method-c-new","(name, description, long_description, usage, options = nil)",""],["new","Bundler::Thor::Command","Bundler/Thor/Command.html#method-c-new","(name, description, long_description, usage, options = nil)",""],["new","Bundler::Thor::DynamicCommand","Bundler/Thor/DynamicCommand.html#method-c-new","(name, options = nil)",""],["new","Bundler::Thor::DynamicCommand","Bundler/Thor/DynamicCommand.html#method-c-new","(name, options = nil)",""],["new","Bundler::Thor::LineEditor::Basic","Bundler/Thor/LineEditor/Basic.html#method-c-new","(prompt, options)",""],["new","Bundler::Thor::LineEditor::Readline::PathCompletion","Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-c-new","(text)",""],["new","Bundler::Thor::NestedContext","Bundler/Thor/NestedContext.html#method-c-new","()",""],["new","Bundler::Thor::Shell","Bundler/Thor/Shell.html#method-c-new","(args = [], options = {}, config = {})","<p>Add shell to initialize config values.\n<p>Configuration\n<p>shell&lt;Object&gt; &mdash; An instance of the shell to be …\n"],["new","Bundler::UI::RGProxy","Bundler/UI/RGProxy.html#method-c-new","(ui)",""],["new","Bundler::UI::Shell","Bundler/UI/Shell.html#method-c-new","(options = {})",""],["new","Bundler::UI::Silent","Bundler/UI/Silent.html#method-c-new","()",""],["new","Bundler::URI::FTP","Bundler/URI/FTP.html#method-c-new","(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = nil, arg_check = false)","<p>Description\n<p>Creates a new Bundler::URI::FTP object from generic URL components with no syntax checking. …\n"],["new","Bundler::URI::Generic","Bundler/URI/Generic.html#method-c-new","(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = DEFAULT_PARSER, arg_check = false)","<p>Args\n<p><code>scheme</code> &mdash; Protocol scheme, i.e. ‘http’,‘ftp’,‘mailto’ and so on.\n<p><code>userinfo</code> &mdash; User …\n"],["new","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-c-new","(*arg)","<p>Description\n<p>Creates a new Bundler::URI::LDAP object from generic Bundler::URI components as per RFC 2396. …\n"],["new","Bundler::URI::MailTo","Bundler/URI/MailTo.html#method-c-new","(*arg)","<p>Description\n<p>Creates a new Bundler::URI::MailTo object from generic URL components with no syntax checking. …\n"],["new","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-c-new","(opts = {})","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Parser</span>.<span class=\"ruby-identifier\">new</span>([<span class=\"ruby-identifier\">opts</span>])\n</pre>\n<p>Args\n"],["new","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-c-new","(opts = {})","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Parser</span>.<span class=\"ruby-identifier\">new</span>([<span class=\"ruby-identifier\">opts</span>])\n</pre>\n<p>Args\n"],["new","Bundler::Worker","Bundler/Worker.html#method-c-new","(size, name, func)","<p>Creates a worker pool of specified size\n<p>@param size [Integer] Size of pool @param name [String] name the …\n"],["new","Bundler::Worker::WrappedException","Bundler/Worker/WrappedException.html#method-c-new","(exn)",""],["new","Bundler::YamlSyntaxError","Bundler/YamlSyntaxError.html#method-c-new","(orig_exception, msg)",""],["new","UndefinedCommandError","UndefinedCommandError.html#method-c-new","(command, all_commands, namespace)",""],["new","UndefinedCommandError","UndefinedCommandError.html#method-c-new","(command, all_commands, namespace)",""],["new","UndefinedCommandError::SpellChecker","UndefinedCommandError/SpellChecker.html#method-c-new","(error)",""],["new","UnknownArgumentError","UnknownArgumentError.html#method-c-new","(switches, unknown)",""],["new","UnknownArgumentError::SpellChecker","UnknownArgumentError/SpellChecker.html#method-c-new","(error)",""],["new_deps","Bundler::Definition","Bundler/Definition.html#method-i-new_deps","()",""],["new_issue_url","Bundler::FriendlyErrors","Bundler/FriendlyErrors.html#method-i-new_issue_url","()",""],["new_specs","Bundler::Definition","Bundler/Definition.html#method-i-new_specs","()",""],["new_value","Bundler::CLI::Config::Base","Bundler/CLI/Config/Base.html#method-i-new_value","()",""],["next_package_to_try","Bundler::PubGrub::VersionSolver","Bundler/PubGrub/VersionSolver.html#method-i-next_package_to_try","()",""],["no?","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-no-3F","(statement, color = nil)","<p>Make a question the to user and returns true if the user replies “n” or “no”.\n"],["no?","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-no-3F","()",""],["no?","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-no-3F","()",""],["no_commands","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-no_commands","(&block)","<p>All methods defined inside the given block are not added as commands.\n<p>So you can do:\n\n<pre>class MyScript &lt; Bundler::Thor ...</pre>\n"],["no_commands?","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-no_commands-3F","()",""],["no_commands_context","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-no_commands_context","()",""],["no_remotes?","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-no_remotes-3F","()",""],["no_resolve_needed?","Bundler::Definition","Bundler/Definition.html#method-i-no_resolve_needed-3F","()",""],["no_tasks","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-no_tasks","(&block)",""],["no_versions_incompatibility_for","Bundler::PubGrub::BasicPackageSource","Bundler/PubGrub/BasicPackageSource.html#method-i-no_versions_incompatibility_for","(_package, unsatisfied_term)",""],["no_versions_incompatibility_for","Bundler::Resolver","Bundler/Resolver.html#method-i-no_versions_incompatibility_for","(package, unsatisfied_term)",""],["non_default_explicit_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-non_default_explicit_sources","()",""],["non_global_rubygems_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-non_global_rubygems_sources","()",""],["nondevelopment_dependencies","Gem::Specification","Gem/Specification.html#method-i-nondevelopment_dependencies","()",""],["normalize","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-normalize","()","<p>Returns normalized Bundler::URI.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bundler/vendor/uri/lib/uri&#39;</span>\n\n<span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&quot;HTTP://my.EXAMPLE.com&quot;</span>).<span class=\"ruby-identifier\">normalize</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["normalize!","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-normalize-21","()","<p>Destructive version of #normalize.\n"],["normalize_group_options","Bundler::Dsl","Bundler/Dsl.html#method-i-normalize_group_options","(opts, groups)",""],["normalize_groups","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-normalize_groups","()",""],["normalize_hash","Bundler::Dsl","Bundler/Dsl.html#method-i-normalize_hash","(opts)",""],["normalize_options","Bundler::Dsl","Bundler/Dsl.html#method-i-normalize_options","(name, version, opts)",""],["normalize_ranges","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-c-normalize_ranges","(ranges)",""],["normalize_settings","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-normalize_settings","()",""],["normalize_source","Bundler::Dsl","Bundler/Dsl.html#method-i-normalize_source","(source)",""],["normalize_suffix","Bundler::URINormalizer","Bundler/URINormalizer.html#method-i-normalize_suffix","(uri, trailing_slash: true)","<p>Normalizes uri to a consistent version, either with or without trailing slash.\n<p>TODO: Currently gem sources …\n"],["normalize_uri","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-normalize_uri","(uri)","<p>Adds “http://” to the String <code>uri</code> if it is missing.\n"],["normalize_uri","Bundler::Settings","Bundler/Settings.html#method-c-normalize_uri","(uri)","<p>TODO: duplicates Rubygems#normalize_uri TODO: is this the correct place to validate mirror URIs?\n"],["normalize_uri","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-normalize_uri","(uri)",""],["normalized_constraint","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-normalized_constraint","()",""],["normalized_linux_version_ext","Gem::Platform","Gem/Platform.html#method-i-normalized_linux_version_ext","()","<p>This is a copy of RubyGems 3.3.23 or higher ‘normalized_linux_method`. Once only 3.3.23 is supported, …\n"],["not_debugging?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-not_debugging-3F","(instance)",""],["not_debugging?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-not_debugging-3F","(instance)",""],["not_pinned?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-not_pinned-3F","()",""],["nothing_changed?","Bundler::Definition","Bundler/Definition.html#method-i-nothing_changed-3F","()",""],["nothing_outdated_message","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-nothing_outdated_message","()",""],["opaque=","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-opaque-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["open","Bundler::CLI","Bundler/CLI.html#method-i-open","(name)",""],["open_editor","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-open_editor","(editor, file)",""],["option","Bundler::Thor","Bundler/Thor.html#method-c-option","(name, options = {})",""],["options","Bundler::FileUtils","Bundler/FileUtils.html#method-c-options","()","<p>Returns an array of the string keyword names:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">options</span>.<span class=\"ruby-identifier\">take</span>(<span class=\"ruby-value\">3</span>) <span class=\"ruby-comment\"># =&gt; [&quot;noop&quot;, &quot;verbose&quot;, ...</span>\n</pre>\n"],["options","Bundler::Source::Metadata","Bundler/Source/Metadata.html#method-i-options","()",""],["options","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-options","()",""],["options","Bundler::Thor","Bundler/Thor.html#method-c-options","(options = nil)",""],["options_of","Bundler::FileUtils","Bundler/FileUtils.html#method-c-options_of","(mid)","<p>Returns an array of the string keyword name for method <code>mid</code>; the argument may be a string or a symbol: …\n"],["options_to_lock","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-options_to_lock","()","<p>Options to be saved in the lockfile so that the source plugin is able to check out same version of gem …\n"],["origin","Bundler::URI::HTTP","Bundler/URI/HTTP.html#method-i-origin","()","<p>Description\n<p>Returns the origin for an HTTP uri, as defined in datatracker.ietf.org/doc/html/rfc6454.\n<p>Example: …\n"],["original_env","Bundler","Bundler.html#method-c-original_env","()","<p>@return [Hash] Environment present before Bundler was activated\n"],["original_exec","Bundler","Bundler.html#method-c-original_exec","(*args)","<p>Run a ‘Kernel.exec` to a subcommand with the environment present before Bundler was activated\n"],["original_system","Bundler","Bundler.html#method-c-original_system","(*args)","<p>Run subcommand with the environment present before Bundler was activated\n"],["os_match","Bundler::GemHelpers::PlatformMatch","Bundler/GemHelpers/PlatformMatch.html#method-c-os_match","(spec_platform, user_platform)",""],["other_specs_matching_message","Bundler::Resolver","Bundler/Resolver.html#method-i-other_specs_matching_message","(specs, requirement)",""],["otool_available?","Bundler::CLI::Doctor","Bundler/CLI/Doctor.html#method-i-otool_available-3F","()",""],["out_of_space_message","Bundler::GemInstaller","Bundler/GemInstaller.html#method-i-out_of_space_message","()",""],["outdated","Bundler::CLI","Bundler/CLI.html#method-i-outdated","(*gems)",""],["outdated?","Bundler::CLI::Show","Bundler/CLI/Show.html#method-i-outdated-3F","(current, latest)",""],["output_fund_metadata_summary","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-output_fund_metadata_summary","()",""],["output_post_install_messages","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-output_post_install_messages","(messages)",""],["output_without_groups_message","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-output_without_groups_message","(command)",""],["overlap?","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-overlap-3F","(other)",""],["override_for","Bundler::Source::Git","Bundler/Source/Git.html#method-i-override_for","(path)",""],["package_name","Bundler::Thor","Bundler/Thor.html#method-c-package_name","(name, _ = {})","<p>Allows for custom “Command” package naming.\n<p>Parameters\n<p>name&lt;String&gt; options&lt;Hash&gt; …\n"],["package_path","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-package_path","(cache_path, spec)",""],["padding=","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-padding-3D","(value)","<p>Sets the output padding, not allowing less than zero values.\n"],["parallel_compact_index_client","Bundler::Fetcher::CompactIndex","Bundler/Fetcher/CompactIndex.html#method-i-parallel_compact_index_client","()",""],["parent_folder","Bundler::PermissionError","Bundler/PermissionError.html#method-i-parent_folder","()",""],["parent_setting_for","Bundler::Settings","Bundler/Settings.html#method-i-parent_setting_for","(name)",""],["parse","Bundler::CompactIndexClient::GemParser","Bundler/CompactIndexClient/GemParser.html#method-i-parse","(line)",""],["parse","Bundler::Settings::Mirrors","Bundler/Settings/Mirrors.html#method-i-parse","(key, value)",""],["parse","Bundler::URI","Bundler/URI.html#method-c-parse","(uri)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-identifier\">uri_str</span>)\n</pre>\n<p>Args\n"],["parse","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-parse","(uri)","<p>Args\n<p><code>uri</code> &mdash; String\n\n<p>Description\n"],["parse","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-parse","(uri)","<p>Args\n<p><code>uri</code> &mdash; String\n\n<p>Description\n"],["parse_bundled_with","Bundler::LockfileParser","Bundler/LockfileParser.html#method-i-parse_bundled_with","(line)",""],["parse_constraint","Bundler::PubGrub::RubyGems","Bundler/PubGrub/RubyGems.html#method-i-parse_constraint","(package, dep)",""],["parse_dependency","Bundler::CompactIndexClient::GemParser","Bundler/CompactIndexClient/GemParser.html#method-i-parse_dependency","(string)",""],["parse_dependency","Bundler::LockfileParser","Bundler/LockfileParser.html#method-i-parse_dependency","(line)",""],["parse_dependency","Bundler::PubGrub::BasicPackageSource","Bundler/PubGrub/BasicPackageSource.html#method-i-parse_dependency","(package, dependency)","<p>Override me!\n<p>Convert a (user-defined) dependency into a format Bundler::PubGrub understands.\n<p>Package is …\n"],["parse_dependency","Bundler::PubGrub::StaticPackageSource","Bundler/PubGrub/StaticPackageSource.html#method-i-parse_dependency","(package, dependency)",""],["parse_dependency","Bundler::Resolver","Bundler/Resolver.html#method-i-parse_dependency","(package, dependency)",""],["parse_dn","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-parse_dn","()","<p>Private method to cleanup <code>dn</code> from using the <code>path</code> component attribute.\n"],["parse_gem","Bundler::CompactIndexClient::Cache","Bundler/CompactIndexClient/Cache.html#method-i-parse_gem","(line)",""],["parse_line_number_from_description","Bundler::Dsl::DSLError","Bundler/Dsl/DSLError.html#method-i-parse_line_number_from_description","()",""],["parse_metadata","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-parse_metadata","(data)",""],["parse_platform","Bundler::LockfileParser","Bundler/LockfileParser.html#method-i-parse_platform","(line)",""],["parse_query","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-parse_query","()","<p>Private method to cleanup <code>attributes</code>, <code>scope</code>, <code>filter</code>, and <code>extensions</code> from using the <code>query</code> component attribute. …\n"],["parse_range","Bundler::PubGrub::RubyGems","Bundler/PubGrub/RubyGems.html#method-i-parse_range","(dep)",""],["parse_ruby","Bundler::LockfileParser","Bundler/LockfileParser.html#method-i-parse_ruby","(line)",""],["parse_source","Bundler::LockfileParser","Bundler/LockfileParser.html#method-i-parse_source","(line)",""],["parse_spec","Bundler::LockfileParser","Bundler/LockfileParser.html#method-i-parse_spec","(line)",""],["parser","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-parser","()","<p>Returns the parser to be used.\n<p>Unless a Bundler::URI::Parser is defined, DEFAULT_PARSER is used.\n"],["partition_versions","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-partition_versions","(versions)","<p>Partitions passed versions into [lower, within, higher]\n<p>versions must be sorted\n"],["password","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-password","()","<p>Returns the password component (without Bundler::URI decoding).\n"],["password=","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-password-3D","(password)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["patch_level_options","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-patch_level_options","(options)",""],["path","Bundler::Dsl","Bundler/Dsl.html#method-i-path","(path, options = {}, &blk)",""],["path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-path","(obj)",""],["path","Bundler::Settings","Bundler/Settings.html#method-i-path","()","<p>for legacy reasons, in Bundler 2, we do not respect :disable_shared_gems\n"],["path","Bundler::Source::Git","Bundler/Source/Git.html#method-i-path","()",""],["path","Bundler::URI::FTP","Bundler/URI/FTP.html#method-i-path","()","<p>Returns the path from an FTP Bundler::URI.\n<p>RFC 1738 specifically states that the path for an FTP Bundler::URI …\n"],["path=","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-path-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["path?","Bundler::Source","Bundler/Source.html#method-i-path-3F","()",""],["path_separator","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-path_separator","()",""],["paths","Bundler::Standalone","Bundler/Standalone.html#method-i-paths","()",""],["perform_bundle_install","Bundler::CLI::Add","Bundler/CLI/Add.html#method-i-perform_bundle_install","()",""],["permission_type","Bundler::PermissionError","Bundler/PermissionError.html#method-i-permission_type","()",""],["pin_locally_available_names","Bundler::Definition","Bundler/Definition.html#method-i-pin_locally_available_names","(source_requirements)",""],["pinned_spec_names","Bundler::SourceMap","Bundler/SourceMap.html#method-i-pinned_spec_names","(skip = nil)",""],["pinned_to_full_sha?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-pinned_to_full_sha-3F","()",""],["pins","Bundler::Resolver::Base","Bundler/Resolver/Base.html#method-i-pins","(names)",""],["plain_specs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-plain_specs","()",""],["plain_specs=","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-plain_specs-3D","(specs)",""],["platform","Bundler::CLI","Bundler/CLI.html#method-i-platform","()",""],["platform","Bundler::Dsl","Bundler/Dsl.html#method-i-platform","(*platforms)",""],["platform_specific!","Bundler::Resolver::Candidate","Bundler/Resolver/Candidate.html#method-i-platform_specific-21","()",""],["platform_specificity_match","Bundler::GemHelpers","Bundler/GemHelpers.html#method-i-platform_specificity_match","(spec_platform, user_platform)",""],["platform_specificity_match","Bundler::GemHelpers","Bundler/GemHelpers.html#method-c-platform_specificity_match","(spec_platform, user_platform)",""],["platform_version_match","Bundler::GemHelpers::PlatformMatch","Bundler/GemHelpers/PlatformMatch.html#method-c-platform_version_match","(spec_platform, user_platform)",""],["platforms","Bundler::Dsl","Bundler/Dsl.html#method-i-platforms","(*platforms)",""],["platforms_match?","Bundler::MatchPlatform","Bundler/MatchPlatform.html#method-c-platforms_match-3F","(gemspec_platform, local_platform)",""],["plugin","Bundler::Dsl","Bundler/Dsl.html#method-i-plugin","(*args)",""],["plugin","Bundler::Plugin::DSL","Bundler/Plugin/DSL.html#method-i-plugin","(name, *args)",""],["plugin_commands","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-plugin_commands","(plugin)",""],["plugin_path","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-plugin_path","(name)",""],["pool_available","Bundler::ConnectionPool::Wrapper","Bundler/ConnectionPool/Wrapper.html#method-i-pool_available","()",""],["pool_shutdown","Bundler::ConnectionPool::Wrapper","Bundler/ConnectionPool/Wrapper.html#method-i-pool_shutdown","(&block)",""],["pool_size","Bundler::ConnectionPool::Wrapper","Bundler/ConnectionPool/Wrapper.html#method-i-pool_size","()",""],["pop","Bundler::ConnectionPool::TimedStack","Bundler/ConnectionPool/TimedStack.html#method-i-pop","(timeout = 0.5, options = {})","<p>Retrieves a connection from the stack.  If a connection is available it is immediately returned.  If …\n"],["pop","Bundler::Thor::NestedContext","Bundler/Thor/NestedContext.html#method-i-pop","()",""],["port=","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-port-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["positive?","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-positive-3F","()",""],["post_install","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-post_install","(spec, disable_exts = false)","<p>It builds extensions, generates bins and installs them for the spec provided.\n<p>It depends on ‘spec.loaded_from` …\n"],["post_install","Bundler::Source::Path::Installer","Bundler/Source/Path/Installer.html#method-i-post_install","()",""],["post_install_message","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-post_install_message","()","<p>needed for post_install_messages during install\n"],["post_reset_hooks","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-post_reset_hooks","()",""],["post_sort","Bundler::GemVersionPromoter","Bundler/GemVersionPromoter.html#method-i-post_sort","(result, unlock, locked_version)","<p>Specific version moves can’t always reliably be done during sorting as not all elements are compared …\n"],["pre?","Bundler::GemVersionPromoter","Bundler/GemVersionPromoter.html#method-i-pre-3F","()","<p>@return [bool] Convenience method for testing value of pre variable.\n"],["pre_install_checks","Bundler::RubyGemsGemInstaller","Bundler/RubyGemsGemInstaller.html#method-i-pre_install_checks","()",""],["precompute_source_requirements_for_indirect_dependencies?","Bundler::Definition","Bundler/Definition.html#method-i-precompute_source_requirements_for_indirect_dependencies-3F","()",""],["preferred_gemfile_name","Bundler","Bundler.html#method-c-preferred_gemfile_name","()",""],["prepare_dependencies","Bundler::Resolver","Bundler/Resolver.html#method-i-prepare_dependencies","(requirements, packages)",""],["prepare_extension_build","Bundler::RubyGemsGemInstaller","Bundler/RubyGemsGemInstaller.html#method-i-prepare_extension_build","(extension_dir)",""],["prepare_message","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-prepare_message","(message, *color)",""],["prepend_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-prepend_file","(path, *args, &block)",""],["prepend_to_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-prepend_to_file","(path, *args, &block)","<p>Prepend text to a file. Since it depends on insert_into_file, it’s reversible.\n<p>Parameters\n<p>path&lt;String&gt; … &mdash; "],["prerelease?","Bundler::Resolver::Candidate","Bundler/Resolver/Candidate.html#method-i-prerelease-3F","()",""],["prerelease_specified?","Bundler::Resolver::Package","Bundler/Resolver/Package.html#method-i-prerelease_specified-3F","()",""],["pretty_dep","Bundler::Definition","Bundler/Definition.html#method-i-pretty_dep","(dep)",""],["pretty_dependency","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-pretty_dependency","(dep)",""],["pretty_print","Bundler::PubGrub::Incompatibility","Bundler/PubGrub/Incompatibility.html#method-i-pretty_print","(q)",""],["pretty_values_for","Bundler::Settings","Bundler/Settings.html#method-i-pretty_values_for","(exposed_key)",""],["previous_spec","Bundler::GemInstaller","Bundler/GemInstaller.html#method-i-previous_spec","()",""],["print_command","Bundler::CLI","Bundler/CLI.html#method-i-print_command","()",""],["print_gem","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-print_gem","(current_spec, active_spec, dependency, groups)",""],["print_gem_info","Bundler::CLI::Info","Bundler/CLI/Info.html#method-i-print_gem_info","(spec)",""],["print_gem_path","Bundler::CLI::Info","Bundler/CLI/Info.html#method-i-print_gem_path","(spec)",""],["print_gem_version","Bundler::CLI::Info","Bundler/CLI/Info.html#method-i-print_gem_version","(spec)",""],["print_gems","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-print_gems","(gems_list)",""],["print_gems_table","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-print_gems_table","(gems_list)",""],["print_in_columns","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-print_in_columns","(array)","<p>Prints values in columns\n<p>Parameters\n<p>Array[String, String, …]\n"],["print_indented","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-print_indented","(matrix)",""],["print_major_deprecations!","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-print_major_deprecations-21","()",""],["print_options","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-print_options","(shell, options, group_name = nil)","<p>Receives a set of options and print them.\n"],["print_post_install_message","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-print_post_install_message","(name, msg)",""],["print_table","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-print_table","(array, options = {})","<p>Prints a table.\n<p>Parameters\n<p>Array[Array[String, String, …]]\n"],["print_using_message","Bundler::Source","Bundler/Source.html#method-i-print_using_message","(message)",""],["print_wrapped","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-print_wrapped","(message, options = {})","<p>Prints a long string, word-wrapping the text to the current width of the terminal display. Ideal for …\n"],["printable_commands","Bundler::Thor","Bundler/Thor.html#method-c-printable_commands","(all = true, subcommand = false)","<p>Returns commands ready to be printed.\n"],["printable_commands","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-printable_commands","(*)","<p>Returns commands ready to be printed.\n"],["printable_tasks","Bundler::Thor","Bundler/Thor.html#method-c-printable_tasks","(all = true, subcommand = false)",""],["printable_tasks","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-printable_tasks","(*)",""],["printable_value","Bundler::Settings","Bundler/Settings.html#method-i-printable_value","(value, key)",""],["prints_major_deprecations?","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-prints_major_deprecations-3F","()",""],["pristine","Bundler::CLI","Bundler/CLI.html#method-i-pristine","(*gems)",""],["private_key=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-private_key-3D","(key)","<p>Sets this client’s SSL private key\n"],["private_method?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-private_method-3F","(instance)",""],["private_method?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-private_method-3F","(instance)",""],["probe_writtable_socket","Bundler::Settings::TCPSocketProbe","Bundler/Settings/TCPSocketProbe.html#method-i-probe_writtable_socket","(socket, address)",""],["proc","Bundler::SafeMarshal","Bundler/SafeMarshal.html#method-c-proc","()",""],["process_queue","Bundler::Worker","Bundler/Worker.html#method-i-process_queue","(i)",""],["process_specs","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-i-process_specs","()","<p>Dequeue a spec and save its post-install message and then enqueue the remaining specs. Some specs might’ve …\n"],["process_title","Bundler::CLI::Exec","Bundler/CLI/Exec.html#method-i-process_title","(file, args)",""],["processor_count","Bundler::Settings","Bundler/Settings.html#method-i-processor_count","()",""],["propagate","Bundler::PubGrub::VersionSolver","Bundler/PubGrub/VersionSolver.html#method-i-propagate","(initial_package)",""],["propagate_incompatibility","Bundler::PubGrub::VersionSolver","Bundler/PubGrub/VersionSolver.html#method-i-propagate_incompatibility","(incompatibility)",""],["provides?","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-provides-3F","(req_str)",""],["proxy=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-proxy-3D","(proxy)","<p>Sets the proxy server.  The <code>proxy</code> may be the Bundler::URI of the proxy server, the symbol <code>:ENV</code> which …\n"],["proxy_bypass?","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-proxy_bypass-3F","(host, port)","<p>Returns true when proxy should by bypassed for host.\n"],["proxy_from_env","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-proxy_from_env","()","<p>Creates a Bundler::URI for an HTTP proxy server from ENV variables.\n<p>If <code>HTTP_PROXY</code> is set a proxy will …\n"],["prune_cache","Bundler::Runtime","Bundler/Runtime.html#method-i-prune_cache","(cache_path)",""],["prune_gem_cache","Bundler::Runtime","Bundler/Runtime.html#method-i-prune_gem_cache","(resolve, cache_path)",""],["prune_git_and_path_cache","Bundler::Runtime","Bundler/Runtime.html#method-i-prune_git_and_path_cache","(resolve, cache_path)",""],["public_command","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-public_command","(*names)","<p>Allows to use private methods from parent in child classes as commands.\n<p>Parameters\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">names</span><span class=\"ruby-operator\">&lt;</span><span class=\"ruby-constant\">Array</span><span class=\"ruby-operator\">&gt;</span><span class=\"ruby-operator\">::</span> <span class=\"ruby-constant\">Method</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["public_task","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-public_task","(*names)",""],["push","Bundler::ConnectionPool::TimedStack","Bundler/ConnectionPool/TimedStack.html#method-i-push","(obj, options = {})","<p>Returns <code>obj</code> to the stack.  <code>options</code> is ignored in TimedStack but may be used by subclasses that extend …\n"],["push","Bundler::Thor::NestedContext","Bundler/Thor/NestedContext.html#method-i-push","()",""],["pwd","Bundler::FileUtils","Bundler/FileUtils.html#method-i-pwd","()","<p>Returns a string containing the path to the current directory:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">pwd</span> <span class=\"ruby-comment\"># =&gt; &quot;/rdoc/fileutils&quot;</span>\n</pre>\n"],["pwd","Bundler::FileUtils","Bundler/FileUtils.html#method-c-pwd","()","<p>Returns a string containing the path to the current directory:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">pwd</span> <span class=\"ruby-comment\"># =&gt; &quot;/rdoc/fileutils&quot;</span>\n</pre>\n"],["pwd","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-pwd","()",""],["query=","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-query-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["quiet?","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-quiet-3F","()",""],["quiet?","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-quiet-3F","()",""],["raise_not_found!","Bundler::Resolver","Bundler/Resolver.html#method-i-raise_not_found-21","(package)",""],["rake_classes","Bundler::Thor::RakeCompat","Bundler/Thor/RakeCompat.html#method-c-rake_classes","()",""],["rake_namespace","Object","Object.html#method-i-rake_namespace","(name)",""],["ranges","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-ranges","()",""],["raw_require_paths","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-raw_require_paths","()",""],["rbx?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-rbx-3F","()",""],["read_binary","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-read_binary","(path)",""],["read_file","Bundler","Bundler.html#method-c-read_file","(file)",""],["read_file","Bundler::Env","Bundler/Env.html#method-c-read_file","(filename)",""],["readline","Bundler::Thor::LineEditor","Bundler/Thor/LineEditor.html#method-c-readline","(prompt, options = {})",""],["readline","Bundler::Thor::LineEditor::Basic","Bundler/Thor/LineEditor/Basic.html#method-i-readline","()",""],["readline","Bundler::Thor::LineEditor::Readline","Bundler/Thor/LineEditor/Readline.html#method-i-readline","()",""],["ready_to_enqueue?","Bundler::ParallelInstaller::SpecInstallation","Bundler/ParallelInstaller/SpecInstallation.html#method-i-ready_to_enqueue-3F","()",""],["reconnect","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-reconnect","()","<p>Forces reconnection of all HTTP connections, including TLS/SSL connections.\n"],["reconnect_ssl","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-reconnect_ssl","()","<p>Forces reconnection of only TLS/SSL connections.\n"],["redact_and_check_presence","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-redact_and_check_presence","(command)",""],["redefine_method","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-redefine_method","(klass, method, unbound_method = nil, &block)",""],["reformatted_help_args","Bundler::CLI","Bundler/CLI.html#method-c-reformatted_help_args","(args)","<p>Reformat the arguments passed to bundle that include a –help flag into the corresponding ‘bundle help …\n"],["refspec","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-refspec","()",""],["regexp","Bundler::URI","Bundler/URI.html#method-c-regexp","(schemes = nil)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">regexp</span>([<span class=\"ruby-identifier\">match_schemes</span>])\n</pre>\n<p>Args\n"],["register","Bundler::Thor","Bundler/Thor.html#method-c-register","(klass, subcommand_name, usage, description, options = {})","<p>Registers another Bundler::Thor subclass as a command.\n<p>Parameters\n<p>klass&lt;Class&gt; &mdash; Bundler::Thor subclass …\n"],["register_plugin","Bundler::Plugin","Bundler/Plugin.html#method-i-register_plugin","(name, spec, optional_plugin = false)","<p>Runs the plugins.rb file in an isolated namespace, records the plugin actions it registers for and then …\n"],["register_plugin","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-register_plugin","(name, path, load_paths, commands, sources, hooks)","<p>This function is to be called when a new plugin is installed. This function shall add the functions of …\n"],["register_scheme","Bundler::URI","Bundler/URI.html#method-c-register_scheme","(scheme, klass)","<p>Register the given <code>klass</code> to be instantiated when parsing URLs with the given <code>scheme</code>. Note that currently …\n"],["registry=","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-registry-3D","(v)",""],["relation","Bundler::PubGrub::PartialSolution","Bundler/PubGrub/PartialSolution.html#method-i-relation","(term)",""],["relation","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-relation","(other)",""],["relation","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-relation","(other)",""],["relative?","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-relative-3F","()","<p>Returns true if Bundler::URI does not have a scheme (e.g. http:// or https://) specified.\n"],["relative_matches","Bundler::Thor::LineEditor::Readline::PathCompletion","Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-i-relative_matches","()",""],["relative_path","Bundler::Source::Path","Bundler/Source/Path.html#method-i-relative_path","(path = self.path)",""],["relative_to_original_destination_root","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-relative_to_original_destination_root","(path, remove_dot = true)","<p>Returns the given path relative to the absolute root (ie, root where the script started).\n"],["release?","Bundler::BuildMetadata","Bundler/BuildMetadata.html#method-c-release-3F","()","<p>Whether this is an official release build of Bundler.\n"],["released?","Bundler::SelfManager","Bundler/SelfManager.html#method-i-released-3F","(version)",""],["reload","Bundler::ConnectionPool","Bundler/ConnectionPool.html#method-i-reload","(&block)","<p>Reloads the Bundler::ConnectionPool by passing each connection to <code>block</code> and then removing it the pool. …\n"],["remembered_flag_deprecation","Bundler::CLI","Bundler/CLI.html#method-i-remembered_flag_deprecation","(name)",""],["remembered_negative_flag_deprecation","Bundler::CLI","Bundler/CLI.html#method-i-remembered_negative_flag_deprecation","(name)",""],["remote!","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-remote-21","()","<p>Set internal representation to fetch the gems/specs from remote.\n<p>When this is called, the source should …\n"],["remote!","Bundler::Source","Bundler/Source.html#method-i-remote-21","()",""],["remote!","Bundler::Source::Path","Bundler/Source/Path.html#method-i-remote-21","()",""],["remote!","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-remote-21","()",""],["remote!","Bundler::SourceList","Bundler/SourceList.html#method-i-remote-21","()",""],["remote_names","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-remote_names","()",""],["remote_specs","Bundler::SelfManager","Bundler/SelfManager.html#method-i-remote_specs","()",""],["remote_specs","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-remote_specs","()",""],["remote_uri","Bundler::Fetcher","Bundler/Fetcher.html#method-i-remote_uri","()",""],["remote_uri","Bundler::Fetcher::Base","Bundler/Fetcher/Base.html#method-i-remote_uri","()",""],["remotes_for_spec","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-remotes_for_spec","(spec)",""],["remove","Bundler::CLI","Bundler/CLI.html#method-i-remove","(*gems)",""],["remove","Bundler::FileUtils","Bundler/FileUtils.html#method-i-remove","(list, force: nil, noop: nil, verbose: nil)",""],["remove","Bundler::FileUtils","Bundler/FileUtils.html#method-c-remove","(list, force: nil, noop: nil, verbose: nil)",""],["remove","Bundler::Injector","Bundler/Injector.html#method-c-remove","(gems, options = {})",""],["remove","Bundler::Injector","Bundler/Injector.html#method-i-remove","(gemfile_path, lockfile_path)","<p>@param [Pathname] gemfile_path The Gemfile from which to remove dependencies. @param [Pathname] lockfile_path …\n"],["remove_argument","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-remove_argument","(*names)","<p>Removes a previous defined argument. If :undefine is given, undefine accessors as well.\n<p>Parameters\n<p>names&lt;Array&gt; … &mdash; "],["remove_auth","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-remove_auth","(remote)",""],["remove_auth","Bundler::Source::Rubygems::Remote","Bundler/Source/Rubygems/Remote.html#method-i-remove_auth","(uri)",""],["remove_class_option","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-remove_class_option","(*names)","<p>Removes a previous defined class option.\n<p>Parameters\n<p>names&lt;Array&gt; &mdash; Class options to be removed\n"],["remove_command","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-remove_command","(*names)","<p>Removes a given command from this Bundler::Thor class. This is usually done if you are inheriting from …\n"],["remove_deps","Bundler::Injector","Bundler/Injector.html#method-i-remove_deps","(gemfile_path)","<p>evaluates a gemfile to remove the specified gem from it.\n"],["remove_dir","Bundler::FileUtils","Bundler/FileUtils.html#method-i-remove_dir","(path, force = false)","<p>Recursively removes the directory entry given by <code>path</code>, which should be the entry for a regular file, …\n"],["remove_dir","Bundler::FileUtils","Bundler/FileUtils.html#method-c-remove_dir","(path, force = false)","<p>Recursively removes the directory entry given by <code>path</code>, which should be the entry for a regular file, …\n"],["remove_dir","Bundler::Runtime","Bundler/Runtime.html#method-i-remove_dir","(dir, dry_run)",""],["remove_dir","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-remove_dir","(path, config = {})",""],["remove_entry","Bundler::FileUtils","Bundler/FileUtils.html#method-i-remove_entry","(path, force = false)","<p>Removes the entry given by <code>path</code>, which should be the entry for a regular file, a symbolic link, or a …\n"],["remove_entry","Bundler::FileUtils","Bundler/FileUtils.html#method-c-remove_entry","(path, force = false)","<p>Removes the entry given by <code>path</code>, which should be the entry for a regular file, a symbolic link, or a …\n"],["remove_entry_secure","Bundler::FileUtils","Bundler/FileUtils.html#method-i-remove_entry_secure","(path, force = false)","<p>Securely removes the entry given by <code>path</code>, which should be the entry for a regular file, a symbolic link, …\n"],["remove_entry_secure","Bundler::FileUtils","Bundler/FileUtils.html#method-c-remove_entry_secure","(path, force = false)","<p>Securely removes the entry given by <code>path</code>, which should be the entry for a regular file, a symbolic link, …\n"],["remove_file","Bundler::FileUtils","Bundler/FileUtils.html#method-i-remove_file","(path, force = false)","<p>Removes the file entry given by <code>path</code>, which should be the entry for a regular file or a symbolic link. …\n"],["remove_file","Bundler::FileUtils","Bundler/FileUtils.html#method-c-remove_file","(path, force = false)","<p>Removes the file entry given by <code>path</code>, which should be the entry for a regular file or a symbolic link. …\n"],["remove_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-remove_file","(path, config = {})","<p>Removes a file at the given location.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; path of the file to be changed\n"],["remove_gems_from_dependencies","Bundler::Injector","Bundler/Injector.html#method-i-remove_gems_from_dependencies","(builder, gems, gemfile_path)","<p>@param [Dsl]      builder Dsl object of current Gemfile. @param [Array]    gems Array of names of gems …\n"],["remove_gems_from_gemfile","Bundler::Injector","Bundler/Injector.html#method-i-remove_gems_from_gemfile","(gems, gemfile_path)","<p>@param [Array] gems            Array of names of gems to be removed. @param [Pathname] gemfile_path  …\n"],["remove_interrupt_handler","Bundler::Worker","Bundler/Worker.html#method-i-remove_interrupt_handler","()",""],["remove_invocation","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-remove_invocation","(*names)","<p>Remove a previously added invocation.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">remove_invocation</span> <span class=\"ruby-value\">:test_framework</span>\n</pre>\n"],["remove_nested_blocks","Bundler::Injector","Bundler/Injector.html#method-i-remove_nested_blocks","(gemfile, block_name)","<p>@param [Array] gemfile       Array of gemfile contents. @param [String] block_name   Name of block name …\n"],["remove_platform","Bundler::Definition","Bundler/Definition.html#method-i-remove_platform","(platform)",""],["remove_ruby_from_platforms_if_necessary!","Bundler::Definition","Bundler/Definition.html#method-i-remove_ruby_from_platforms_if_necessary-21","(dependencies)",""],["remove_task","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-remove_task","(*names)",""],["removed_specs","Bundler::Definition","Bundler/Definition.html#method-i-removed_specs","()",""],["replace!","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-replace-21","(oth)","<p>Replaces self by other Bundler::URI object.\n"],["replace_bin_path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-replace_bin_path","(specs_by_name)","<p>Used to make bin stubs that are not created by bundler work under bundler. The new Gem.bin_path only …\n"],["replace_entrypoints","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-replace_entrypoints","(specs)","<p>Replace or hook into RubyGems to provide a bundlerized view of the world.\n"],["replace_gem","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-replace_gem","(specs, specs_by_name)",""],["replace_sources!","Bundler::SourceList","Bundler/SourceList.html#method-i-replace_sources-21","(replacement_sources)","<p>Returns true if there are changes\n"],["replace_with_backup","Bundler::EnvironmentPreserver","Bundler/EnvironmentPreserver.html#method-i-replace_with_backup","()","<p>Replaces ‘ENV` with the bundler environment variables backed up\n"],["replies?","Bundler::Settings::TCPSocketProbe","Bundler/Settings/TCPSocketProbe.html#method-i-replies-3F","(mirror)",""],["report","Bundler::Env","Bundler/Env.html#method-c-report","(options = {})",""],["repository_for","Bundler::Resolver","Bundler/Resolver.html#method-i-repository_for","(package)",""],["request","Bundler::Fetcher::Downloader","Bundler/Fetcher/Downloader.html#method-i-request","(uri, headers)",""],["request","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-request","(uri, req = nil, &block)","<p>Makes a request on <code>uri</code>.  If <code>req</code> is nil a Net::HTTP::Get is performed against <code>uri</code>.\n<p>If a block is passed …\n"],["request_issue_report_for","Bundler::FriendlyErrors","Bundler/FriendlyErrors.html#method-i-request_issue_report_for","(e)",""],["request_uri","Bundler::URI::HTTP","Bundler/URI/HTTP.html#method-i-request_uri","()","<p>Description\n<p>Returns the full path for an HTTP request, as required by Net::HTTP::Get.\n<p>If the Bundler::URI …\n"],["request_uri","Bundler::URI::WS","Bundler/URI/WS.html#method-i-request_uri","()","<p>Description\n<p>Returns the full path for a WS Bundler::URI, as required by Net::HTTP::Get.\n<p>If the Bundler::URI …\n"],["requested_dependencies","Bundler::Definition","Bundler/Definition.html#method-i-requested_dependencies","()",""],["requested_groups","Bundler::Definition","Bundler/Definition.html#method-i-requested_groups","()",""],["requested_specs","Bundler::Definition","Bundler/Definition.html#method-i-requested_specs","()",""],["require","Bundler","Bundler.html#method-c-require","(*groups)","<p>Setups Bundler environment (see Bundler.setup) if it is not already set, and loads all gems from groups …\n"],["require","Bundler::Runtime","Bundler/Runtime.html#method-i-require","(*groups)",""],["require_path_or_force","Bundler::CLI::Clean","Bundler/CLI/Clean.html#method-i-require_path_or_force","()",""],["require_paths","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-require_paths","()","<p>needed for standalone, load required_paths from local gemspec after the gem is installed\n"],["require_thor_actions","Bundler","Bundler.html#method-c-require_thor_actions","()",""],["require_tree_for_spec","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-i-require_tree_for_spec","(spec)",""],["required_arguments_for","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-required_arguments_for","(klass, usage)","<p>Add usage with required arguments\n"],["required_arguments_for","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-required_arguments_for","(klass, usage)","<p>Add usage with required arguments\n"],["required_options","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-required_options","()",""],["required_options","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-required_options","()",""],["required_ruby_version","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-required_ruby_version","()",""],["required_ruby_version=","Gem::Specification","Gem/Specification.html#method-i-required_ruby_version-3D","(req)",""],["requirement_satisfied_by?","Bundler::Resolver","Bundler/Resolver.html#method-i-requirement_satisfied_by-3F","(requirement, spec)",""],["requirement_to_constraint","Bundler::PubGrub::RubyGems","Bundler/PubGrub/RubyGems.html#method-i-requirement_to_constraint","(package, requirement)",""],["requirement_to_range","Bundler::PubGrub::RubyGems","Bundler/PubGrub/RubyGems.html#method-i-requirement_to_range","(requirement)",""],["requirement_to_range","Bundler::Resolver","Bundler/Resolver.html#method-i-requirement_to_range","(requirement)",""],["requires_checkout?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-requires_checkout-3F","()",""],["reset","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-reset","(connection)","<p>Finishes then restarts the Net::HTTP <code>connection</code>\n"],["reset","Bundler::Plugin::Events","Bundler/Plugin/Events.html#method-c-reset","()",""],["reset","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-reset","()",""],["reset!","Bundler","Bundler.html#method-c-reset-21","()",""],["reset!","Bundler::Plugin","Bundler/Plugin.html#method-i-reset-21","()",""],["reset!","Bundler::PubGrub::PartialSolution","Bundler/PubGrub/PartialSolution.html#method-i-reset-21","()",""],["reset_paths!","Bundler","Bundler.html#method-c-reset_paths-21","()",""],["reset_rubygems!","Bundler","Bundler.html#method-c-reset_rubygems-21","()",""],["reset_settings_and_root!","Bundler","Bundler.html#method-c-reset_settings_and_root-21","()",""],["resolution_mode=","Bundler::Definition","Bundler/Definition.html#method-i-resolution_mode-3D","(options)",""],["resolution_packages","Bundler::Definition","Bundler/Definition.html#method-i-resolution_packages","()",""],["resolve","Bundler::Definition","Bundler/Definition.html#method-i-resolve","()","<p>Resolve all the dependencies specified in Gemfile. It ensures that dependencies that have been already …\n"],["resolve_conflict","Bundler::PubGrub::VersionSolver","Bundler/PubGrub/VersionSolver.html#method-i-resolve_conflict","(incompatibility)",""],["resolve_if_needed","Bundler::Installer","Bundler/Installer.html#method-i-resolve_if_needed","(options)","<p>returns whether or not a re-resolve was needed\n"],["resolve_name","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-resolve_name","(name)",""],["resolve_only_locally!","Bundler::Definition","Bundler/Definition.html#method-i-resolve_only_locally-21","()",""],["resolve_path","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-resolve_path","(path)",""],["resolve_remotely!","Bundler::Definition","Bundler/Definition.html#method-i-resolve_remotely-21","()",""],["resolve_update_version_from","Bundler::SelfManager","Bundler/SelfManager.html#method-i-resolve_update_version_from","(target)",""],["resolve_with_cache!","Bundler::Definition","Bundler/Definition.html#method-i-resolve_with_cache-21","()",""],["resolver","Bundler::Definition","Bundler/Definition.html#method-i-resolver","()",""],["respond_to?","Bundler::ConnectionPool::Wrapper","Bundler/ConnectionPool/Wrapper.html#method-i-respond_to-3F","(id, *args)",""],["respond_to?","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-respond_to-3F","(method, include_all = false)",""],["respond_to_missing?","Bundler::Plugin::API","Bundler/Plugin/API.html#method-i-respond_to_missing-3F","(name, include_private = false)",""],["restart_with","Bundler::SelfManager","Bundler/SelfManager.html#method-i-restart_with","(version)",""],["restart_with_locked_bundler_if_needed","Bundler::SelfManager","Bundler/SelfManager.html#method-i-restart_with_locked_bundler_if_needed","()",""],["restore","Bundler::EnvironmentPreserver","Bundler/EnvironmentPreserver.html#method-i-restore","()","<p>@return [Hash]\n"],["result","Bundler::PubGrub::VersionSolver","Bundler/PubGrub/VersionSolver.html#method-i-result","()",""],["retrieve_active_spec","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-retrieve_active_spec","(definition, current_spec)",""],["reverse_rubygems_kernel_mixin","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-reverse_rubygems_kernel_mixin","()",""],["reverse_rubygems_kernel_mixin","Bundler::Standalone","Bundler/Standalone.html#method-i-reverse_rubygems_kernel_mixin","()",""],["revision","Bundler::Source::Git","Bundler/Source/Git.html#method-i-revision","()",""],["revision","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-revision","()",""],["rg_extension_dir","Gem::Specification","Gem/Specification.html#method-i-rg_extension_dir","()",""],["rg_full_gem_path","Gem::Specification","Gem/Specification.html#method-i-rg_full_gem_path","()",""],["rg_loaded_from","Gem::Specification","Gem/Specification.html#method-i-rg_loaded_from","()",""],["rm","Bundler::FileUtils","Bundler/FileUtils.html#method-i-rm","(list, force: nil, noop: nil, verbose: nil)","<p>Removes entries at the paths in the given <code>list</code> (a single path or an array of paths) returns <code>list</code>, if …\n"],["rm","Bundler::FileUtils","Bundler/FileUtils.html#method-c-rm","(list, force: nil, noop: nil, verbose: nil)","<p>Removes entries at the paths in the given <code>list</code> (a single path or an array of paths) returns <code>list</code>, if …\n"],["rm_f","Bundler::FileUtils","Bundler/FileUtils.html#method-i-rm_f","(list, noop: nil, verbose: nil)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm</span>(<span class=\"ruby-identifier\">list</span>, <span class=\"ruby-value\">force:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-operator\">**</span><span class=\"ruby-identifier\">kwargs</span>)\n</pre>\n<p>Argument <code>list</code> (a single path or an array …\n"],["rm_f","Bundler::FileUtils","Bundler/FileUtils.html#method-c-rm_f","(list, noop: nil, verbose: nil)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm</span>(<span class=\"ruby-identifier\">list</span>, <span class=\"ruby-value\">force:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-operator\">**</span><span class=\"ruby-identifier\">kwargs</span>)\n</pre>\n<p>Argument <code>list</code> (a single path or an array …\n"],["rm_r","Bundler::FileUtils","Bundler/FileUtils.html#method-i-rm_r","(list, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Removes entries at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code>, if …\n"],["rm_r","Bundler::FileUtils","Bundler/FileUtils.html#method-c-rm_r","(list, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Removes entries at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code>, if …\n"],["rm_rf","Bundler","Bundler.html#method-c-rm_rf","(path)",""],["rm_rf","Bundler::FileUtils","Bundler/FileUtils.html#method-i-rm_rf","(list, noop: nil, verbose: nil, secure: nil)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm_r</span>(<span class=\"ruby-identifier\">list</span>, <span class=\"ruby-value\">force:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-operator\">**</span><span class=\"ruby-identifier\">kwargs</span>)\n</pre>\n<p>Argument <code>list</code> or its elements should …\n"],["rm_rf","Bundler::FileUtils","Bundler/FileUtils.html#method-c-rm_rf","(list, noop: nil, verbose: nil, secure: nil)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm_r</span>(<span class=\"ruby-identifier\">list</span>, <span class=\"ruby-value\">force:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-operator\">**</span><span class=\"ruby-identifier\">kwargs</span>)\n</pre>\n<p>Argument <code>list</code> or its elements should …\n"],["rmdir","Bundler::FileUtils","Bundler/FileUtils.html#method-i-rmdir","(list, parents: nil, noop: nil, verbose: nil)","<p>Removes directories at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code> …\n"],["rmdir","Bundler::FileUtils","Bundler/FileUtils.html#method-c-rmdir","(list, parents: nil, noop: nil, verbose: nil)","<p>Removes directories at the paths in the given <code>list</code> (a single path or an array of paths); returns <code>list</code> …\n"],["rmtree","Bundler::FileUtils","Bundler/FileUtils.html#method-i-rmtree","(list, noop: nil, verbose: nil, secure: nil)",""],["rmtree","Bundler::FileUtils","Bundler/FileUtils.html#method-c-rmtree","(list, noop: nil, verbose: nil, secure: nil)",""],["root","Bundler","Bundler.html#method-c-root","()",""],["root","Bundler::Plugin","Bundler/Plugin.html#method-i-root","()","<p>The directory root for all plugin related data\n<p>If run in an app, points to local root, in app_config_path …\n"],["root","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-root","()","<p>It is used to obtain the full_gem_path.\n<p>spec’s loaded_from path is expanded against this to get full_gem_path …\n"],["root","Bundler::Plugin::Installer::Git","Bundler/Plugin/Installer/Git.html#method-i-root","()",""],["root","Bundler::PubGrub::Package","Bundler/PubGrub/Package.html#method-c-root","()",""],["root","Bundler::PubGrub::StaticPackageSource::DSL","Bundler/PubGrub/StaticPackageSource/DSL.html#method-i-root","(deps:)",""],["root","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-root","()",""],["root","Bundler::Source::Path","Bundler/Source/Path.html#method-i-root","()",""],["root?","Bundler::PubGrub::Package","Bundler/PubGrub/Package.html#method-c-root-3F","(package)",""],["root?","Bundler::Resolver::Package","Bundler/Resolver/Package.html#method-i-root-3F","()",""],["root?","Bundler::Resolver::Root","Bundler/Resolver/Root.html#method-i-root-3F","()",""],["root_dependencies","Bundler::PubGrub::BasicPackageSource","Bundler/PubGrub/BasicPackageSource.html#method-i-root_dependencies","()","<p>Override me!\n<p>If not overridden, this will call dependencies_for with the root package.\n<p>Returns: Hash in …\n"],["root_dependencies","Bundler::PubGrub::StaticPackageSource","Bundler/PubGrub/StaticPackageSource.html#method-i-root_dependencies","()",""],["root_version","Bundler::PubGrub::Package","Bundler/PubGrub/Package.html#method-c-root_version","()",""],["rotate","Bundler::Digest","Bundler/Digest.html#method-c-rotate","(value, spaces)",""],["route_from","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-route_from","(oth)","<p>Args\n<p><code>oth</code> &mdash; Bundler::URI or String\n\n<p>Description\n"],["route_to","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-route_to","(oth)","<p>Args\n<p><code>oth</code> &mdash; Bundler::URI or String\n\n<p>Description\n"],["rubocop_version","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-rubocop_version","()",""],["ruby","Bundler::RubyDsl","Bundler/RubyDsl.html#method-i-ruby","(*ruby_version)",""],["ruby?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-ruby-3F","()",""],["ruby_command","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-ruby_command","()","<p>Return the path to the ruby interpreter taking into account multiple installations and windows extensions. …\n"],["ruby_engine","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-ruby_engine","()",""],["ruby_platform_materializes_to_ruby_platform?","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-ruby_platform_materializes_to_ruby_platform-3F","()","<p>For backwards compatibility with existing lockfiles, if the most specific locked platform is not a specific …\n"],["ruby_scope","Bundler","Bundler.html#method-c-ruby_scope","()",""],["ruby_shebang?","Bundler::CLI::Exec","Bundler/CLI/Exec.html#method-i-ruby_shebang-3F","(file)",""],["ruby_version","Bundler::Env","Bundler/Env.html#method-c-ruby_version","()",""],["rubygem_push","Bundler::GemHelper","Bundler/GemHelper.html#method-i-rubygem_push","(path)",""],["rubygems","Bundler","Bundler.html#method-c-rubygems","()",""],["rubygems_aggregate_class","Bundler::Plugin::SourceList","Bundler/Plugin/SourceList.html#method-i-rubygems_aggregate_class","()",""],["rubygems_aggregate_class","Bundler::SourceList","Bundler/SourceList.html#method-i-rubygems_aggregate_class","()",""],["rubygems_dir","Bundler::Plugin::Installer::Rubygems","Bundler/Plugin/Installer/Rubygems.html#method-i-rubygems_dir","()",""],["rubygems_dir","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-rubygems_dir","()",""],["rubygems_remotes","Bundler::SourceList","Bundler/SourceList.html#method-i-rubygems_remotes","()",""],["rubygems_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-rubygems_sources","()",""],["rule","Bundler::Settings::Validator","Bundler/Settings/Validator.html#method-c-rule","(keys, description, &blk)",""],["rules","Bundler::Settings::Validator","Bundler/Settings/Validator.html#method-c-rules","()",""],["run","Bundler::CLI::Add","Bundler/CLI/Add.html#method-i-run","()",""],["run","Bundler::CLI::Binstubs","Bundler/CLI/Binstubs.html#method-i-run","()",""],["run","Bundler::CLI::Cache","Bundler/CLI/Cache.html#method-i-run","()",""],["run","Bundler::CLI::Check","Bundler/CLI/Check.html#method-i-run","()",""],["run","Bundler::CLI::Clean","Bundler/CLI/Clean.html#method-i-run","()",""],["run","Bundler::CLI::Config::Base","Bundler/CLI/Config/Base.html#method-i-run","()",""],["run","Bundler::CLI::Console","Bundler/CLI/Console.html#method-i-run","()",""],["run","Bundler::CLI::Doctor","Bundler/CLI/Doctor.html#method-i-run","()",""],["run","Bundler::CLI::Exec","Bundler/CLI/Exec.html#method-i-run","()",""],["run","Bundler::CLI::Fund","Bundler/CLI/Fund.html#method-i-run","()",""],["run","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-run","()",""],["run","Bundler::CLI::Info","Bundler/CLI/Info.html#method-i-run","()",""],["run","Bundler::CLI::Init","Bundler/CLI/Init.html#method-i-run","()",""],["run","Bundler::CLI::Inject","Bundler/CLI/Inject.html#method-i-run","()",""],["run","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-run","()",""],["run","Bundler::CLI::Issue","Bundler/CLI/Issue.html#method-i-run","()",""],["run","Bundler::CLI::List","Bundler/CLI/List.html#method-i-run","()",""],["run","Bundler::CLI::Lock","Bundler/CLI/Lock.html#method-i-run","()",""],["run","Bundler::CLI::Open","Bundler/CLI/Open.html#method-i-run","()",""],["run","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-run","()",""],["run","Bundler::CLI::Platform","Bundler/CLI/Platform.html#method-i-run","()",""],["run","Bundler::CLI::Pristine","Bundler/CLI/Pristine.html#method-i-run","()",""],["run","Bundler::CLI::Remove","Bundler/CLI/Remove.html#method-i-run","()",""],["run","Bundler::CLI::Show","Bundler/CLI/Show.html#method-i-run","()",""],["run","Bundler::CLI::Update","Bundler/CLI/Update.html#method-i-run","()",""],["run","Bundler::CLI::Viz","Bundler/CLI/Viz.html#method-i-run","()",""],["run","Bundler::Graph::GraphVizClient","Bundler/Graph/GraphVizClient.html#method-i-run","()",""],["run","Bundler::Installer","Bundler/Installer.html#method-i-run","(options)","<p>Runs the install procedures for a specific Gemfile.\n<p>Firstly, this method will check to see if ‘Bundler.bundle_path` …\n"],["run","Bundler::Retry","Bundler/Retry.html#method-i-run","(&block)",""],["run","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-run","(command, config = {})","<p>Executes a command returning the contents of the command.\n<p>Parameters\n<p>command&lt;String&gt; &mdash; the command …\n"],["run","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-run","(instance, args = [])","<p>By default, a command invokes a method in the thor class. You can change this implementation to create …\n"],["run","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-run","(instance, args = [])","<p>By default, a command invokes a method in the thor class. You can change this implementation to create …\n"],["run","Bundler::Thor::DynamicCommand","Bundler/Thor/DynamicCommand.html#method-i-run","(instance, args = [])",""],["run","Bundler::Thor::DynamicCommand","Bundler/Thor/DynamicCommand.html#method-i-run","(instance, args = [])",""],["run_command","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-run_command","(*command, dir: nil)",""],["run_hooks","Bundler::Source::Path::Installer","Bundler/Source/Path/Installer.html#method-i-run_hooks","(type)",""],["run_ruby_script","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-run_ruby_script","(command, config = {})","<p>Executes a ruby script (taking into account WIN32 platform quirks).\n<p>Parameters\n<p>command&lt;String&gt; &mdash; the …\n"],["running?","Bundler::SelfManager","Bundler/SelfManager.html#method-i-running-3F","(version)",""],["running_older_than?","Bundler::SelfManager","Bundler/SelfManager.html#method-i-running_older_than-3F","(version)",""],["rust_builder_required_rubygems_version","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-rust_builder_required_rubygems_version","()",""],["safe_load_marshal","Bundler","Bundler.html#method-c-safe_load_marshal","(data)",""],["safe_unlink","Bundler::FileUtils","Bundler/FileUtils.html#method-i-safe_unlink","(list, noop: nil, verbose: nil)",""],["safe_unlink","Bundler::FileUtils","Bundler/FileUtils.html#method-c-safe_unlink","(list, noop: nil, verbose: nil)",""],["same_deps","Bundler::GemHelpers","Bundler/GemHelpers.html#method-i-same_deps","(spec, exemplary_spec)",""],["same_deps","Bundler::GemHelpers","Bundler/GemHelpers.html#method-c-same_deps","(spec, exemplary_spec)",""],["same_specificity","Bundler::GemHelpers","Bundler/GemHelpers.html#method-i-same_specificity","(platform, spec, exemplary_spec)",""],["same_specificity","Bundler::GemHelpers","Bundler/GemHelpers.html#method-c-same_specificity","(platform, spec, exemplary_spec)",""],["satisfier","Bundler::PubGrub::PartialSolution","Bundler/PubGrub/PartialSolution.html#method-i-satisfier","(term)",""],["satisfies?","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-satisfies-3F","(dependency)","<p>Does this locked specification satisfy <code>dependency</code>?\n<p>NOTE: Rubygems default requirement is “&gt;= 0”, …\n"],["satisfies?","Bundler::PubGrub::PartialSolution","Bundler/PubGrub/PartialSolution.html#method-i-satisfies-3F","(term)",""],["satisfies?","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-satisfies-3F","(other)",""],["save_index","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-save_index","()","<p>Should be called when any of the instance variables change. Stores the instance variables in YAML format. …\n"],["save_plugin","Bundler::Plugin","Bundler/Plugin.html#method-i-save_plugin","(name, spec, optional_plugin = false)","<p>Validates and registers a plugin.\n<p>@param [String] name the name of the plugin @param [Specification] spec …\n"],["save_plugins","Bundler::Plugin","Bundler/Plugin.html#method-i-save_plugins","(plugins, specs, optional_plugins = [])","<p>Post installation processing and registering with index\n<p>@param [Array&lt;String&gt;] plugins list to be …\n"],["say","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-say","(message = \"\", color = nil, force_new_line = (message.to_s !~ /( |\\t)\\Z/))","<p>Say (print) something to the user. If the sentence ends with a whitespace or tab character, a new line …\n"],["say","Bundler::UI::RGProxy","Bundler/UI/RGProxy.html#method-i-say","(message)",""],["say_error","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-say_error","(message = \"\", color = nil, force_new_line = (message.to_s !~ /( |\\t)\\Z/))","<p>Say (print) an error to the user. If the sentence ends with a whitespace or tab character, a new line …\n"],["say_status","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-say_status","(status, message, log_status = true)","<p>Say a status with the given color and appends the message. Since this method is used frequently by actions, …\n"],["scheme=","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-scheme-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["scheme_list","Bundler::URI","Bundler/URI.html#method-c-scheme_list","()","<p>Returns a Hash of the defined schemes.\n"],["scope","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-scope","()","<p>Returns scope.\n"],["scope=","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-scope-3D","(val)","<p>Setter for scope <code>val</code>.\n"],["scope_options","Bundler::CLI::Config","Bundler/CLI/Config.html#method-c-scope_options","()",""],["search","Bundler::Index","Bundler/Index.html#method-i-search","(query)","<p>Search this index’s specs, and any source indexes that this index knows about, returning all of the …\n"],["search_all","Bundler::Index","Bundler/Index.html#method-i-search_all","(name)",""],["search_by_spec","Bundler::Index","Bundler/Index.html#method-i-search_by_spec","(spec)",""],["search_up","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-search_up","(*names)",""],["sections_in_lockfile","Bundler::LockfileParser","Bundler/LockfileParser.html#method-c-sections_in_lockfile","(lockfile_contents)",""],["sections_to_ignore","Bundler::LockfileParser","Bundler/LockfileParser.html#method-c-sections_to_ignore","(base_version = nil)",""],["security_policies","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-security_policies","()",""],["security_policy_keys","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-security_policy_keys","()",""],["segments","Bundler::Resolver::Candidate","Bundler/Resolver/Candidate.html#method-i-segments","()",""],["segments_do_not_match?","Bundler::GemVersionPromoter","Bundler/GemVersionPromoter.html#method-i-segments_do_not_match-3F","(a, b, level)",""],["select","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-select","(*components)","<p>Args\n<p><code>components</code> &mdash; Multiple Symbol arguments defined in Bundler::URI::HTTP.\n\n<p>Description\n"],["select_best_platform_match","Bundler::GemHelpers","Bundler/GemHelpers.html#method-i-select_best_platform_match","(specs, platform)",""],["select_best_platform_match","Bundler::GemHelpers","Bundler/GemHelpers.html#method-c-select_best_platform_match","(specs, platform)",""],["select_spec","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-select_spec","(name, regex_match = nil)",""],["select_versions","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-select_versions","(versions)","<p>Returns versions which are included by this range.\n<p>versions must be sorted\n"],["select_versions","Bundler::PubGrub::VersionRange::Empty","Bundler/PubGrub/VersionRange/Empty.html#method-i-select_versions","(_)",""],["select_versions","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-select_versions","(all_versions)",""],["self_manager","Bundler","Bundler.html#method-c-self_manager","()",""],["sequential_execution_mode!","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-i-sequential_execution_mode-21","()",""],["sequentially","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-i-sequentially","()",""],["serial_compact_index_client","Bundler::Fetcher::CompactIndex","Bundler/Fetcher/CompactIndex.html#method-i-serial_compact_index_client","()",""],["serialize_gemspecs_in","Bundler::Source::Git","Bundler/Source/Git.html#method-i-serialize_gemspecs_in","(destination)",""],["serialized_exception_for","Bundler::FriendlyErrors","Bundler/FriendlyErrors.html#method-i-serialized_exception_for","(e)",""],["set","Bundler::CLI::Config","Bundler/CLI/Config.html#method-i-set","(name, value, *value_)",""],["set","Bundler::Settings::Validator::Rule","Bundler/Settings/Validator/Rule.html#method-i-set","(settings, key, value, *reasons)",""],["set_attributes","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-set_attributes","(val)","<p>Private setter for attributes <code>val</code>.\n"],["set_bundle_environment","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-set_bundle_environment","()",""],["set_bundle_variables","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-set_bundle_variables","()",""],["set_color","Bundler::Thor::Shell::Color","Bundler/Thor/Shell/Color.html#method-i-set_color","(string, *colors)","<p>Set color by using a string or one of the defined constants. If a third option is set to true, it also …\n"],["set_color","Bundler::Thor::Shell::HTML","Bundler/Thor/Shell/HTML.html#method-i-set_color","(string, *colors)","<p>Set color by using a string or one of the defined constants. If a third option is set to true, it also …\n"],["set_command_option","Bundler::Settings","Bundler/Settings.html#method-i-set_command_option","(key, value)",""],["set_command_option_if_given","Bundler::Settings","Bundler/Settings.html#method-i-set_command_option_if_given","(key, value)",""],["set_dn","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-set_dn","(val)","<p>Private setter for dn <code>val</code>.\n"],["set_env","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-set_env","(key, value)",""],["set_eoutvar","Bundler::Thor::Actions::CapturableERB","Bundler/Thor/Actions/CapturableERB.html#method-i-set_eoutvar","(compiler, eoutvar = \"_erbout\")",""],["set_extensions","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-set_extensions","(val)","<p>Private setter for extensions <code>val</code>.\n"],["set_filter","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-set_filter","(val)","<p>Private setter for filter <code>val</code>.\n"],["set_global","Bundler::Settings","Bundler/Settings.html#method-i-set_global","(key, value)",""],["set_headers","Bundler::URI::MailTo","Bundler/URI/MailTo.html#method-i-set_headers","(v)","<p>Private setter for headers <code>v</code>.\n"],["set_host","Bundler::URI::File","Bundler/URI/File.html#method-i-set_host","(v)","<p>Protected setter for the host component <code>v</code>.\n<p>See also Bundler::URI::Generic.host=.\n"],["set_host","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-set_host","(v)","<p>Protected setter for the host component <code>v</code>.\n<p>See also Bundler::URI::Generic.host=.\n"],["set_installed_by_version","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-set_installed_by_version","(spec, installed_by_version = Gem::VERSION)",""],["set_key","Bundler::Settings","Bundler/Settings.html#method-i-set_key","(raw_key, value, hash, file)",""],["set_local","Bundler::Settings","Bundler/Settings.html#method-i-set_local","(key, value)",""],["set_local!","Bundler::Source::Git","Bundler/Source/Git.html#method-i-set_local-21","(path)",""],["set_opaque","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-set_opaque","(v)","<p>Protected setter for the opaque component <code>v</code>.\n<p>See also Bundler::URI::Generic.opaque=.\n"],["set_password","Bundler::URI::File","Bundler/URI/File.html#method-i-set_password","(v)","<p>do nothing\n"],["set_password","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-set_password","(v)","<p>Protected setter for the password component <code>v</code>.\n<p>See also Bundler::URI::Generic.password=.\n"],["set_path","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-set_path","()",""],["set_path","Bundler::URI::FTP","Bundler/URI/FTP.html#method-i-set_path","(v)","<p>Private setter for the path of the Bundler::URI::FTP.\n"],["set_path","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-set_path","(v)","<p>Protected setter for the path component <code>v</code>.\n<p>See also Bundler::URI::Generic.path=.\n"],["set_port","Bundler::URI::File","Bundler/URI/File.html#method-i-set_port","(v)","<p>do nothing\n"],["set_port","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-set_port","(v)","<p>Protected setter for the port component <code>v</code>.\n<p>See also Bundler::URI::Generic.port=.\n"],["set_rubylib","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-set_rubylib","()",""],["set_rubyopt","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-set_rubyopt","()",""],["set_scheme","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-set_scheme","(v)","<p>Protected setter for the scheme component <code>v</code>.\n<p>See also Bundler::URI::Generic.scheme=.\n"],["set_scope","Bundler::URI::LDAP","Bundler/URI/LDAP.html#method-i-set_scope","(val)","<p>Private setter for scope <code>val</code>.\n"],["set_to","Bundler::URI::MailTo","Bundler/URI/MailTo.html#method-i-set_to","(v)","<p>Private setter for to <code>v</code>.\n"],["set_typecode","Bundler::URI::FTP","Bundler/URI/FTP.html#method-i-set_typecode","(v)","<p>Private setter for the typecode <code>v</code>.\n<p>See also Bundler::URI::FTP.typecode=.\n"],["set_user","Bundler::URI::File","Bundler/URI/File.html#method-i-set_user","(v)","<p>do nothing\n"],["set_user","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-set_user","(v)","<p>Protected setter for the user component <code>v</code>.\n<p>See also Bundler::URI::Generic.user=.\n"],["set_userinfo","Bundler::URI::File","Bundler/URI/File.html#method-i-set_userinfo","(v)","<p>do nothing\n"],["set_userinfo","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-set_userinfo","(user, password = nil)","<p>Protected setter for the <code>user</code> component, and <code>password</code> if available (with validation).\n<p>See also Bundler::URI::Generic.userinfo= …\n"],["settings","Bundler","Bundler.html#method-c-settings","()",""],["settings_flag","Bundler::FeatureFlag","Bundler/FeatureFlag.html#method-c-settings_flag","(flag, &default)",""],["settings_method","Bundler::FeatureFlag","Bundler/FeatureFlag.html#method-c-settings_method","(name, key, &default)",""],["settings_option","Bundler::FeatureFlag","Bundler/FeatureFlag.html#method-c-settings_option","(key, &default)",""],["setup","Bundler","Bundler.html#method-c-setup","(*groups)","<p>Turns on the Bundler runtime. After <code>Bundler.setup</code> call, all <code>load</code> or <code>require</code> of the gems would be allowed …\n"],["setup","Bundler::Runtime","Bundler/Runtime.html#method-i-setup","(*groups)",""],["setup_cache_all","Bundler::CLI::Cache","Bundler/CLI/Cache.html#method-i-setup_cache_all","()",""],["setup_manpath","Bundler::Runtime","Bundler/Runtime.html#method-i-setup_manpath","()",""],["setup_solver","Bundler::Resolver","Bundler/Resolver.html#method-i-setup_solver","()",""],["setup_sources_for_resolve","Bundler::Definition","Bundler/Definition.html#method-i-setup_sources_for_resolve","()",""],["sh","Bundler::GemHelper","Bundler/GemHelper.html#method-i-sh","(cmd, &block)",""],["sh_with_input","Bundler::GemHelper","Bundler/GemHelper.html#method-i-sh_with_input","(cmd)",""],["sh_with_status","Bundler::GemHelper","Bundler/GemHelper.html#method-i-sh_with_status","(cmd, &block)",""],["sha1","Bundler::Digest","Bundler/Digest.html#method-c-sha1","(string)",""],["shell","Bundler::Thor::Base","Bundler/Thor/Base.html#method-c-shell","()","<p>Returns the shell used in all Bundler::Thor classes. If you are in a Unix platform it will use a colored …\n"],["shell","Bundler::Thor::Shell","Bundler/Thor/Shell.html#method-i-shell","()","<p>Holds the shell for the given Bundler::Thor instance. If no shell is given, it gets a default shell from …\n"],["shortref_for_display","Bundler::Source::Git","Bundler/Source/Git.html#method-i-shortref_for_display","(ref)",""],["shortref_for_path","Bundler::Source::Git","Bundler/Source/Git.html#method-i-shortref_for_path","(ref)",""],["should_include?","Bundler::Dependency","Bundler/Dependency.html#method-i-should_include-3F","()",""],["show","Bundler::CLI","Bundler/CLI.html#method-i-show","(gem_name = nil)",""],["show_pretty_values_for","Bundler::CLI::Config::Base","Bundler/CLI/Config/Base.html#method-i-show_pretty_values_for","(setting)",""],["show_warning","Bundler::Injector","Bundler/Injector.html#method-i-show_warning","(message)",""],["shutdown","Bundler::ConnectionPool","Bundler/ConnectionPool.html#method-i-shutdown","(&block)","<p>Shuts down the Bundler::ConnectionPool by passing each connection to <code>block</code> and then removing it from …\n"],["shutdown","Bundler::ConnectionPool::TimedStack","Bundler/ConnectionPool/TimedStack.html#method-i-shutdown","(reload: false, &block)","<p>Shuts down the TimedStack by passing each connection to <code>block</code> and then removing it from the pool. Attempting …\n"],["shutdown","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-shutdown","()","<p>Shuts down all connections\n<p><strong>NOTE</strong>: Calling shutdown for can be dangerous!\n<p>If any thread is still using a …\n"],["shutdown_connections","Bundler::ConnectionPool::TimedStack","Bundler/ConnectionPool/TimedStack.html#method-i-shutdown_connections","(options = nil)","<p>This is an extension point for TimedStack and is called with a mutex.\n<p>This method must shut down all connections …\n"],["silence","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-silence","(&blk)",""],["silence","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-silence","()",""],["similar_word_list","Bundler::SimilarityDetector","Bundler/SimilarityDetector.html#method-i-similar_word_list","(word, limit = 3)","<p>return the result of ‘similar_words’, concatenated into a list (eg “a, b, or c”)\n"],["similar_words","Bundler::SimilarityDetector","Bundler/SimilarityDetector.html#method-i-similar_words","(word, limit = 3)","<p>return an array of words similar to ‘word’ from the corpus\n"],["single_line?","Bundler::PubGrub::FailureWriter","Bundler/PubGrub/FailureWriter.html#method-i-single_line-3F","(cause)",""],["single_version_string","Bundler::RubyVersion","Bundler/RubyVersion.html#method-i-single_version_string","()",""],["size","Bundler::Index","Bundler/Index.html#method-i-size","()",""],["size","Bundler::SpecSet","Bundler/SpecSet.html#method-i-size","()",""],["skip","Bundler::Deprecate","Bundler/Deprecate.html#method-c-skip","()",""],["skip=","Bundler::Deprecate","Bundler/Deprecate.html#method-c-skip-3D","(skip)",""],["skip_during","Bundler::Deprecate","Bundler/Deprecate.html#method-c-skip_during","()",""],["slice_body","Bundler::CompactIndexClient::Updater","Bundler/CompactIndexClient/Updater.html#method-i-slice_body","(body, range)",""],["snake_case","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-snake_case","(str)","<p>Receives a string and convert it to snake case. SnakeCase returns snake_case.\n<p>Parameters\n<p>String\n"],["solve","Bundler::PubGrub::VersionSolver","Bundler/PubGrub/VersionSolver.html#method-i-solve","()",""],["solve_versions","Bundler::Resolver","Bundler/Resolver.html#method-i-solve_versions","(root:, logger:)",""],["solved?","Bundler::PubGrub::VersionSolver","Bundler/PubGrub/VersionSolver.html#method-i-solved-3F","()",""],["sort!","Bundler::SpecSet","Bundler/SpecSet.html#method-i-sort-21","()",""],["sort_best_platform_match","Bundler::GemHelpers","Bundler/GemHelpers.html#method-i-sort_best_platform_match","(matching, platform)",""],["sort_best_platform_match","Bundler::GemHelpers","Bundler/GemHelpers.html#method-c-sort_best_platform_match","(matching, platform)",""],["sort_dep_specs","Bundler::GemVersionPromoter","Bundler/GemVersionPromoter.html#method-i-sort_dep_specs","(specs, package)",""],["sort_obj","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-sort_obj","()","<p>Create a delegate used for sorting. This strategy is copied from RubyGems 2.23 and ensures that Bundler’s …\n"],["sort_obj","Bundler::Resolver::Candidate","Bundler/Resolver/Candidate.html#method-i-sort_obj","()",""],["sort_versions","Bundler::GemVersionPromoter","Bundler/GemVersionPromoter.html#method-i-sort_versions","(package, specs)","<p>Given a Resolver::Package and an Array of Specifications of available versions for a gem, this method …\n"],["sort_versions","Bundler::Resolver","Bundler/Resolver.html#method-i-sort_versions","(package, versions)",""],["sort_versions_by_preferred","Bundler::PubGrub::BasicPackageSource","Bundler/PubGrub/BasicPackageSource.html#method-i-sort_versions_by_preferred","(package, sorted_versions)","<p>Override me (maybe)\n<p>If not overridden, the order returned by all_versions_for will be used\n<p>Returns: Array …\n"],["sorted","Bundler::SpecSet","Bundler/SpecSet.html#method-i-sorted","()",""],["sorted_spec_names","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-sorted_spec_names","()",""],["source","Bundler::Dsl","Bundler/Dsl.html#method-i-source","(source, *args, &blk)",""],["source","Bundler::Plugin","Bundler/Plugin.html#method-i-source","(name)","<p>@return [Class] that handles the source. The class includes API::Source\n"],["source","Bundler::Plugin::API","Bundler/Plugin/API.html#method-c-source","(source, cls = self)","<p>The plugins should declare that they provide a installation source through this helper.\n<p>@param [String] …\n"],["source","Bundler::Plugin::DSL","Bundler/Plugin/DSL.html#method-i-source","(source, *args, &blk)",""],["source","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-source","()",""],["source","Gem::Specification","Gem/Specification.html#method-i-source","()",""],["source=","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-source-3D","(source)",""],["source?","Bundler::Plugin","Bundler/Plugin.html#method-i-source-3F","(name)","<p>Checks if any plugin declares the source\n"],["source?","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-source-3F","(source)",""],["source_for","Bundler::Resolver","Bundler/Resolver.html#method-i-source_for","(name)",""],["source_from_lock","Bundler::Plugin","Bundler/Plugin.html#method-i-source_from_lock","(locked_opts)","<p>@param [Hash] The options that are present in the lock file @return [API::Source] the instance of the …\n"],["source_list_for","Bundler::SourceList","Bundler/SourceList.html#method-i-source_list_for","(source)",""],["source_map","Bundler::Definition","Bundler/Definition.html#method-i-source_map","()",""],["source_paths","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-source_paths","()","<p>Holds source paths in instance so they can be manipulated.\n"],["source_paths","Bundler::Thor::Actions::ClassMethods","Bundler/Thor/Actions/ClassMethods.html#method-i-source_paths","()","<p>Hold source paths for one Bundler::Thor instance. source_paths_for_search is the method responsible to …\n"],["source_paths_for_search","Bundler::Thor::Actions::ClassMethods","Bundler/Thor/Actions/ClassMethods.html#method-i-source_paths_for_search","()","<p>Returns the source paths in the following order:\n\n<pre>1) This class source paths\n2) Source root\n3) Parents ...</pre>\n"],["source_plugin","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-source_plugin","(name)",""],["source_requirements","Bundler::Definition","Bundler/Definition.html#method-i-source_requirements","()",""],["source_root","Bundler::CLI","Bundler/CLI.html#method-c-source_root","()",""],["source_root","Bundler::Thor::Actions::ClassMethods","Bundler/Thor/Actions/ClassMethods.html#method-i-source_root","(path = nil)","<p>Stores and return the source root for this class\n"],["span","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-span","(other)","<p>The span covered by two ranges\n<p>If self and other are contiguous, this builds a union of the two ranges. …\n"],["spec","Bundler::RubyGemsGemInstaller","Bundler/RubyGemsGemInstaller.html#method-i-spec","()",""],["spec_cache_dirs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-spec_cache_dirs","()",""],["spec_for_dependency","Bundler::Graph","Bundler/Graph.html#method-i-spec_for_dependency","(dependency)",""],["spec_for_gem","Bundler::CLI::Info","Bundler/CLI/Info.html#method-i-spec_for_gem","(gem_name)",""],["spec_from_gem","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-spec_from_gem","(path)",""],["spec_git_paths","Bundler::Definition","Bundler/Definition.html#method-i-spec_git_paths","()",""],["spec_matches_for_glob","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-spec_matches_for_glob","(spec, glob)",""],["spec_missing_extensions?","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-spec_missing_extensions-3F","(spec, default = true)",""],["spec_names","Bundler::Index","Bundler/Index.html#method-i-spec_names","()",""],["spec_names","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-spec_names","()","<p>Used by definition.\n<p>Note: Do not override if you don’t know what you are doing.\n"],["spec_names","Bundler::Source","Bundler/Source.html#method-i-spec_names","()",""],["spec_names","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-spec_names","()",""],["spec_not_found","Bundler::CLI::Info","Bundler/CLI/Info.html#method-i-spec_not_found","(gem_name)",""],["spec_settings","Bundler::GemInstaller","Bundler/GemInstaller.html#method-i-spec_settings","()",""],["specific?","Bundler::Dependency","Bundler/Dependency.html#method-i-specific-3F","()",""],["specific_failure_message","Bundler::GemInstaller","Bundler/GemInstaller.html#method-i-specific_failure_message","(e)",""],["specific_gem_for","Bundler::Settings","Bundler/Settings.html#method-i-specific_gem_for","(name)",""],["specificity_score","Bundler::GemHelpers::PlatformMatch","Bundler/GemHelpers/PlatformMatch.html#method-c-specificity_score","(spec_platform, user_platform)",""],["specs","Bundler::Definition","Bundler/Definition.html#method-i-specs","()","<p>For given dependency list returns a SpecSet with Gemspec of all the required dependencies.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>. <span class=\"ruby-constant\">The</span> <span class=\"ruby-identifier\">method</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["specs","Bundler::Fetcher","Bundler/Fetcher.html#method-i-specs","(gem_names, source)","<p>return the specs in the bundler format as an index\n"],["specs","Bundler::Fetcher::CompactIndex","Bundler/Fetcher/CompactIndex.html#method-i-specs","(gem_names)",""],["specs","Bundler::Fetcher::Dependency","Bundler/Fetcher/Dependency.html#method-i-specs","(gem_names, full_dependency_list = [], last_spec_list = [])",""],["specs","Bundler::Fetcher::Index","Bundler/Fetcher/Index.html#method-i-specs","(_gem_names)",""],["specs","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-specs","()","<p>Parses the gemspec files to find the specs for the gems that can be satisfied by the source.\n<p>Few important …\n"],["specs","Bundler::Source::Git","Bundler/Source/Git.html#method-i-specs","(*)",""],["specs","Bundler::Source::Metadata","Bundler/Source/Metadata.html#method-i-specs","()",""],["specs","Bundler::Source::Path","Bundler/Source/Path.html#method-i-specs","()",""],["specs","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-specs","()",""],["specs","Bundler::Source::RubygemsAggregate","Bundler/Source/RubygemsAggregate.html#method-i-specs","()",""],["specs_by_name","Bundler::Index","Bundler/Index.html#method-i-specs_by_name","(name)",""],["specs_by_name_and_version","Bundler::Index","Bundler/Index.html#method-i-specs_by_name_and_version","(name, version)",""],["specs_changed?","Bundler::Definition","Bundler/Definition.html#method-i-specs_changed-3F","(source)","<p>Check if the specs of the given source changed according to the locked source.\n"],["specs_for","Bundler::Definition","Bundler/Definition.html#method-i-specs_for","(groups)",""],["specs_for_dependency","Bundler::SpecSet","Bundler/SpecSet.html#method-i-specs_for_dependency","(dep, platform)",""],["specs_for_names","Bundler::Fetcher::CompactIndex","Bundler/Fetcher/CompactIndex.html#method-i-specs_for_names","(gem_names)",""],["specs_for_source_changed?","Bundler::Definition","Bundler/Definition.html#method-i-specs_for_source_changed-3F","(source)",""],["specs_path","Bundler","Bundler.html#method-c-specs_path","()",""],["specs_with_retry","Bundler::Fetcher","Bundler/Fetcher.html#method-i-specs_with_retry","(gem_names, source)","<p>return the specs in the bundler format as an index with retries\n"],["spell_checker","UndefinedCommandError::SpellChecker","UndefinedCommandError/SpellChecker.html#method-i-spell_checker","()",""],["spell_checker","UnknownArgumentError::SpellChecker","UnknownArgumentError/SpellChecker.html#method-i-spell_checker","()",""],["split","Bundler::URI","Bundler/URI.html#method-c-split","(uri)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Bundler</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">split</span>(<span class=\"ruby-identifier\">uri</span>)\n</pre>\n<p>Args\n"],["split","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-split","(uri)","<p>Returns a split Bundler::URI against <code>regexp[:ABS_URI]</code>.\n"],["split","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-split","(uri)","<p>Returns a split Bundler::URI against <code>regexp[:ABS_URI]</code>.\n"],["split_path","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-split_path","(path)","<p>Returns an Array of the path split on ‘/’.\n"],["split_specific_setting_for","Bundler::Settings","Bundler/Settings.html#method-i-split_specific_setting_for","(name)",""],["split_userinfo","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-split_userinfo","(ui)","<p>Returns the userinfo <code>ui</code> as <code>[user, password]</code> if properly formatted as ‘user:password’.\n"],["ssl","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-ssl","(connection)","<p>Enables SSL on <code>connection</code>\n"],["ssl_timeout=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-ssl_timeout-3D","(ssl_timeout)","<p>SSL session lifetime\n"],["ssl_version=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-ssl_version-3D","(ssl_version)","<p>SSL version to use\n"],["standard_version","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-standard_version","()",""],["start","Bundler::CLI","Bundler/CLI.html#method-c-start","(*)",""],["start","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-start","(http)","<p>Starts the Net::HTTP <code>connection</code>\n"],["start","Bundler::Resolver","Bundler/Resolver.html#method-i-start","()",""],["start","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-start","(given_args = ARGV, config = {})","<p>Parses the command and options from the given args, instantiate the class and invoke the command. This …\n"],["start_resolution","Bundler::Definition","Bundler/Definition.html#method-i-start_resolution","()",""],["status_code","Bundler::BundlerError","Bundler/BundlerError.html#method-c-status_code","(code)",""],["status_code","Bundler::Dsl::DSLError","Bundler/Dsl/DSLError.html#method-i-status_code","()",""],["stderr","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-stderr","()",""],["stdout","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-stdout","()",""],["stop","Bundler::Worker","Bundler/Worker.html#method-i-stop","()",""],["stop_on_unknown_option!","Bundler::Thor","Bundler/Thor.html#method-c-stop_on_unknown_option-21","(*command_names)","<p>Stop parsing of options as soon as an unknown option or a regular argument is encountered.  All remaining …\n"],["stop_threads","Bundler::Worker","Bundler/Worker.html#method-i-stop_threads","()","<p>Stop the worker threads by sending a poison object down the request queue so as worker threads after …\n"],["store_connection","Bundler::ConnectionPool::TimedStack","Bundler/ConnectionPool/TimedStack.html#method-i-store_connection","(obj, options = nil)","<p>This is an extension point for TimedStack and is called with a mutex.\n<p>This method must return <code>obj</code> to the …\n"],["strict_args_position!","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-strict_args_position-21","()","<p>If you want only strict string args (useful when cascading thor classes), call strict_args_position! …\n"],["strict_rm_rf","Bundler::RubyGemsGemInstaller","Bundler/RubyGemsGemInstaller.html#method-i-strict_rm_rf","(dir)",""],["strictly_higher?","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-strictly_higher-3F","(other)",""],["strictly_lower?","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-strictly_lower-3F","(other)",""],["strip_leading_spaces","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-strip_leading_spaces","(text)",""],["strongly_connected_components","Bundler::TSort","Bundler/TSort.html#method-i-strongly_connected_components","()","<p>Returns strongly connected components as an array of arrays of nodes. The array is sorted from children …\n"],["strongly_connected_components","Bundler::TSort","Bundler/TSort.html#method-c-strongly_connected_components","(each_node, each_child)","<p>Returns strongly connected components as an array of arrays of nodes. The array is sorted from children …\n"],["stub_rubygems","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-stub_rubygems","(specs)",""],["stub_set_spec","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-stub_set_spec","(stub, spec)",""],["subclass_files","Bundler::Thor::Base","Bundler/Thor/Base.html#method-c-subclass_files","()","<p>Returns the files where the subclasses are kept.\n<p>Returns\n<p>Hash[path&lt;String&gt; =&gt; Class]\n"],["subclasses","Bundler::Thor::Base","Bundler/Thor/Base.html#method-c-subclasses","()","<p>Returns the classes that inherits from Bundler::Thor or Bundler::Thor::Group.\n<p>Returns\n<p>Array\n"],["subcommand","Bundler::Thor","Bundler/Thor.html#method-c-subcommand","(subcommand, subcommand_class)",""],["subcommand_classes","Bundler::Thor","Bundler/Thor.html#method-c-subcommand_classes","()",""],["subcommand_help","Bundler::Thor","Bundler/Thor.html#method-c-subcommand_help","(cmd)",""],["subcommands","Bundler::Thor","Bundler/Thor.html#method-c-subcommands","()",""],["subset?","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-subset-3F","(other)",""],["subtask","Bundler::Thor","Bundler/Thor.html#method-c-subtask","(subcommand, subcommand_class)",""],["subtask_help","Bundler::Thor","Bundler/Thor.html#method-c-subtask_help","(cmd)",""],["subtasks","Bundler::Thor","Bundler/Thor.html#method-c-subtasks","()",""],["suffix_pattern","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-suffix_pattern","()",""],["supports_bundler_trampolining?","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-supports_bundler_trampolining-3F","()",""],["supports_cloning_with_no_tags?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-supports_cloning_with_no_tags-3F","()",""],["supports_fetching_unreachable_refs?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-supports_fetching_unreachable_refs-3F","()",""],["supports_minus_c?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-supports_minus_c-3F","()",""],["suppress_configured_credentials","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-suppress_configured_credentials","(remote)",""],["symlink","Bundler::FileUtils","Bundler/FileUtils.html#method-i-symlink","(src, dest, force: nil, relative: false, target_directory: true, noop: nil, verbose: nil)",""],["symlink","Bundler::FileUtils","Bundler/FileUtils.html#method-c-symlink","(src, dest, force: nil, relative: false, target_directory: true, noop: nil, verbose: nil)",""],["synchronize","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-i-synchronize","()",""],["system","Bundler::RubyVersion","Bundler/RubyVersion.html#method-c-system","()",""],["system_bindir","Bundler","Bundler.html#method-c-system_bindir","()",""],["table_header","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-table_header","()",""],["tag_prefix=","Bundler::GemHelper","Bundler/GemHelper.html#method-c-tag_prefix-3D","(prefix)",""],["tag_version","Bundler::GemHelper","Bundler/GemHelper.html#method-i-tag_version","()",""],["task","Object","Object.html#method-i-task","(*)",""],["task_help","Bundler::Thor","Bundler/Thor.html#method-c-task_help","(shell, command_name)",""],["tasks","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-tasks","()",""],["tell_err","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-tell_err","(message, color = nil, newline = nil)",""],["tell_me","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-tell_me","(msg, color = nil, newline = nil)","<p>valimism\n"],["template","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-template","(source, *args, &block)","<p>Gets an ERB template at the relative source, executes it and makes a copy at the relative destination. …\n"],["temporary","Bundler::Settings","Bundler/Settings.html#method-i-temporary","(update)",""],["terminal_width","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-terminal_width","()","<p>This code was copied from Rake, available under MIT-LICENSE Copyright © 2003, 2004 Jim Weirich\n"],["then","Bundler::ConnectionPool","Bundler/ConnectionPool.html#method-i-then","(options = {})",""],["thor","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-thor","(command, *args)","<p>Run a thor command. A hash of options can be given and it’s converted to switches.\n<p>Parameters\n<p>command&lt;String&gt; … &mdash; "],["thor_classes_in","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-thor_classes_in","(klass)","<p>Returns the thor classes declared inside the given class.\n"],["thor_root","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-thor_root","()","<p>Returns the root where thor files are located, depending on the OS.\n"],["thor_root_glob","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-thor_root_glob","()","<p>Returns the files in the thor root. On Windows thor_root will be something like this:\n\n<pre>C:\\Documents and ...</pre>\n"],["tmp","Bundler","Bundler.html#method-c-tmp","(name = Process.pid.to_s)",""],["tmp","Bundler::Plugin::API","Bundler/Plugin/API.html#method-i-tmp","(*names)","<p>A tmp dir to be used by plugins Accepts names that get concatenated as suffix\n<p>@return [Pathname] object …\n"],["tmp_home_path","Bundler","Bundler.html#method-c-tmp_home_path","()",""],["to=","Bundler::URI::MailTo","Bundler/URI/MailTo.html#method-i-to-3D","(v)","<p>Setter for to <code>v</code>.\n"],["to_a","Bundler::SpecSet","Bundler/SpecSet.html#method-i-to_a","()",""],["to_array","Bundler::Settings","Bundler/Settings.html#method-i-to_array","(value)",""],["to_ary","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-to_ary","()",""],["to_bool","Bundler::Settings","Bundler/Settings.html#method-i-to_bool","(value)",""],["to_definition","Bundler::Dsl","Bundler/Dsl.html#method-i-to_definition","(lockfile, unlock)",""],["to_dependency_hash","Bundler::Resolver","Bundler/Resolver.html#method-i-to_dependency_hash","(dependencies, packages)",""],["to_gemfile","Bundler::Source::Git","Bundler/Source/Git.html#method-i-to_gemfile","()",""],["to_gemfile","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-to_gemfile","()",""],["to_gemfile","Gem::Specification","Gem/Specification.html#method-i-to_gemfile","(path = nil)",""],["to_h","Bundler::BuildMetadata","Bundler/BuildMetadata.html#method-c-to_h","()","<p>A hash representation of the build metadata.\n"],["to_hash","Bundler::SpecSet","Bundler/SpecSet.html#method-i-to_hash","()",""],["to_lock","Bundler::Definition","Bundler/Definition.html#method-i-to_lock","()",""],["to_lock","Bundler::Dependency","Bundler/Dependency.html#method-i-to_lock","()",""],["to_lock","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-to_lock","()",""],["to_lock","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-to_lock","()","<p>Generates the content to be entered into the lockfile. Saves type and remote and also calls to ‘options_to_lock`. …\n"],["to_lock","Bundler::Source::Git","Bundler/Source/Git.html#method-i-to_lock","()",""],["to_lock","Bundler::Source::Path","Bundler/Source/Path.html#method-i-to_lock","()",""],["to_lock","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-to_lock","()",""],["to_lock","Gem::Dependency","Gem/Dependency.html#method-i-to_lock","()",""],["to_mailtext","Bundler::URI::MailTo","Bundler/URI/MailTo.html#method-i-to_mailtext","()","<p>Returns the RFC822 e-mail text equivalent of the URL, as a String.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bundler/vendor/uri/lib/uri&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_rfc822text","Bundler::URI::MailTo","Bundler/URI/MailTo.html#method-i-to_rfc822text","()",""],["to_s","Bundler::Dsl::DSLError","Bundler/Dsl/DSLError.html#method-i-to_s","()","<p>The message of the exception reports the content of podspec for the line that generated the original …\n"],["to_s","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-to_s","()",""],["to_s","Bundler::ParallelInstaller::SpecInstallation","Bundler/ParallelInstaller/SpecInstallation.html#method-i-to_s","()",""],["to_s","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-to_s","()",""],["to_s","Bundler::PubGrub::Incompatibility","Bundler/PubGrub/Incompatibility.html#method-i-to_s","()",""],["to_s","Bundler::PubGrub::Package","Bundler/PubGrub/Package.html#method-i-to_s","()",""],["to_s","Bundler::PubGrub::SolveFailure","Bundler/PubGrub/SolveFailure.html#method-i-to_s","()",""],["to_s","Bundler::PubGrub::Term","Bundler/PubGrub/Term.html#method-i-to_s","(allow_every: false)",""],["to_s","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-to_s","(allow_every: false)",""],["to_s","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-to_s","()",""],["to_s","Bundler::PubGrub::VersionRange::Empty","Bundler/PubGrub/VersionRange/Empty.html#method-i-to_s","()",""],["to_s","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-to_s","()",""],["to_s","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-to_s","()",""],["to_s","Bundler::Resolver::Candidate","Bundler/Resolver/Candidate.html#method-i-to_s","()",""],["to_s","Bundler::Resolver::Package","Bundler/Resolver/Package.html#method-i-to_s","()",""],["to_s","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-to_s","()",""],["to_s","Bundler::RubyVersion","Bundler/RubyVersion.html#method-i-to_s","(versions = self.versions)",""],["to_s","Bundler::Source::Git","Bundler/Source/Git.html#method-i-to_s","()",""],["to_s","Bundler::Source::Metadata","Bundler/Source/Metadata.html#method-i-to_s","()",""],["to_s","Bundler::Source::Path","Bundler/Source/Path.html#method-i-to_s","()",""],["to_s","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-to_s","()",""],["to_s","Bundler::Source::Rubygems::Remote","Bundler/Source/Rubygems/Remote.html#method-i-to_s","()",""],["to_s","Bundler::Source::RubygemsAggregate","Bundler/Source/RubygemsAggregate.html#method-i-to_s","()",""],["to_s","Bundler::URI::FTP","Bundler/URI/FTP.html#method-i-to_s","()","<p>Returns a String representation of the Bundler::URI::FTP.\n"],["to_s","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-to_s","()","<p>Constructs String from Bundler::URI.\n"],["to_s","Bundler::URI::MailTo","Bundler/URI/MailTo.html#method-i-to_s","()","<p>Constructs String from Bundler::URI.\n"],["to_socket_address","Bundler::SocketAddress","Bundler/SocketAddress.html#method-i-to_socket_address","()",""],["to_specs","Bundler::Resolver::Candidate","Bundler/Resolver/Candidate.html#method-i-to_specs","(package)",""],["to_specs","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-to_specs","(force_ruby_platform)",""],["to_yaml","Bundler::StubSpecification","Bundler/StubSpecification.html#method-i-to_yaml","()",""],["to_yaml","Gem::Specification::YamlBackfiller","Gem/Specification/YamlBackfiller.html#method-i-to_yaml","(opts = {})",""],["to_yaml_properties","Gem::Dependency","Gem/Dependency.html#method-i-to_yaml_properties","()",""],["touch","Bundler::FileUtils","Bundler/FileUtils.html#method-i-touch","(list, noop: nil, verbose: nil, mtime: nil, nocreate: nil)","<p>Updates modification times (mtime) and access times (atime) of the entries given by the paths in <code>list</code> …\n"],["touch","Bundler::FileUtils","Bundler/FileUtils.html#method-c-touch","(list, noop: nil, verbose: nil, mtime: nil, nocreate: nil)","<p>Updates modification times (mtime) and access times (atime) of the entries given by the paths in <code>list</code> …\n"],["trace","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-trace","(e, newline = nil, force = false)",""],["trace","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-trace","(message, newline = nil, force = false)",""],["travis_removal_info","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-travis_removal_info","()","<p>TODO: remove at next minor release\n"],["truffleruby?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-truffleruby-3F","()",""],["truncate","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-truncate","(string, width)",""],["try_create","Bundler::ConnectionPool::TimedStack","Bundler/ConnectionPool/TimedStack.html#method-i-try_create","(options = nil)","<p>This is an extension point for TimedStack and is called with a mutex.\n<p>This method must create a connection …\n"],["tsort","Bundler::TSort","Bundler/TSort.html#method-i-tsort","()","<p>Returns a topologically sorted array of nodes. The array is sorted from children to parents, i.e. the …\n"],["tsort","Bundler::TSort","Bundler/TSort.html#method-c-tsort","(each_node, each_child)","<p>Returns a topologically sorted array of nodes. The array is sorted from children to parents, i.e. the …\n"],["tsort_each","Bundler::TSort","Bundler/TSort.html#method-i-tsort_each","()","<p>The iterator version of the #tsort method. <code><em>obj</em>.tsort_each</code> is similar to <code><em>obj</em>.tsort.each</code>, but modification …\n"],["tsort_each","Bundler::TSort","Bundler/TSort.html#method-c-tsort_each","(each_node, each_child)","<p>The iterator version of the Bundler::TSort.tsort method.\n<p>The graph is represented by <em>each_node</em> and <em>each_child</em> …\n"],["tsort_each_child","Bundler::SpecSet","Bundler/SpecSet.html#method-i-tsort_each_child","(s)",""],["tsort_each_child","Bundler::TSort","Bundler/TSort.html#method-i-tsort_each_child","(node)","<p>Should be implemented by a extended class.\n<p>#tsort_each_child is used to iterate for child nodes of <em>node</em> …\n"],["tsort_each_node","Bundler::SpecSet","Bundler/SpecSet.html#method-i-tsort_each_node","()",""],["tsort_each_node","Bundler::TSort","Bundler/TSort.html#method-i-tsort_each_node","()","<p>Should be implemented by a extended class.\n<p>#tsort_each_node is used to iterate for all nodes over a graph. …\n"],["typecode=","Bundler::URI::FTP","Bundler/URI/FTP.html#method-i-typecode-3D","(typecode)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["ui","Bundler","Bundler.html#method-c-ui","()",""],["ui=","Bundler","Bundler.html#method-c-ui-3D","(ui)",""],["ui=","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-ui-3D","(obj)",""],["unbundled_env","Bundler","Bundler.html#method-c-unbundled_env","()","<p>@return [Hash] Environment with all bundler-related variables removed\n"],["unbundled_exec","Bundler","Bundler.html#method-c-unbundled_exec","(*args)","<p>Run a ‘Kernel.exec` to a subcommand in an environment with all bundler related variables removed\n"],["unbundled_system","Bundler","Bundler.html#method-c-unbundled_system","(*args)","<p>Run subcommand in an environment with all bundler related variables removed\n"],["uncomment_lines","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-uncomment_lines","(path, flag, *args)","<p>Uncomment all lines matching a given regex.  It will leave the space which existed before the comment …\n"],["undo_replacements","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-undo_replacements","()",""],["unescape","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-unescape","(str)","<p>CGI::unescape wrapper\n"],["unescape","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-unescape","(str, escaped = @regexp[:ESCAPED])","<p>Args\n<p><code>str</code> &mdash; String to remove escapes from\n<p><code>escaped</code> &mdash; Regexp to apply. Defaults to <code>self.regexp[:ESCAPED]</code>\n"],["unescape","Bundler::URI::RFC2396_Parser","Bundler/URI/RFC2396_Parser.html#method-i-unescape","(str, escaped = @regexp[:ESCAPED])","<p>Args\n<p><code>str</code> &mdash; String to remove escapes from\n<p><code>escaped</code> &mdash; Regexp to apply. Defaults to <code>self.regexp[:ESCAPED]</code>\n"],["uninstall","Bundler::CLI::Plugin","Bundler/CLI/Plugin.html#method-i-uninstall","(*plugins)",""],["uninstall","Bundler::Plugin","Bundler/Plugin.html#method-i-uninstall","(names, options)","<p>Uninstalls plugins by the given names\n<p>@param [Array&lt;String&gt;] names the names of plugins to be uninstalled …\n"],["union","Bundler::PubGrub::VersionConstraint","Bundler/PubGrub/VersionConstraint.html#method-i-union","(other)",""],["union","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-union","(other)",""],["union","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-c-union","(ranges, normalize: true)",""],["union","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-union","(other)",""],["unix?","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-unix-3F","()",""],["unknown_sections_in_lockfile","Bundler::LockfileParser","Bundler/LockfileParser.html#method-c-unknown_sections_in_lockfile","(lockfile_contents)",""],["unlock!","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-unlock-21","()","<p>This is called to update the spec and installation.\n<p>If the source plugin is loaded from lockfile or otherwise, …\n"],["unlock!","Bundler::Source::Git","Bundler/Source/Git.html#method-i-unlock-21","()",""],["unlock?","Bundler::Resolver::Package","Bundler/Resolver/Package.html#method-i-unlock-3F","()",""],["unlock_names","Bundler::Resolver::Base","Bundler/Resolver/Base.html#method-i-unlock_names","(names)",""],["unlocking?","Bundler::Definition","Bundler/Definition.html#method-i-unlocking-3F","()",""],["unmarshalled_dep_gems","Bundler::Fetcher::Dependency","Bundler/Fetcher/Dependency.html#method-i-unmarshalled_dep_gems","(gem_names)",""],["unmet_dependency_names","Bundler::Index","Bundler/Index.html#method-i-unmet_dependency_names","()",""],["unmet_deps","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-unmet_deps","()","<p>Used by definition.\n<p>Note: Do not override if you don’t know what you are doing.\n"],["unmet_deps","Bundler::Source","Bundler/Source.html#method-i-unmet_deps","()",""],["unmet_deps","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-unmet_deps","()",""],["unprinted_warnings","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-unprinted_warnings","()",""],["unprinted_warnings","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-unprinted_warnings","()",""],["unregister_plugin","Bundler::Plugin::Index","Bundler/Plugin/Index.html#method-i-unregister_plugin","(name)",""],["unrestrict_names","Bundler::Resolver::Base","Bundler/Resolver/Base.html#method-i-unrestrict_names","(names)",""],["unsatisfied","Bundler::PubGrub::PartialSolution","Bundler/PubGrub/PartialSolution.html#method-i-unsatisfied","()","<p>A list of unsatisfied terms\n"],["unset","Bundler::CLI::Config","Bundler/CLI/Config.html#method-i-unset","(name)",""],["update","Bundler::CLI","Bundler/CLI.html#method-i-update","(*gems)",""],["update","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-i-update","(local_path, remote_path)",""],["update","Bundler::CompactIndexClient::Updater","Bundler/CompactIndexClient/Updater.html#method-i-update","(local_path, remote_path, retrying = nil)",""],["update_and_parse_checksums!","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-i-update_and_parse_checksums-21","()",""],["update_bundler_and_restart_with_it_if_needed","Bundler::SelfManager","Bundler/SelfManager.html#method-i-update_bundler_and_restart_with_it_if_needed","(target)",""],["update_info","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-i-update_info","(name)",""],["update_mirror","Bundler::Settings::MirrorConfig","Bundler/Settings/MirrorConfig.html#method-i-update_mirror","(mirror)",""],["update_present_via_semver_portions","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-update_present_via_semver_portions","(current_spec, active_spec, options)",""],["updating?","Bundler::SelfManager","Bundler/SelfManager.html#method-i-updating-3F","()",""],["upper_invert","Bundler::PubGrub::VersionRange","Bundler/PubGrub/VersionRange.html#method-i-upper_invert","()",""],["upper_invert","Bundler::PubGrub::VersionUnion","Bundler/PubGrub/VersionUnion.html#method-i-upper_invert","()",""],["uptodate?","Bundler::FileUtils","Bundler/FileUtils.html#method-i-uptodate-3F","(new, old_list)","<p>Returns <code>true</code> if the file at path <code>new</code> is newer than all the files at paths in array <code>old_list</code>; <code>false</code> otherwise. …\n"],["uptodate?","Bundler::FileUtils","Bundler/FileUtils.html#method-c-uptodate-3F","(new, old_list)","<p>Returns <code>true</code> if the file at path <code>new</code> is newer than all the files at paths in array <code>old_list</code>; <code>false</code> otherwise. …\n"],["uri","Bundler::Fetcher","Bundler/Fetcher.html#method-i-uri","()",""],["uri=","Bundler::Settings::Mirror","Bundler/Settings/Mirror.html#method-i-uri-3D","(uri)",""],["uri_hash","Bundler::Plugin::API::Source","Bundler/Plugin/API/Source.html#method-i-uri_hash","()",""],["uri_hash","Bundler::Source::Git","Bundler/Source/Git.html#method-i-uri_hash","()",""],["uri_with_specifiers","Bundler::Source::Git","Bundler/Source/Git.html#method-i-uri_with_specifiers","(specifiers)",""],["url","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-i-url","(path)",""],["use","Bundler::Index","Bundler/Index.html#method-i-use","(other, override_dupes = false)",""],["use_api","Bundler::Fetcher","Bundler/Fetcher.html#method-i-use_api","()",""],["use_exact_resolved_specifications?","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-use_exact_resolved_specifications-3F","()",""],["use_path_completion?","Bundler::Thor::LineEditor::Readline","Bundler/Thor/LineEditor/Readline.html#method-i-use_path_completion-3F","()",""],["use_system_gems?","Bundler","Bundler.html#method-c-use_system_gems-3F","()",""],["user","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-user","()","<p>Returns the user component (without Bundler::URI decoding).\n"],["user=","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-user-3D","(user)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["user_agent","Bundler::Fetcher","Bundler/Fetcher.html#method-i-user_agent","()",""],["user_bundle_path","Bundler","Bundler.html#method-c-user_bundle_path","(dir = \"home\")",""],["user_cache","Bundler","Bundler.html#method-c-user_cache","()",""],["user_home","Bundler","Bundler.html#method-c-user_home","()",""],["user_home","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-user_home","()",""],["user_home","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-user_home","()",""],["userinfo","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-userinfo","()","<p>Returns the userinfo, either as ‘user’ or ‘user:password’.\n"],["userinfo=","Bundler::URI::Generic","Bundler/URI/Generic.html#method-i-userinfo-3D","(userinfo)","<p>Sets userinfo, argument is string like ‘name:pass’.\n"],["valid?","Bundler::Settings::Mirror","Bundler/Settings/Mirror.html#method-i-valid-3F","()",""],["valid_keys","Bundler::Dsl","Bundler/Dsl.html#method-i-valid_keys","()",""],["validate","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-validate","(spec)",""],["validate!","Bundler::Settings","Bundler/Settings.html#method-i-validate-21","()",""],["validate!","Bundler::Settings::Mirror","Bundler/Settings/Mirror.html#method-i-validate-21","(probe = nil)",""],["validate!","Bundler::Settings::Validator","Bundler/Settings/Validator.html#method-c-validate-21","(key, value, settings)",""],["validate!","Bundler::Settings::Validator::Rule","Bundler/Settings/Validator/Rule.html#method-i-validate-21","(key, value, settings)",""],["validate_bundle_path","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-validate_bundle_path","()",""],["validate_bundler_checksum","Bundler::RubyGemsGemInstaller","Bundler/RubyGemsGemInstaller.html#method-i-validate_bundler_checksum","(checksum)",""],["validate_cmd!","Bundler::CLI::Exec","Bundler/CLI/Exec.html#method-i-validate_cmd-21","()",""],["validate_ext_name","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-validate_ext_name","()",""],["validate_keys","Bundler::Dsl","Bundler/Dsl.html#method-i-validate_keys","(command, opts, valid_keys)",""],["validate_options!","Bundler::CLI::Add","Bundler/CLI/Add.html#method-i-validate_options-21","()",""],["validate_platforms!","Bundler::Definition","Bundler/Definition.html#method-i-validate_platforms-21","()",""],["validate_plugin!","Bundler::Plugin","Bundler/Plugin.html#method-i-validate_plugin-21","(plugin_path)","<p>Checks if the gem is good to be a plugin\n<p>At present it only checks whether it contains plugins.rb file …\n"],["validate_ruby!","Bundler::Definition","Bundler/Definition.html#method-i-validate_ruby-21","()",""],["validate_runtime!","Bundler::Definition","Bundler/Definition.html#method-i-validate_runtime-21","()",""],["validate_rust_builder_rubygems_version","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-validate_rust_builder_rubygems_version","()",""],["validate_scope!","Bundler::CLI::Config::Base","Bundler/CLI/Config/Base.html#method-i-validate_scope-21","()",""],["validate_spec","Bundler::Source::Git","Bundler/Source/Git.html#method-i-validate_spec","(_spec)","<p>no-op, since we validate when re-serializing the gemspec\n"],["validate_spec","Bundler::Source::Path","Bundler/Source/Path.html#method-i-validate_spec","(spec)",""],["validate_uri_scheme!","Bundler::Fetcher::Downloader","Bundler/Fetcher/Downloader.html#method-i-validate_uri_scheme-21","(uri)",""],["value_for","Bundler::Settings","Bundler/Settings.html#method-i-value_for","(name, config)",""],["verbalize_groups","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-verbalize_groups","(groups)",""],["verify","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-verify","(reference)",""],["verify_callback=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-verify_callback-3D","(callback)","<p>SSL verification callback.\n"],["verify_changed_sources!","Bundler::Definition","Bundler/Definition.html#method-i-verify_changed_sources-21","()",""],["verify_depth=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-verify_depth-3D","(verify_depth)","<p>Sets the depth of SSL certificate verification\n"],["verify_group_exists","Bundler::CLI::List","Bundler/CLI/List.html#method-i-verify_group_exists","(groups)",""],["verify_mode=","Bundler::Persistent::Net::HTTP::Persistent","Bundler/Persistent/Net/HTTP/Persistent.html#method-i-verify_mode-3D","(verify_mode)","<p>Sets the HTTPS verify mode.  Defaults to OpenSSL::SSL::VERIFY_PEER.\n<p>Setting this to VERIFY_NONE is a  …\n"],["version","Bundler::CLI","Bundler/CLI.html#method-i-version","()",""],["version","Bundler::GemHelper","Bundler/GemHelper.html#method-i-version","()",""],["version","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-version","()",""],["version","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-version","()",""],["version","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-version","()",""],["version_color","Bundler::Source","Bundler/Source.html#method-i-version_color","(spec_version, locked_spec_version)",""],["version_dir","Bundler::Standalone","Bundler/Standalone.html#method-i-version_dir","()",""],["version_message","Bundler::Source","Bundler/Source.html#method-i-version_message","(spec, locked_spec = nil)",""],["version_message","Bundler::Source::Metadata","Bundler/Source/Metadata.html#method-i-version_message","(spec)",""],["version_of","Bundler::Env","Bundler/Env.html#method-c-version_of","(script)",""],["version_prefix","Bundler::Injector","Bundler/Injector.html#method-i-version_prefix","()",""],["version_tag","Bundler::GemHelper","Bundler/GemHelper.html#method-i-version_tag","()",""],["versions","Bundler::CompactIndexClient","Bundler/CompactIndexClient.html#method-i-versions","()",""],["versions","Bundler::CompactIndexClient::Cache","Bundler/CompactIndexClient/Cache.html#method-i-versions","()",""],["versions_for","Bundler::PubGrub::BasicPackageSource","Bundler/PubGrub/BasicPackageSource.html#method-i-versions_for","(package, range=VersionRange.any)",""],["versions_for","Bundler::Resolver","Bundler/Resolver.html#method-i-versions_for","(package, range=VersionRange.any)",""],["versions_path","Bundler::CompactIndexClient::Cache","Bundler/CompactIndexClient/Cache.html#method-i-versions_path","()",""],["versions_string","Bundler::RubyVersion","Bundler/RubyVersion.html#method-i-versions_string","(versions)",""],["visit","Bundler::PubGrub::FailureWriter","Bundler/PubGrub/FailureWriter.html#method-i-visit","(incompatibility, conclusion: false)",""],["viz","Bundler::CLI","Bundler/CLI.html#method-i-viz","()",""],["viz","Bundler::Graph","Bundler/Graph.html#method-i-viz","()",""],["wait_for_writtable_socket","Bundler::Settings::TCPSocketProbe","Bundler/Settings/TCPSocketProbe.html#method-i-wait_for_writtable_socket","(socket, address, timeout)",""],["warn","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-warn","(msg = nil, newline = nil, color = :yellow)",""],["warn","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-warn","(message = nil, newline = nil)",""],["warn?","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-warn-3F","()",""],["warn?","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-warn-3F","()",""],["warn_ambiguous_gems","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-warn_ambiguous_gems","()",""],["warn_if_root","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-warn_if_root","()",""],["warn_on_git_protocol","Bundler::SourceList","Bundler/SourceList.html#method-i-warn_on_git_protocol","(source)",""],["warn_on_outdated_bundler","Bundler::CLI","Bundler/CLI.html#method-i-warn_on_outdated_bundler","()",""],["warn_unused_scope","Bundler::CLI::Config::Base","Bundler/CLI/Config/Base.html#method-i-warn_unused_scope","(msg)",""],["what_required","Bundler::SpecSet","Bundler/SpecSet.html#method-i-what_required","(spec)",""],["which","Bundler","Bundler.html#method-c-which","(executable)",""],["windows?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-windows-3F","()",""],["with","Bundler::ConnectionPool","Bundler/ConnectionPool.html#method-i-with","(options = {})",""],["with","Bundler::ConnectionPool::Wrapper","Bundler/ConnectionPool/Wrapper.html#method-i-with","(&block)",""],["with_clean_env","Bundler","Bundler.html#method-c-with_clean_env","()","<p>@deprecated Use ‘with_unbundled_env` instead\n"],["with_clean_git_env","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-with_clean_git_env","(&block)",""],["with_env","Bundler","Bundler.html#method-c-with_env","(env)","<p>@param env [Hash]\n"],["with_friendly_errors","Bundler","Bundler.html#method-c-with_friendly_errors","()",""],["with_level","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-with_level","(level)",""],["with_original_env","Bundler","Bundler.html#method-c-with_original_env","()","<p>Run block with environment present before Bundler was activated\n"],["with_padding","Bundler::Thor::Shell","Bundler/Thor/Shell.html#method-i-with_padding","()","<p>Yields the given block with padding.\n"],["with_path","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-with_path","(&blk)",""],["with_source","Bundler::Dsl","Bundler/Dsl.html#method-i-with_source","(source)",""],["with_unbundled_env","Bundler","Bundler.html#method-c-with_unbundled_env","()","<p>Run block with all bundler-related variables removed\n"],["without_groups_message","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-without_groups_message","(command)",""],["word_wrap","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-word_wrap","(text, line_width = @shell.terminal_width)",""],["work","Bundler::PubGrub::VersionSolver","Bundler/PubGrub/VersionSolver.html#method-i-work","()","<p>Returns true if there is more work to be done, false otherwise\n"],["worker_pool","Bundler::ParallelInstaller","Bundler/ParallelInstaller.html#method-i-worker_pool","()",""],["wrap","Bundler::ConnectionPool","Bundler/ConnectionPool.html#method-c-wrap","(options, &block)",""],["wrapped_pool","Bundler::ConnectionPool::Wrapper","Bundler/ConnectionPool/Wrapper.html#method-i-wrapped_pool","()",""],["write","Bundler::Env","Bundler/Env.html#method-c-write","(io)",""],["write","Bundler::PubGrub::FailureWriter","Bundler/PubGrub/FailureWriter.html#method-i-write","()",""],["write_line","Bundler::PubGrub::FailureWriter","Bundler/PubGrub/FailureWriter.html#method-i-write_line","(incompatibility, message, numbered:)",""],["write_to_gemfile","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-write_to_gemfile","(gemfile_path, contents)",""],["x64_mingw?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-x64_mingw-3F","()",""],["yes?","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-yes-3F","(statement, color = nil)","<p>Make a question the to user and returns true if the user replies “y” or “yes”.\n"],["yes?","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-yes-3F","(msg)",""],["yes?","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-yes-3F","(msg)",""]]}}