var search_data = {"index":{"searchIndex":["io","generic_readable","generic_writable","stringio","<<()","binmode()","close()","close_read()","close_write()","closed?()","closed_read?()","closed_write?()","each()","each_byte()","each_char()","each_codepoint()","each_line()","eof()","eof?()","external_encoding()","fcntl()","fileno()","flush()","fsync()","getbyte()","getc()","gets()","internal_encoding()","isatty()","length()","lineno()","lineno=()","new()","open()","pid()","pos()","pos=()","print()","printf()","putc()","puts()","read()","read_nonblock()","readbyte()","readchar()","readline()","readlines()","readpartial()","reopen()","rewind()","seek()","set_encoding()","set_encoding_by_bom()","size()","string()","string=()","sync()","sync=()","sysread()","tell()","truncate()","tty?()","ungetbyte()","ungetc()","write()","write_nonblock()"],"longSearchIndex":["io","io::generic_readable","io::generic_writable","stringio","io::generic_writable#<<()","stringio#binmode()","stringio#close()","stringio#close_read()","stringio#close_write()","stringio#closed?()","stringio#closed_read?()","stringio#closed_write?()","stringio#each()","stringio#each_byte()","stringio#each_char()","stringio#each_codepoint()","stringio#each_line()","stringio#eof()","stringio#eof?()","stringio#external_encoding()","stringio#fcntl()","stringio#fileno()","stringio#flush()","stringio#fsync()","stringio#getbyte()","stringio#getc()","stringio#gets()","stringio#internal_encoding()","stringio#isatty()","stringio#length()","stringio#lineno()","stringio#lineno=()","stringio::new()","stringio::open()","stringio#pid()","stringio#pos()","stringio#pos=()","io::generic_writable#print()","io::generic_writable#printf()","stringio#putc()","io::generic_writable#puts()","stringio#read()","io::generic_readable#read_nonblock()","io::generic_readable#readbyte()","io::generic_readable#readchar()","io::generic_readable#readline()","stringio#readlines()","io::generic_readable#readpartial()","stringio#reopen()","stringio#rewind()","stringio#seek()","stringio#set_encoding()","stringio#set_encoding_by_bom()","stringio#size()","stringio#string()","stringio#string=()","stringio#sync()","stringio#sync=()","io::generic_readable#sysread()","stringio#tell()","stringio#truncate()","stringio#tty?()","stringio#ungetbyte()","stringio#ungetc()","stringio#write()","io::generic_writable#write_nonblock()"],"info":[["IO","","IO.html","",""],["IO::generic_readable","","IO/generic_readable.html","",""],["IO::generic_writable","","IO/generic_writable.html","",""],["StringIO","","StringIO.html","","<p>IO streams for strings, with access similar to IO; see IO.\n<p>About the Examples\n<p>Examples on this page assume …\n"],["<<","IO::generic_writable","IO/generic_writable.html#method-i-3C-3C","(p1)","<p>See IO#<<.\n"],["binmode","StringIO","StringIO.html#method-i-binmode","()","<p>Sets the data mode in <code>self</code> to binary mode; see Data Mode.\n"],["close","StringIO","StringIO.html#method-i-close","()","<p>Closes <code>self</code> for both reading and writing.\n<p>Raises IOError if reading or writing is attempted.\n<p>Related:  …\n"],["close_read","StringIO","StringIO.html#method-i-close_read","()","<p>Closes <code>self</code> for reading; closed-write setting remains unchanged.\n<p>Raises IOError if reading is attempted. …\n"],["close_write","StringIO","StringIO.html#method-i-close_write","()","<p>Closes <code>self</code> for writing; closed-read setting remains unchanged.\n<p>Raises IOError if writing is attempted. …\n"],["closed?","StringIO","StringIO.html#method-i-closed-3F","()","<p>Returns <code>true</code> if <code>self</code> is closed for both reading and writing, <code>false</code> otherwise.\n"],["closed_read?","StringIO","StringIO.html#method-i-closed_read-3F","()","<p>Returns <code>true</code> if <code>self</code> is closed for reading, <code>false</code> otherwise.\n"],["closed_write?","StringIO","StringIO.html#method-i-closed_write-3F","()","<p>Returns <code>true</code> if <code>self</code> is closed for writing, <code>false</code> otherwise.\n"],["each","StringIO","StringIO.html#method-i-each","(*args)","<p>Calls the block with each remaining line read from the stream; does nothing if already at end-of-file; …\n"],["each_byte","StringIO","StringIO.html#method-i-each_byte","()","<p>With a block given, calls the block with each remaining byte in the stream; see Byte IO.\n<p>With no block …\n"],["each_char","StringIO","StringIO.html#method-i-each_char","()","<p>With a block given, calls the block with each remaining character in the stream; see Character IO.\n<p>With …\n"],["each_codepoint","StringIO","StringIO.html#method-i-each_codepoint","()","<p>With a block given, calls the block with each remaining codepoint in the stream; see Codepoint IO.\n<p>With …\n"],["each_line","StringIO","StringIO.html#method-i-each_line","(*args)","<p>Calls the block with each remaining line read from the stream; does nothing if already at end-of-file; …\n"],["eof","StringIO","StringIO.html#method-i-eof","()","<p>Returns <code>true</code> if positioned at end-of-stream, <code>false</code> otherwise; see Position.\n<p>Raises IOError if the stream …\n"],["eof?","StringIO","StringIO.html#method-i-eof-3F","()","<p>Returns <code>true</code> if positioned at end-of-stream, <code>false</code> otherwise; see Position.\n<p>Raises IOError if the stream …\n"],["external_encoding","StringIO","StringIO.html#method-i-external_encoding","()","<p>Returns the Encoding object that represents the encoding of the file. If the stream is write mode and …\n"],["fcntl","StringIO","StringIO.html#method-i-fcntl","(*args)","<p>Raises NotImplementedError.\n"],["fileno","StringIO","StringIO.html#method-i-fileno","()","<p>Returns <code>nil</code>.  Just for compatibility to IO.\n"],["flush","StringIO","StringIO.html#method-i-flush","()","<p>Returns an object itself.  Just for compatibility to IO.\n"],["fsync","StringIO","StringIO.html#method-i-fsync","()","<p>Returns 0.  Just for compatibility to IO.\n"],["getbyte","StringIO","StringIO.html#method-i-getbyte","()","<p>Reads and returns the next 8-bit byte from the stream; see Byte IO.\n"],["getc","StringIO","StringIO.html#method-i-getc","()","<p>Reads and returns the next character from the stream; see Character IO.\n"],["gets","StringIO","StringIO.html#method-i-gets","(*args)","<p>Reads and returns a line from the stream; assigns the return value to <code>$_</code>; see Line IO.\n"],["internal_encoding","StringIO","StringIO.html#method-i-internal_encoding","()","<p>Returns the Encoding of the internal string if conversion is specified.  Otherwise returns <code>nil</code>.\n"],["isatty","StringIO","StringIO.html#method-i-isatty","()","<p>Returns <code>false</code>.  Just for compatibility to IO.\n"],["length","StringIO","StringIO.html#method-i-length","()","<p>Returns the size of the buffer string.\n"],["lineno","StringIO","StringIO.html#method-i-lineno","()","<p>Returns the current line number in <code>self</code>; see Line Number.\n"],["lineno=","StringIO","StringIO.html#method-i-lineno-3D","(p1)","<p>Sets the current line number in <code>self</code> to the given <code>new_line_number</code>; see Line Number.\n"],["new","StringIO","StringIO.html#method-c-new","(*args)","<p>Note that <code>mode</code> defaults to <code>&#39;r&#39;</code> if <code>string</code> is frozen.\n<p>Returns a new StringIO instance formed from …\n"],["open","StringIO","StringIO.html#method-c-open","(*args)","<p>Note that <code>mode</code> defaults to <code>&#39;r&#39;</code> if <code>string</code> is frozen.\n<p>Creates a new StringIO instance formed from …\n"],["pid","StringIO","StringIO.html#method-i-pid","()","<p>Returns <code>nil</code>.  Just for compatibility to IO.\n"],["pos","StringIO","StringIO.html#method-i-pos","()","<p>Returns the current position (in bytes); see Position.\n<p>StringIO#tell is an alias for StringIO#pos.\n"],["pos=","StringIO","StringIO.html#method-i-pos-3D","(p1)","<p>Sets the current position (in bytes); see Position.\n"],["print","IO::generic_writable","IO/generic_writable.html#method-i-print","(*args)","<p>See IO#print.\n"],["printf","IO::generic_writable","IO/generic_writable.html#method-i-printf","(*args)","<p>See IO#printf.\n"],["putc","StringIO","StringIO.html#method-i-putc","(p1)","<p>See IO#putc.\n"],["puts","IO::generic_writable","IO/generic_writable.html#method-i-puts","(*args)","<p>See IO#puts.\n"],["read","StringIO","StringIO.html#method-i-read","(*args)","<p>See IO#read.\n"],["read_nonblock","IO::generic_readable","IO/generic_readable.html#method-i-read_nonblock","(p1, p2 = v2, p3 = {})","<p>Similar to #read, but raises <code>EOFError</code> at end of string unless the +exception: false+ option is passed …\n"],["readbyte","IO::generic_readable","IO/generic_readable.html#method-i-readbyte","()","<p>Like <code>getbyte</code>, but raises an exception if already at end-of-stream; see Byte IO.\n"],["readchar","IO::generic_readable","IO/generic_readable.html#method-i-readchar","()","<p>Like <code>getc</code>, but raises an exception if already at end-of-stream; see Character IO.\n"],["readline","IO::generic_readable","IO/generic_readable.html#method-i-readline","(*args)","<p>Reads a line as with IO#gets, but raises EOFError if already at end-of-file; see Line IO.\n"],["readlines","StringIO","StringIO.html#method-i-readlines","(*args)","<p>See IO#readlines.\n"],["readpartial","IO::generic_readable","IO/generic_readable.html#method-i-readpartial","(*args)","<p>Similar to #read, but raises <code>EOFError</code> at end of string instead of returning <code>nil</code>, as well as IO#sysread …\n"],["reopen","StringIO","StringIO.html#method-i-reopen","(*args)","<p>Reinitializes the stream with the given <code>other</code> (string or StringIO) and <code>mode</code>; see IO.new:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">StringIO</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rewind","StringIO","StringIO.html#method-i-rewind","()","<p>Sets the current position and line number to zero; see Position and Line Number.\n"],["seek","StringIO","StringIO.html#method-i-seek","(p1, p2 = v2)","<p>Sets the current position to the given integer <code>offset</code> (in bytes), with respect to a given constant <code>whence</code> …\n"],["set_encoding","StringIO","StringIO.html#method-i-set_encoding","(p1, p2 = v2, p3 = {})","<p>Specify the encoding of the StringIO as <em>ext_enc</em>. Use the default external encoding if <em>ext_enc</em> is nil. …\n"],["set_encoding_by_bom","StringIO","StringIO.html#method-i-set_encoding_by_bom","()",""],["size","StringIO","StringIO.html#method-i-size","()","<p>Returns the size of the buffer string.\n"],["string","StringIO","StringIO.html#method-i-string","()","<p>Returns underlying string:\n\n<pre>StringIO.open(&#39;foo&#39;) do |strio|\n  p strio.string\n  strio.string = &#39;bar&#39;\n  p ...</pre>\n"],["string=","StringIO","StringIO.html#method-i-string-3D","(p1)","<p>Assigns the underlying string as <code>other_string</code>, and sets position to zero; returns <code>other_string</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">StringIO</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sync","StringIO","StringIO.html#method-i-sync","()","<p>Returns <code>true</code>; implemented only for compatibility with other stream classes.\n"],["sync=","StringIO","StringIO.html#method-i-sync-3D","(p1)","<p>Returns the argument unchanged.  Just for compatibility to IO.\n"],["sysread","IO::generic_readable","IO/generic_readable.html#method-i-sysread","(*args)","<p>Similar to #read, but raises <code>EOFError</code> at end of string instead of returning <code>nil</code>, as well as IO#sysread …\n"],["tell","StringIO","StringIO.html#method-i-tell","()","<p>Returns the current position (in bytes); see Position.\n<p>StringIO#tell is an alias for StringIO#pos.\n"],["truncate","StringIO","StringIO.html#method-i-truncate","(p1)","<p>Truncates the buffer string to at most <em>integer</em> bytes. The stream must be opened for writing.\n"],["tty?","StringIO","StringIO.html#method-i-tty-3F","()","<p>Returns <code>false</code>.  Just for compatibility to IO.\n"],["ungetbyte","StringIO","StringIO.html#method-i-ungetbyte","(p1)","<p>Pushes back (“unshifts”) an 8-bit byte onto the stream; see Byte IO.\n"],["ungetc","StringIO","StringIO.html#method-i-ungetc","(p1)","<p>Pushes back (“unshifts”) a character or integer onto the stream; see Character IO.\n"],["write","StringIO","StringIO.html#method-i-write","(*args)","<p>Appends the given string to the underlying buffer string. The stream must be opened for writing.  If …\n"],["write_nonblock","IO::generic_writable","IO/generic_writable.html#method-i-write_nonblock","(p1, p2 = {})",""]]}}