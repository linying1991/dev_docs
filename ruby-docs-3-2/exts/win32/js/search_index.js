var search_data = {"index":{"searchIndex":["resolv","sz","win32","registry","api","constants","error","kernel32","predefinedkey","sspi","api","identity","negotiateauth","sspiresult","securitybuffer","securityhandle","timestamp","==()","closekey()","createkey()","deletekey()","deletevalue()","enumkey()","enumvalue()","flushkey()","openkey()","queryinfokey()","queryvalue()","setvalue()","[]()","[]=()","_dump()","buffersize()","buffertype()","check()","class()","clean_up()","close()","close()","complete_authentication()","create()","create()","created?()","delete()","delete_key()","delete_value()","each()","each_key()","each_value()","encode_token()","expand_environ()","flush()","get_credentials()","get_dns_server_list()","get_hosts_dir()","get_hosts_path()","get_info()","get_initial_token()","get_resolv_info()","info()","inspect()","keys()","lower()","make_wstr()","name()","new()","new()","new()","new()","new()","new()","new()","ok?()","open()","open()","open?()","packdw()","packhandle()","packqw()","proxy_auth_get()","read()","read_bin()","read_i()","read_s()","read_s()","read_s_expand()","time2wtime()","to_p()","to_p()","to_p()","to_p()","to_s()","token()","type2name()","unpack()","unpackdw()","unpackhandle()","unpackqw()","upper()","values()","win64?()","write()","write_bin()","write_i()","write_s()","wtime2time()"],"longSearchIndex":["resolv","resolv::sz","win32","win32::registry","win32::registry::api","win32::registry::constants","win32::registry::error","win32::registry::error::kernel32","win32::registry::predefinedkey","win32::sspi","win32::sspi::api","win32::sspi::identity","win32::sspi::negotiateauth","win32::sspi::sspiresult","win32::sspi::securitybuffer","win32::sspi::securityhandle","win32::sspi::timestamp","win32::sspi::sspiresult#==()","win32::registry::api#closekey()","win32::registry::api#createkey()","win32::registry::api#deletekey()","win32::registry::api#deletevalue()","win32::registry::api#enumkey()","win32::registry::api#enumvalue()","win32::registry::api#flushkey()","win32::registry::api#openkey()","win32::registry::api#queryinfokey()","win32::registry::api#queryvalue()","win32::registry::api#setvalue()","win32::registry#[]()","win32::registry#[]=()","win32::registry#_dump()","win32::sspi::securitybuffer#buffersize()","win32::sspi::securitybuffer#buffertype()","win32::registry::api#check()","win32::registry::predefinedkey#class()","win32::sspi::negotiateauth#clean_up()","win32::registry#close()","win32::registry::predefinedkey#close()","win32::sspi::negotiateauth#complete_authentication()","win32::registry::create()","win32::registry#create()","win32::registry#created?()","win32::registry#delete()","win32::registry#delete_key()","win32::registry#delete_value()","win32::registry#each()","win32::registry#each_key()","win32::registry#each_value()","win32::sspi::negotiateauth#encode_token()","win32::registry::expand_environ()","win32::registry#flush()","win32::sspi::negotiateauth#get_credentials()","resolv::get_dns_server_list()","resolv::get_hosts_dir()","resolv::get_hosts_path()","resolv::get_info()","win32::sspi::negotiateauth#get_initial_token()","resolv::get_resolv_info()","win32::registry#info()","win32::registry#inspect()","win32::registry#keys()","win32::sspi::securityhandle#lower()","win32::registry::api#make_wstr()","win32::registry#name()","win32::registry::new()","win32::registry::error::new()","win32::registry::predefinedkey::new()","win32::sspi::identity::new()","win32::sspi::negotiateauth::new()","win32::sspi::sspiresult::new()","win32::sspi::securitybuffer::new()","win32::sspi::sspiresult#ok?()","win32::registry::open()","win32::registry#open()","win32::registry#open?()","win32::registry::api#packdw()","win32::registry::api#packhandle()","win32::registry::api#packqw()","win32::sspi::negotiateauth::proxy_auth_get()","win32::registry#read()","win32::registry#read_bin()","win32::registry#read_i()","resolv::sz#read_s()","win32::registry#read_s()","win32::registry#read_s_expand()","win32::registry::time2wtime()","win32::sspi::identity#to_p()","win32::sspi::securitybuffer#to_p()","win32::sspi::securityhandle#to_p()","win32::sspi::timestamp#to_p()","win32::sspi::sspiresult#to_s()","win32::sspi::securitybuffer#token()","win32::registry::type2name()","win32::sspi::securitybuffer#unpack()","win32::registry::api#unpackdw()","win32::registry::api#unpackhandle()","win32::registry::api#unpackqw()","win32::sspi::securityhandle#upper()","win32::registry#values()","win32::registry::api#win64?()","win32::registry#write()","win32::registry#write_bin()","win32::registry#write_i()","win32::registry#write_s()","win32::registry::wtime2time()"],"info":[["Resolv","","Resolv.html","","<p>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Windows</span> <span class=\"ruby-constant\">NT</span>\n</pre>\n<p>\n"],["Resolv::SZ","","Resolv/SZ.html","",""],["Win32","","Win32.html","","<p>Implements bindings to Win32 SSPI functions, focused on authentication to a proxy server over HTTP.\n"],["Win32::Registry","","Win32/Registry.html","",""],["Win32::Registry::API","","Win32/Registry/API.html","","<p>Win32 APIs\n"],["Win32::Registry::Constants","","Win32/Registry/Constants.html","","<p>For detail, see the MSDN.\n<p>— HKEY_*\n\n<pre>Predefined key ((*handle*)).\nThese are Integer, not Win32::Registry.</pre>\n"],["Win32::Registry::Error","","Win32/Registry/Error.html","","<p>Error\n"],["Win32::Registry::Error::Kernel32","","Win32/Registry/Error/Kernel32.html","",""],["Win32::Registry::PredefinedKey","","Win32/Registry/PredefinedKey.html","","<p>Predefined Keys\n"],["Win32::SSPI","","Win32/SSPI.html","",""],["Win32::SSPI::API","","Win32/SSPI/API.html","","<p>Win32 API Functions. Uses Win32API to bind methods to constants contained in class.\n"],["Win32::SSPI::Identity","","Win32/SSPI/Identity.html","","<p>SEC_WINNT_AUTH_IDENTITY structure\n"],["Win32::SSPI::NegotiateAuth","","Win32/SSPI/NegotiateAuth.html","","<p>Handles “Negotiate” type authentication. Geared towards authenticating with a proxy server …\n"],["Win32::SSPI::SSPIResult","","Win32/SSPI/SSPIResult.html","","<p>Takes a return result from an SSPI function and interprets the value.\n"],["Win32::SSPI::SecurityBuffer","","Win32/SSPI/SecurityBuffer.html","","<p>Creates binary representations of a SecBufferDesc structure, including the SecBuffer contained inside. …\n"],["Win32::SSPI::SecurityHandle","","Win32/SSPI/SecurityHandle.html","","<p>SecHandle struct\n"],["Win32::SSPI::TimeStamp","","Win32/SSPI/TimeStamp.html","","<p>TimeStamp struct\n"],["==","Win32::SSPI::SSPIResult","Win32/SSPI/SSPIResult.html#method-i-3D-3D","(other)",""],["CloseKey","Win32::Registry::API","Win32/Registry/API.html#method-i-CloseKey","(hkey)",""],["CreateKey","Win32::Registry::API","Win32/Registry/API.html#method-i-CreateKey","(hkey, name, opt, desired)",""],["DeleteKey","Win32::Registry::API","Win32/Registry/API.html#method-i-DeleteKey","(hkey, name)",""],["DeleteValue","Win32::Registry::API","Win32/Registry/API.html#method-i-DeleteValue","(hkey, name)",""],["EnumKey","Win32::Registry::API","Win32/Registry/API.html#method-i-EnumKey","(hkey, index)",""],["EnumValue","Win32::Registry::API","Win32/Registry/API.html#method-i-EnumValue","(hkey, index)",""],["FlushKey","Win32::Registry::API","Win32/Registry/API.html#method-i-FlushKey","(hkey)",""],["OpenKey","Win32::Registry::API","Win32/Registry/API.html#method-i-OpenKey","(hkey, name, opt, desired)",""],["QueryInfoKey","Win32::Registry::API","Win32/Registry/API.html#method-i-QueryInfoKey","(hkey)",""],["QueryValue","Win32::Registry::API","Win32/Registry/API.html#method-i-QueryValue","(hkey, name)",""],["SetValue","Win32::Registry::API","Win32/Registry/API.html#method-i-SetValue","(hkey, name, type, data, size)",""],["[]","Win32::Registry","Win32/Registry.html#method-i-5B-5D","(name, *rtype)","<p>Read a registry value named name and return its value data. The class of the value is the same as the …\n"],["[]=","Win32::Registry","Win32/Registry.html#method-i-5B-5D-3D","(name, rtype, value = nil)","<p>Write value to a registry value named name.\n<p>If wtype is specified, the value type is it. Otherwise, the …\n"],["_dump","Win32::Registry","Win32/Registry.html#method-i-_dump","(depth)","<p>marshalling is not allowed\n"],["bufferSize","Win32::SSPI::SecurityBuffer","Win32/SSPI/SecurityBuffer.html#method-i-bufferSize","()",""],["bufferType","Win32::SSPI::SecurityBuffer","Win32/SSPI/SecurityBuffer.html#method-i-bufferType","()",""],["check","Win32::Registry::API","Win32/Registry/API.html#method-i-check","(result)",""],["class","Win32::Registry::PredefinedKey","Win32/Registry/PredefinedKey.html#method-i-class","()","<p>Fake #class method for Registry#open, Registry#create\n"],["clean_up","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-i-clean_up","()",""],["close","Win32::Registry","Win32/Registry.html#method-i-close","()","<p>Close key.\n<p>After close, most method raise an error.\n"],["close","Win32::Registry::PredefinedKey","Win32/Registry/PredefinedKey.html#method-i-close","()","<p>Predefined keys cannot be closed\n"],["complete_authentication","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-i-complete_authentication","(token)","<p>Takes a token and gets the next token in the Negotiate authentication chain. Token can be Base64 encoded …\n"],["create","Win32::Registry","Win32/Registry.html#method-c-create","(hkey, subkey, desired = KEY_ALL_ACCESS, opt = REG_OPTION_RESERVED)","<p>— Registry.create(key, subkey, desired = KEY_ALL_ACCESS, opt = REG_OPTION_RESERVED)\n<p>— Registry.create …\n"],["create","Win32::Registry","Win32/Registry.html#method-i-create","(subkey, desired = KEY_ALL_ACCESS, opt = REG_OPTION_RESERVED, &blk)","<p>Same as Win32::Registry.create (self, subkey, desired, opt)\n"],["created?","Win32::Registry","Win32/Registry.html#method-i-created-3F","()","<p>Returns if key is created ((<strong>newly</strong>)). (see Registry.create) – basically you call create then when you …\n"],["delete","Win32::Registry","Win32/Registry.html#method-i-delete","(name)",""],["delete_key","Win32::Registry","Win32/Registry.html#method-i-delete_key","(name, recursive = false)","<p>Delete a subkey named name and all its values.\n<p>If recursive is false, the subkey must not have subkeys. …\n"],["delete_value","Win32::Registry","Win32/Registry.html#method-i-delete_value","(name)","<p>Delete a registry value named name. We can not delete the ‘default’ value.\n"],["each","Win32::Registry","Win32/Registry.html#method-i-each","()",""],["each_key","Win32::Registry","Win32/Registry.html#method-i-each_key","()","<p>Enumerate subkeys.\n<p>subkey is String which contains name of subkey. wtime is last write time as FILETIME …\n"],["each_value","Win32::Registry","Win32/Registry.html#method-i-each_value","()","<p>Enumerate values.\n"],["encode_token","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-i-encode_token","(t)",""],["expand_environ","Win32::Registry","Win32/Registry.html#method-c-expand_environ","(str)","<p>Replace %w+% into the environment value of what is contained between the %‘s This method is used …\n"],["flush","Win32::Registry","Win32/Registry.html#method-i-flush","()","<p>Write all the attributes into the registry file.\n"],["get_credentials","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-i-get_credentials","()","<p>Gets credentials based on user, domain or both. If both are nil, an error occurs\n"],["get_dns_server_list","Resolv","Resolv.html#method-c-get_dns_server_list","()",""],["get_hosts_dir","Resolv","Resolv.html#method-c-get_hosts_dir","()",""],["get_hosts_path","Resolv","Resolv.html#method-c-get_hosts_path","()",""],["get_info","Resolv","Resolv.html#method-c-get_info","()",""],["get_initial_token","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-i-get_initial_token","()","<p>Gets the initial Negotiate token. Returns it as a base64 encoded string suitable for use in HTTP. Can …\n"],["get_resolv_info","Resolv","Resolv.html#method-c-get_resolv_info","()",""],["info","Win32::Registry","Win32/Registry.html#method-i-info","()","<p>Returns key information as Array of: :num_keys\n\n<pre>The number of subkeys.</pre>\n<p>:max_key_length\n"],["inspect","Win32::Registry","Win32/Registry.html#method-i-inspect","()",""],["keys","Win32::Registry","Win32/Registry.html#method-i-keys","()","<p>return keys as an array\n"],["lower","Win32::SSPI::SecurityHandle","Win32/SSPI/SecurityHandle.html#method-i-lower","()",""],["make_wstr","Win32::Registry::API","Win32/Registry/API.html#method-i-make_wstr","(str)",""],["name","Win32::Registry","Win32/Registry.html#method-i-name","()","<p>Full path of key such as ‘HKEY_CURRENT_USERSOFTWAREfoobar’.\n"],["new","Win32::Registry","Win32/Registry.html#method-c-new","(hkey, parent, keyname, disposition)","<p>initialize\n"],["new","Win32::Registry::Error","Win32/Registry/Error.html#method-c-new","(code)",""],["new","Win32::Registry::PredefinedKey","Win32/Registry/PredefinedKey.html#method-c-new","(hkey, keyname)",""],["new","Win32::SSPI::Identity","Win32/SSPI/Identity.html#method-c-new","(user = nil, domain = nil, password = nil)",""],["new","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-c-new","(user = nil, domain = nil)","<p>Creates a new instance ready for authentication as the given user in the given domain. Defaults to current …\n"],["new","Win32::SSPI::SSPIResult","Win32/SSPI/SSPIResult.html#method-c-new","(value)",""],["new","Win32::SSPI::SecurityBuffer","Win32/SSPI/SecurityBuffer.html#method-c-new","(buffer = nil)",""],["ok?","Win32::SSPI::SSPIResult","Win32/SSPI/SSPIResult.html#method-i-ok-3F","()",""],["open","Win32::Registry","Win32/Registry.html#method-c-open","(hkey, subkey, desired = KEY_READ, opt = REG_OPTION_RESERVED)","<p>— Registry.open(key, subkey, desired = KEY_READ, opt = REG_OPTION_RESERVED)\n<p>— Registry.open(key, subkey, …\n"],["open","Win32::Registry","Win32/Registry.html#method-i-open","(subkey, desired = KEY_READ, opt = REG_OPTION_RESERVED, &blk)","<p>Same as Win32::Registry.open (self, subkey, desired, opt)\n"],["open?","Win32::Registry","Win32/Registry.html#method-i-open-3F","()","<p>Returns if key is not closed.\n"],["packdw","Win32::Registry::API","Win32/Registry/API.html#method-i-packdw","(dw)",""],["packhandle","Win32::Registry::API","Win32/Registry/API.html#method-i-packhandle","(h)",""],["packqw","Win32::Registry::API","Win32/Registry/API.html#method-i-packqw","(qw)",""],["proxy_auth_get","Win32::SSPI::NegotiateAuth","Win32/SSPI/NegotiateAuth.html#method-c-proxy_auth_get","(http, path, user = nil, domain = nil)","<p>Given a connection and a request path, performs authentication as the current user and returns the response …\n"],["read","Win32::Registry","Win32/Registry.html#method-i-read","(name, *rtype)","<p>Read a registry value named name and return array of [ type, data ]. When name is nil, the ‘default’ …\n"],["read_bin","Win32::Registry","Win32/Registry.html#method-i-read_bin","(name)","<p>Read a REG_SZ(read_s), REG_DWORD(read_i), or REG_BINARY(read_bin) registry value named name.\n<p>If the values …\n"],["read_i","Win32::Registry","Win32/Registry.html#method-i-read_i","(name)","<p>Read a REG_SZ(read_s), REG_DWORD(read_i), or REG_BINARY(read_bin) registry value named name.\n<p>If the values …\n"],["read_s","Resolv::SZ","Resolv/SZ.html#method-i-read_s","(key)","<p>ad hoc workaround for broken registry\n"],["read_s","Win32::Registry","Win32/Registry.html#method-i-read_s","(name)","<p>Read a REG_SZ(read_s), REG_DWORD(read_i), or REG_BINARY(read_bin) registry value named name.\n<p>If the values …\n"],["read_s_expand","Win32::Registry","Win32/Registry.html#method-i-read_s_expand","(name)","<p>Read a REG_SZ or REG_EXPAND_SZ registry value named name.\n<p>If the value type is REG_EXPAND_SZ, environment …\n"],["time2wtime","Win32::Registry","Win32/Registry.html#method-c-time2wtime","(time)","<p>Convert Time object or Integer object into 64-bit FILETIME.\n"],["to_p","Win32::SSPI::Identity","Win32/SSPI/Identity.html#method-i-to_p","()",""],["to_p","Win32::SSPI::SecurityBuffer","Win32/SSPI/SecurityBuffer.html#method-i-to_p","()",""],["to_p","Win32::SSPI::SecurityHandle","Win32/SSPI/SecurityHandle.html#method-i-to_p","()",""],["to_p","Win32::SSPI::TimeStamp","Win32/SSPI/TimeStamp.html#method-i-to_p","()",""],["to_s","Win32::SSPI::SSPIResult","Win32/SSPI/SSPIResult.html#method-i-to_s","()",""],["token","Win32::SSPI::SecurityBuffer","Win32/SSPI/SecurityBuffer.html#method-i-token","()",""],["type2name","Win32::Registry","Win32/Registry.html#method-c-type2name","(type)","<p>Convert registry type value to readable string.\n"],["unpack","Win32::SSPI::SecurityBuffer","Win32/SSPI/SecurityBuffer.html#method-i-unpack","()","<p>Unpacks the SecurityBufferDesc structure into member variables. We only want to do this once per struct, …\n"],["unpackdw","Win32::Registry::API","Win32/Registry/API.html#method-i-unpackdw","(dw)",""],["unpackhandle","Win32::Registry::API","Win32/Registry/API.html#method-i-unpackhandle","(h)",""],["unpackqw","Win32::Registry::API","Win32/Registry/API.html#method-i-unpackqw","(qw)",""],["upper","Win32::SSPI::SecurityHandle","Win32/SSPI/SecurityHandle.html#method-i-upper","()",""],["values","Win32::Registry","Win32/Registry.html#method-i-values","()","<p>return values as an array\n"],["win64?","Win32::Registry::API","Win32/Registry/API.html#method-i-win64-3F","()",""],["write","Win32::Registry","Win32/Registry.html#method-i-write","(name, type, data)","<p>Write data to a registry value named name. When name is nil, write to the ‘default’ value.\n<p>type is …\n"],["write_bin","Win32::Registry","Win32/Registry.html#method-i-write_bin","(name, value)","<p>Write value to a registry value named name.\n<p>The value type is REG_SZ(write_s), REG_DWORD(write_i), or …\n"],["write_i","Win32::Registry","Win32/Registry.html#method-i-write_i","(name, value)","<p>Write value to a registry value named name.\n<p>The value type is REG_SZ(write_s), REG_DWORD(write_i), or …\n"],["write_s","Win32::Registry","Win32/Registry.html#method-i-write_s","(name, value)","<p>Write value to a registry value named name.\n<p>The value type is REG_SZ(write_s), REG_DWORD(write_i), or …\n"],["wtime2time","Win32::Registry","Win32/Registry.html#method-c-wtime2time","(wtime)","<p>Convert 64-bit FILETIME integer into Time object.\n"]]}}